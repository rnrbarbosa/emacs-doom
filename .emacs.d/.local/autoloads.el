;; -*- lexical-binding: t; coding: utf-8; -*-
;; This file is autogenerated by 'doom sync', DO NOT EDIT IT!!
(unless (equal emacs-major-version 27) (signal 'doom-error (list "The installed version of Emacs has changed since last 'doom sync' ran" "Run 'doom sync && doom build' to bring Doom up to speed")))(unless (equal doom-version "2.0.9") (signal 'doom-error (list "The installed version of Doom has changed since last 'doom sync' ran" "Run 'doom sync' to bring Doom up to speed")))(set 'doom-modules '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ((:completion . company) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/completion/company/") (:completion . ivy) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/completion/ivy/") (:ui . doom) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/ui/doom/") (:ui . doom-dashboard) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/ui/doom-dashboard/") (:ui . doom-quit) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/ui/doom-quit/") (:ui . hl-todo) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/ui/hl-todo/") (:ui . hydra) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/ui/hydra/") (:ui . indent-guides) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/ui/indent-guides/") (:ui . ligatures) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/ui/ligatures/") (:ui . modeline) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/ui/modeline/") (:ui . neotree) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/ui/neotree/") (:ui . ophints) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/ui/ophints/") (:ui . popup) (:flags (+defaults) :path "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/") (:ui . unicode) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/ui/unicode/") (:ui . vc-gutter) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/ui/vc-gutter/") (:ui . vi-tilde-fringe) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/ui/vi-tilde-fringe/") (:ui . window-select) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/ui/window-select/") (:ui . workspaces) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/") (:ui . zen) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/ui/zen/") (:editor . evil) (:flags (+everywhere) :path "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/") (:editor . file-templates) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/editor/file-templates/") (:editor . fold) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/editor/fold/") (:editor . snippets) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/editor/snippets/") (:emacs . dired) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/emacs/dired/") (:emacs . electric) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/emacs/electric/") (:emacs . undo) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/emacs/undo/") (:emacs . vc) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/emacs/vc/") (:term . eshell) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/") (:term . vterm) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/term/vterm/") (:checkers . syntax) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/checkers/syntax/") (:tools . ansible) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/tools/ansible/") (:tools . docker) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/tools/docker/") (:tools . editorconfig) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/tools/editorconfig/") (:tools . eval) (:flags (+overlay) :path "/Users/rnrbarbosa/.emacs.d/modules/tools/eval/") (:tools . lookup) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/tools/lookup/") (:tools . magit) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/tools/magit/") (:tools . make) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/tools/make/") (:tools . pass) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/tools/pass/") (:tools . pdf) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/tools/pdf/") (:tools . taskrunner) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/tools/taskrunner/") (:tools . tmux) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/tools/tmux/") (:os . macos) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/os/macos/") (:os . tty) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/os/tty/") (:lang . data) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/lang/data/") (:lang . emacs-lisp) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/lang/emacs-lisp/") (:lang . go) (:flags (+lsp) :path "/Users/rnrbarbosa/.emacs.d/modules/lang/go/") (:lang . json) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/lang/json/") (:lang . java) (:flags (+meghanada) :path "/Users/rnrbarbosa/.emacs.d/modules/lang/java/") (:lang . ledger) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/lang/ledger/") (:lang . markdown) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/lang/markdown/") (:lang . org) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/lang/org/") (:lang . python) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/lang/python/") (:lang . rest) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/lang/rest/") (:lang . rst) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/lang/rst/") (:lang . sh) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/lang/sh/") (:lang . swift) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/lang/swift/") (:lang . yaml) (:flags nil :path "/Users/rnrbarbosa/.emacs.d/modules/lang/yaml/") (:config . default) (:flags (+bindings +smartparens) :path "/Users/rnrbarbosa/.emacs.d/modules/config/default/"))))(set 'doom-disabled-packages 'nil)(set 'load-path '("/Users/rnrbarbosa/.emacs.d/.local/straight/build/link-hint" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/drag-stuff" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/flycheck-swift" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/sourcekit" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/company-sourcekit" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/swift-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/company-shell" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/sphinx-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/know-your-http-well" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/company-restclient" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/py-isort" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/shut-up" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/pyimport" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/python-pytest" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/nose" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/pyvenv" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/pipenv" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/company-anaconda" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/pythonic" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/anaconda-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/pip-requirements" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ox-rst" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/restclient" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ob-restclient" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ob-go" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ob-async" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/orgit" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/org-noter" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/org-pdftools" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-org" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/org-cliplink" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/toc-org" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ox-clip" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/org-yt" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/htmlize" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/org-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-markdown" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/edit-indirect" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/markdown-toc" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/markdown-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/flycheck-ledger" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-ledger" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ledger-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/meghanada" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/groovy-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/android-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/counsel-jq" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/flycheck-golangci-lint" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/company-go" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/go-gen-test" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/go-tag" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/gorepl-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/go-guru" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/go-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/go-eldoc" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/buttercup" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/flycheck-cask" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/elisp-demos" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/elisp-def" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/overseer" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/macrostep" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/highlight-quoted" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/csv-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-terminal-cursor-changer" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/xclip" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ns-auto-titlebar" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/osx-trash" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ivy-taskrunner" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/taskrunner" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/pdf-tools" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ivy-pass" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/password-store-otp" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/auth-source-pass" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/password-store" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/pass" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/makefile-executor" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-magit" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/deferred" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/treepy" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ghub" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/github-review" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/magit-todos" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/magit-popup" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/magit-gitflow" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/magit" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/request" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ivy-xref" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/dumb-jump" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/eros" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/quickrun" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/editorconfig" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/dockerfile-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/tablist" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/json-snatcher" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/json-reformat" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/json-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/docker-tramp" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/docker" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/company-ansible" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/yaml-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/jinja2-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ansible-doc" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ansible" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/popup" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/flycheck-popup-tip" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/flycheck" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/vterm" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/bash-completion" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/fish-completion" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/eshell-did-you-mean" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/esh-help" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/eshell-z" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/eshell-up" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/gitignore-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/gitconfig-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/git-timemachine" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/async" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/with-editor" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/transient" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/git-commit" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/browse-at-remote" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/undo-fu-session" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/undo-fu" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/fd-dired" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/dired-rsync" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/diff-hl" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/dired-git-info" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/diredfl" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/doom-snippets" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/auto-yasnippet" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-vimish-fold" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/vimish-fold" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/yasnippet" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/annalist" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-collection" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-quick-diff" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/exato" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-visualstar" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-traces" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-textobj-anyblock" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-snipe" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-numbers" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-nerd-commenter" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-lion" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-indent-plus" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-exchange" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-escape" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-surround" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/expand-region" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/embrace" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-embrace" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-easymotion" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-args" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/mixed-pitch" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/visual-fill-column" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/writeroom-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/persp-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/avy" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ace-window" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/vi-tilde-fringe" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/fringe-helper" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/git-gutter" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/git-gutter-fringe" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ucs-utils" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/list-utils" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/pcache" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/persistent-soft" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/font-utils" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/unicode-fonts" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-goggles" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/neotree" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/goto-chg" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/undo-tree" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-anzu" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/anzu" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/shrink-path" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/doom-modeline" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/highlight-indent-guides" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/hl-todo" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/solaire-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/doom-themes" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/wgrep" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ivy-rich" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/counsel-projectile" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/amx" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/counsel" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/lv" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/hydra" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ivy-hydra" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ivy" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/swiper" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/company-dict" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/company" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/which-key" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/general" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/epl" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/pkg-info" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/projectile" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ws-butler" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/smartparens" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/pcre2el" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/elisp-refs" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/f" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/s" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/dash-functional" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/dash" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/helpful" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/dtrt-indent" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/better-jumper" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/restart-emacs" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/rainbow-delimiters" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/parent-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/highlight-numbers" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/hide-mode-line" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/memoize" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/all-the-icons" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/explain-pause-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/gcmh" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/auto-minor-mode" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/bind-key" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/use-package" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/straight" "/Users/rnrbarbosa/.emacs.d/core/" "/usr/local/share/emacs/site-lisp" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/vc" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/url" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/textmodes" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/progmodes" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/play" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/nxml" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/net" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/mh-e" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/mail" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/leim" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/language" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/international" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/image" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/gnus" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/eshell" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/erc" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/emulation" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/emacs-lisp" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/cedet" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/calendar" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/calc" "/usr/local/Cellar/emacs-plus@27/27.1/share/emacs/27.1/lisp/obsolete"))(set 'auto-mode-alist '(("\\.swift\\'" . swift-mode) ("requirements\\.in" . pip-requirements-mode) ("requirements[^z-a]*\\.txt\\'" . pip-requirements-mode) ("\\.pip\\'" . pip-requirements-mode) ("\\.odc\\'" . archive-mode) ("\\.odf\\'" . archive-mode) ("\\.odi\\'" . archive-mode) ("\\.otp\\'" . archive-mode) ("\\.odp\\'" . archive-mode) ("\\.otg\\'" . archive-mode) ("\\.odg\\'" . archive-mode) ("\\.ots\\'" . archive-mode) ("\\.ods\\'" . archive-mode) ("\\.odm\\'" . archive-mode) ("\\.ott\\'" . archive-mode) ("\\.odt\\'" . archive-mode) ("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode) ("\\.ledger\\'" . ledger-mode) ("Jenkinsfile" . groovy-mode) ("\\.g\\(?:ant\\|roovy\\|radle\\)\\'" . groovy-mode) ("go\\.mod\\'" . go-dot-mod-mode) ("\\.go\\'" . go-mode) ("\\.tsv\\'" . tsv-mode) ("\\.[Cc][Ss][Vv]\\'" . csv-mode) ("/git-rebase-todo\\'" . git-rebase-mode) ("\\.editorconfig\\'" . editorconfig-conf-mode) ("Dockerfile\\(?:\\..*\\)?\\'" . dockerfile-mode) ("\\(?:\\(?:\\.\\(?:b\\(?:\\(?:abel\\|ower\\)rc\\)\\|json\\(?:ld\\)?\\)\\|composer\\.lock\\)\\'\\)" . json-mode) ("\\.\\(e?ya?\\|ra\\)ml\\'" . yaml-mode) ("\\.j2\\'" . jinja2-mode) ("\\.jinja2\\'" . jinja2-mode) ("/git/ignore\\'" . gitignore-mode) ("/info/exclude\\'" . gitignore-mode) ("/\\.gitignore\\'" . gitignore-mode) ("/etc/gitconfig\\'" . gitconfig-mode) ("/\\.gitmodules\\'" . gitconfig-mode) ("/git/config\\'" . gitconfig-mode) ("/modules/.*/config\\'" . gitconfig-mode) ("/\\.git/config\\'" . gitconfig-mode) ("/\\.gitconfig\\'" . gitconfig-mode) ("\\.gpg\\(~\\|\\.~[0-9]+~\\)?\\'" nil epa-file) ("\\.\\(?:3fr\\|a\\(?:rw\\|vs\\)\\|bmp[23]?\\|c\\(?:als?\\|myka?\\|r[2w]\\|u[rt]\\)\\|d\\(?:c[mrx]\\|ds\\|ng\\|px\\)\\|exr\\|f\\(?:ax\\|its\\)\\|gif\\(?:87\\)?\\|hrz\\|ic\\(?:on\\|[bo]\\)\\|j\\(?:2c\\|ng\\|p\\(?:eg\\|[2cg]\\)\\)\\|k\\(?:25\\|dc\\)\\|m\\(?:iff\\|ng\\|rw\\|s\\(?:l\\|vg\\)\\|tv\\)\\|nef\\|o\\(?:rf\\|tb\\)\\|p\\(?:bm\\|c\\(?:ds\\|[dltx]\\)\\|db\\|ef\\|gm\\|i\\(?:ct\\|x\\)\\|jpeg\\|n\\(?:g\\(?:24\\|32\\|8\\)\\|[gm]\\)\\|pm\\|sd\\|tif\\|wp\\)\\|r\\(?:a[fs]\\|gb[ao]?\\|l[ae]\\)\\|s\\(?:c[rt]\\|fw\\|gi\\|r[2f]\\|un\\|vgz?\\)\\|t\\(?:ga\\|i\\(?:ff\\(?:64\\)?\\|le\\|m\\)\\|tf\\)\\|uyvy\\|v\\(?:da\\|i\\(?:car\\|d\\|ff\\)\\|st\\)\\|w\\(?:bmp\\|pg\\)\\|x\\(?:3f\\|bm\\|cf\\|pm\\|[cv]\\)\\|y\\(?:cbcra?\\|uv\\)\\)\\'" . image-mode) ("\\.elc\\'" . elisp-byte-code-mode) ("\\.zst\\'" nil jka-compr) ("\\.dz\\'" nil jka-compr) ("\\.xz\\'" nil jka-compr) ("\\.lzma\\'" nil jka-compr) ("\\.lz\\'" nil jka-compr) ("\\.g?z\\'" nil jka-compr) ("\\.bz2\\'" nil jka-compr) ("\\.Z\\'" nil jka-compr) ("\\.vr[hi]?\\'" . vera-mode) ("\\(?:\\.\\(?:rbw?\\|ru\\|rake\\|thor\\|jbuilder\\|rabl\\|gemspec\\|podspec\\)\\|/\\(?:Gem\\|Rake\\|Cap\\|Thor\\|Puppet\\|Berks\\|Vagrant\\|Guard\\|Pod\\)file\\)\\'" . ruby-mode) ("\\.re?st\\'" . rst-mode) ("\\.py[iw]?\\'" . python-mode) ("\\.m\\'" . octave-maybe-mode) ("\\.less\\'" . less-css-mode) ("\\.scss\\'" . scss-mode) ("\\.awk\\'" . awk-mode) ("\\.\\(u?lpc\\|pike\\|pmod\\(\\.in\\)?\\)\\'" . pike-mode) ("\\.idl\\'" . idl-mode) ("\\.java\\'" . java-mode) ("\\.m\\'" . objc-mode) ("\\.ii\\'" . c++-mode) ("\\.i\\'" . c-mode) ("\\.lex\\'" . c-mode) ("\\.y\\(acc\\)?\\'" . c-mode) ("\\.h\\'" . c-or-c++-mode) ("\\.c\\'" . c-mode) ("\\.\\(CC?\\|HH?\\)\\'" . c++-mode) ("\\.[ch]\\(pp\\|xx\\|\\+\\+\\)\\'" . c++-mode) ("\\.\\(cc\\|hh\\)\\'" . c++-mode) ("\\.\\(bat\\|cmd\\)\\'" . bat-mode) ("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . mhtml-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.ad[abs]\\'" . ada-mode) ("\\.ad[bs]\\.dg\\'" . ada-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) ("\\.mk\\'" . makefile-bsdmake-mode) ("\\.make\\'" . makefile-bsdmake-mode) ("GNUmakefile\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-bsdmake-mode) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("-gdb\\.gdb" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ckz]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_\\(profile\\|history\\|log\\(in\\|out\\)\\)\\|z?log\\(in\\|out\\)\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(shrc\\|zshrc\\|m?kshrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\(acinclude\\|aclocal\\|acsite\\)\\.m4\\'" . autoconf-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|cbr\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|CBR\\|7Z\\)\\'" . archive-mode) ("\\.oxt\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.js[mx]?\\'" . javascript-mode) ("\\.har\\'" . javascript-mode) ("\\.json\\'" . javascript-mode) ("\\.[ds]?va?h?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("[:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|DVI\\|OD[FGPST]\\|DOCX\\|XLSX?\\|PPTX?\\|pdf\\|djvu\\|dvi\\|od[fgpst]\\|docx\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("/\\.\\(authinfo\\|netrc\\)\\'" . authinfo-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.la\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\.toml\\'" . conf-toml-mode) ("\\.desktop\\'" . conf-desktop-mode) ("/\\.redshift\\.conf\\'" . conf-windows-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gitconfig\\|gnokiirc\\|hgrc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.\\(?:asound\\|enigma\\|fetchmail\\|gltron\\|gtk\\|hxplayer\\|mairix\\|mbsync\\|msmtp\\|net\\|neverball\\|nvidia-settings-\\|offlineimap\\|qt/.+\\|realplayer\\|reportbug\\|rtorrent\\.\\|screen\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|mpdconf\\|notmuch-config\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/\\|\\.ad\\'" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode) ("\\.art\\'" . image-mode) ("\\.avs\\'" . image-mode) ("\\.bmp\\'" . image-mode) ("\\.cmyk\\'" . image-mode) ("\\.cmyka\\'" . image-mode) ("\\.crw\\'" . image-mode) ("\\.dcr\\'" . image-mode) ("\\.dcx\\'" . image-mode) ("\\.dng\\'" . image-mode) ("\\.dpx\\'" . image-mode) ("\\.fax\\'" . image-mode) ("\\.hrz\\'" . image-mode) ("\\.icb\\'" . image-mode) ("\\.icc\\'" . image-mode) ("\\.icm\\'" . image-mode) ("\\.ico\\'" . image-mode) ("\\.icon\\'" . image-mode) ("\\.jbg\\'" . image-mode) ("\\.jbig\\'" . image-mode) ("\\.jng\\'" . image-mode) ("\\.jnx\\'" . image-mode) ("\\.miff\\'" . image-mode) ("\\.mng\\'" . image-mode) ("\\.mvg\\'" . image-mode) ("\\.otb\\'" . image-mode) ("\\.p7\\'" . image-mode) ("\\.pcx\\'" . image-mode) ("\\.pdb\\'" . image-mode) ("\\.pfa\\'" . image-mode) ("\\.pfb\\'" . image-mode) ("\\.picon\\'" . image-mode) ("\\.pict\\'" . image-mode) ("\\.rgb\\'" . image-mode) ("\\.rgba\\'" . image-mode) ("\\.tga\\'" . image-mode) ("\\.wbmp\\'" . image-mode) ("\\.webp\\'" . image-mode) ("\\.wmf\\'" . image-mode) ("\\.wpg\\'" . image-mode) ("\\.xcf\\'" . image-mode) ("\\.xmp\\'" . image-mode) ("\\.xwd\\'" . image-mode) ("\\.yuv\\'" . image-mode) ("\\.tgz\\'" . tar-mode) ("\\.tbz2?\\'" . tar-mode) ("\\.txz\\'" . tar-mode) ("\\.tzst\\'" . tar-mode)))(set 'interpreter-mode-alist '(("groovy" . groovy-mode) ("ruby1.8" . ruby-mode) ("ruby1.9" . ruby-mode) ("jruby" . ruby-mode) ("rbx" . ruby-mode) ("ruby" . ruby-mode) ("python[0-9.]*" . python-mode) ("rhino" . js-mode) ("gjs" . js-mode) ("nodejs" . js-mode) ("node" . js-mode) ("gawk" . awk-mode) ("nawk" . awk-mode) ("mawk" . awk-mode) ("awk" . awk-mode) ("pike" . pike-mode) ("\\(mini\\)?perl5?" . perl-mode) ("wishx?" . tcl-mode) ("tcl\\(sh\\)?" . tcl-mode) ("expect" . tcl-mode) ("octave" . octave-mode) ("scm" . scheme-mode) ("[acjkwz]sh" . sh-mode) ("r?bash2?" . sh-mode) ("dash" . sh-mode) ("mksh" . sh-mode) ("\\(dt\\|pd\\|w\\)ksh" . sh-mode) ("es" . sh-mode) ("i?tcsh" . sh-mode) ("oash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh5?" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode)))(set 'Info-directory-list '("/Users/rnrbarbosa/.emacs.d/.local/straight/build/link-hint/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/drag-stuff/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/flycheck-swift/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/company-sourcekit/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/sourcekit/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/swift-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/company-shell/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/sphinx-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/company-restclient/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/know-your-http-well/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/py-isort/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/pyimport/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/shut-up/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/python-pytest/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/nose/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/pipenv/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/pyvenv/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/company-anaconda/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/anaconda-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/pythonic/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/pip-requirements/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ox-rst/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ob-restclient/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/restclient/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ob-go/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ob-async/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/orgit/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/org-pdftools/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/org-noter/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-org/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/org-cliplink/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/toc-org/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ox-clip/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/org-yt/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/htmlize/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/org-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-markdown/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/edit-indirect/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/markdown-toc/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/markdown-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/flycheck-ledger/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-ledger/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ledger-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/meghanada/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/groovy-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/android-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/counsel-jq/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/flycheck-golangci-lint/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/company-go/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/go-gen-test/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/go-tag/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/gorepl-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/go-guru/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/go-eldoc/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/go-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/buttercup/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/flycheck-cask/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/elisp-demos/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/elisp-def/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/overseer/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/macrostep/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/highlight-quoted/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/csv-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-terminal-cursor-changer/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/xclip/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ns-auto-titlebar/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/osx-trash/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ivy-taskrunner/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/taskrunner/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/pdf-tools/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ivy-pass/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/pass/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/password-store-otp/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/password-store/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/auth-source-pass/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/makefile-executor/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-magit/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/github-review/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/deferred/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ghub/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/treepy/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/magit-todos/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/magit-gitflow/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/magit-popup/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/magit/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/request/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ivy-xref/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/dumb-jump/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/eros/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/quickrun/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/editorconfig/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/dockerfile-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/docker/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/tablist/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/json-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/json-snatcher/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/json-reformat/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/docker-tramp/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/company-ansible/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/yaml-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/jinja2-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ansible-doc/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ansible/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/flycheck-popup-tip/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/popup/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/flycheck/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/vterm/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/bash-completion/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/fish-completion/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/eshell-did-you-mean/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/esh-help/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/eshell-z/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/eshell-up/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/gitignore-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/gitconfig-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/git-timemachine/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/git-commit/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/with-editor/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/async/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/transient/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/browse-at-remote/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/undo-fu-session/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/undo-fu/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/fd-dired/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/dired-rsync/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/diff-hl/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/dired-git-info/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/diredfl/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/doom-snippets/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/auto-yasnippet/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-vimish-fold/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/vimish-fold/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/yasnippet/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-collection/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/annalist/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-quick-diff/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/exato/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-visualstar/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-traces/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-textobj-anyblock/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-snipe/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-numbers/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-nerd-commenter/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-lion/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-indent-plus/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-exchange/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-escape/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-embrace/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-surround/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/embrace/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/expand-region/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-easymotion/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-args/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/mixed-pitch/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/writeroom-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/visual-fill-column/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/persp-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ace-window/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/avy/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/vi-tilde-fringe/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/git-gutter-fringe/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/fringe-helper/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/git-gutter/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/unicode-fonts/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ucs-utils/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/font-utils/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/persistent-soft/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/list-utils/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/pcache/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-goggles/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/neotree/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil-anzu/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/evil/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/goto-chg/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/undo-tree/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/anzu/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/doom-modeline/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/shrink-path/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/highlight-indent-guides/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/hl-todo/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/solaire-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/doom-themes/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/wgrep/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ivy-rich/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/counsel-projectile/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/amx/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/counsel/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ivy-hydra/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/hydra/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/lv/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/swiper/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ivy/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/company-dict/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/company/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/which-key/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/general/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/projectile/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/pkg-info/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/epl/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/ws-butler/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/smartparens/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/pcre2el/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/helpful/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/elisp-refs/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/f/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/s/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/dash-functional/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/dash/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/dtrt-indent/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/better-jumper/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/restart-emacs/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/rainbow-delimiters/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/highlight-numbers/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/parent-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/hide-mode-line/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/all-the-icons/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/memoize/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/explain-pause-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/gcmh/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/auto-minor-mode/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/use-package/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/bind-key/" "/Users/rnrbarbosa/.emacs.d/.local/straight/build/straight/" "/usr/local/Cellar/emacs-plus@27/27.1/share/info/emacs/" "/usr/local/share/info/" "/usr/share/info/"))(defvar doom-real-buffer-functions '(doom-dired-buffer-p) "A list of predicate functions run to determine if a buffer is real, unlike
`doom-unreal-buffer-functions'. They are passed one argument: the buffer to be
tested.

Should any of its function returns non-nil, the rest of the functions are
ignored and the buffer is considered real.

See `doom-real-buffer-p' for more information.")(defvar doom-unreal-buffer-functions '(minibufferp doom-special-buffer-p doom-non-file-visiting-buffer-p) "A list of predicate functions run to determine if a buffer is *not* real,
unlike `doom-real-buffer-functions'. They are passed one argument: the buffer to
be tested.

Should any of these functions return non-nil, the rest of the functions are
ignored and the buffer is considered unreal.

See `doom-real-buffer-p' for more information.")(defvar-local doom-real-buffer-p nil "If non-nil, this buffer should be considered real no matter what. See
`doom-real-buffer-p' for more information.")(defvar doom-fallback-buffer-name "*scratch*" "The name of the buffer to fall back to if no other buffers exist (will create
it if it doesn't exist).")(autoload 'doom-buffer-frame-predicate "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "To be used as the default frame buffer-predicate parameter. Returns nil if
BUF should be skipped over by functions like `next-buffer' and `other-buffer'.

(fn BUF)" nil nil)(autoload 'doom-fallback-buffer "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Returns the fallback buffer, creating it if necessary. By default this is the
scratch buffer. See `doom-fallback-buffer-name' to change this." nil nil)(defalias 'doom-buffer-list #'buffer-list)(autoload 'doom-project-buffer-list "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Return a list of buffers belonging to the specified PROJECT.

If PROJECT is nil, default to the current project.

If no project is active, return all buffers.

(fn &optional PROJECT)" nil nil)(autoload 'doom-open-projects "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Return a list of projects with open buffers." nil nil)(autoload 'doom-dired-buffer-p "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Returns non-nil if BUF is a dired buffer.

(fn BUF)" nil nil)(autoload 'doom-special-buffer-p "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Returns non-nil if BUF's name starts and ends with an *.

(fn BUF)" nil nil)(autoload 'doom-temp-buffer-p "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Returns non-nil if BUF is temporary.

(fn BUF)" nil nil)(autoload 'doom-visible-buffer-p "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Return non-nil if BUF is visible.

(fn BUF)" nil nil)(autoload 'doom-buried-buffer-p "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Return non-nil if BUF is not visible.

(fn BUF)" nil nil)(autoload 'doom-non-file-visiting-buffer-p "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Returns non-nil if BUF does not have a value for `buffer-file-name'.

(fn BUF)" nil nil)(autoload 'doom-real-buffer-list "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Return a list of buffers that satify `doom-real-buffer-p'.

(fn &optional BUFFER-LIST)" nil nil)(autoload 'doom-real-buffer-p "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Returns t if BUFFER-OR-NAME is a 'real' buffer.

A real buffer is a useful buffer; a first class citizen in Doom. Real ones
should get special treatment, because we will be spending most of our time in
them. Unreal ones should be low-profile and easy to cast aside, so we can focus
on real ones.

The exact criteria for a real buffer is:

  1. A non-nil value for the buffer-local value of the `doom-real-buffer-p'
     variable OR
  2. Any function in `doom-real-buffer-functions' returns non-nil OR
  3. None of the functions in `doom-unreal-buffer-functions' must return
     non-nil.

If BUFFER-OR-NAME is omitted or nil, the current buffer is tested.

(fn BUFFER-OR-NAME)" nil nil)(autoload 'doom-unreal-buffer-p "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Return t if BUFFER-OR-NAME is an 'unreal' buffer.

See `doom-real-buffer-p' for details on what that means.

(fn BUFFER-OR-NAME)" nil nil)(autoload 'doom-buffers-in-mode "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Return a list of buffers whose `major-mode' is `eq' to MODE(S).

If DERIVED-P, test with `derived-mode-p', otherwise use `eq'.

(fn MODES &optional BUFFER-LIST DERIVED-P)" nil nil)(autoload 'doom-visible-windows "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Return a list of the visible, non-popup (dedicated) windows.

(fn &optional WINDOW-LIST)" nil nil)(autoload 'doom-visible-buffers "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Return a list of visible buffers (i.e. not buried).

(fn &optional BUFFER-LIST)" nil nil)(autoload 'doom-buried-buffers "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Get a list of buffers that are buried.

(fn &optional BUFFER-LIST)" nil nil)(autoload 'doom-matching-buffers "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Get a list of all buffers that match the regex PATTERN.

(fn PATTERN &optional BUFFER-LIST)" nil nil)(autoload 'doom-set-buffer-real "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Forcibly mark BUFFER as FLAG (non-nil = real).

See `doom-real-buffer-p' for an explanation for real buffers.

(fn BUFFER FLAG)" nil nil)(autoload 'doom-kill-buffer-and-windows "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Kill the buffer and delete all the windows it's displayed in.

(fn BUFFER)" nil nil)(autoload 'doom-fixup-windows "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Ensure that each of WINDOWS is showing a real buffer or the fallback buffer.

(fn WINDOWS)" nil nil)(autoload 'doom-kill-buffer-fixup-windows "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Kill the BUFFER and ensure all the windows it was displayed in have switched
to a real buffer or the fallback buffer.

(fn BUFFER)" nil nil)(autoload 'doom-kill-buffers-fixup-windows "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Kill the BUFFERS and ensure all the windows they were displayed in have
switched to a real buffer or the fallback buffer.

(fn BUFFERS)" nil nil)(autoload 'doom-kill-matching-buffers "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Kill all buffers (in current workspace OR in BUFFER-LIST) that match the
regex PATTERN. Returns the number of killed buffers.

(fn PATTERN &optional BUFFER-LIST)" nil nil)(autoload 'doom-mark-buffer-as-real-h "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Hook function that marks the current buffer as real.

See `doom-real-buffer-p' for an explanation for real buffers." nil nil)(autoload 'doom/save-and-kill-buffer "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Save the current buffer to file, then kill it." t nil)(autoload 'doom/kill-this-buffer-in-all-windows "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Kill BUFFER globally and ensure all windows previously showing this buffer
have switched to a real buffer or the fallback buffer.

If DONT-SAVE, don't prompt to save modified buffers (discarding their changes).

(fn BUFFER &optional DONT-SAVE)" t nil)(autoload 'doom/kill-all-buffers "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Kill all buffers and closes their windows.

If the prefix arg is passed, doesn't close windows and only kill buffers that
belong to the current project.

(fn &optional BUFFER-LIST INTERACTIVE)" t nil)(autoload 'doom/kill-other-buffers "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Kill all other buffers (besides the current one).

If the prefix arg is passed, kill only buffers that belong to the current
project.

(fn &optional BUFFER-LIST INTERACTIVE)" t nil)(autoload 'doom/kill-matching-buffers "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Kill buffers that match PATTERN in BUFFER-LIST.

If the prefix arg is passed, only kill matching buffers in the current project.

(fn PATTERN &optional BUFFER-LIST INTERACTIVE)" t nil)(autoload 'doom/kill-buried-buffers "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Kill buffers that are buried.

If PROJECT-P (universal argument), only kill buried buffers belonging to the
current project.

(fn &optional BUFFER-LIST INTERACTIVE)" t nil)(autoload 'doom/kill-project-buffers "/Users/rnrbarbosa/.emacs.d/core/autoload/buffers" "Kill buffers for the specified PROJECT.

(fn PROJECT &optional INTERACTIVE)" t nil)(defvar doom-reload-hook nil "A list of hooks to run when `doom/reload' is called.")(defvar doom-reloading-p nil "TODO")(autoload 'doom/open-private-config "/Users/rnrbarbosa/.emacs.d/core/autoload/config" "Browse your `doom-private-dir'." t nil)(autoload 'doom/find-file-in-private-config "/Users/rnrbarbosa/.emacs.d/core/autoload/config" "Search for a file in `doom-private-dir'." t nil)(autoload 'doom/goto-private-init-file "/Users/rnrbarbosa/.emacs.d/core/autoload/config" "Open your private init.el file.
And jumps to your `doom!' block." t nil)(autoload 'doom/goto-private-config-file "/Users/rnrbarbosa/.emacs.d/core/autoload/config" "Open your private config.el file." t nil)(autoload 'doom/goto-private-packages-file "/Users/rnrbarbosa/.emacs.d/core/autoload/config" "Open your private packages.el file." t nil)(autoload 'doom/reload "/Users/rnrbarbosa/.emacs.d/core/autoload/config" "Reloads your private config.

This is experimental! It will try to do as `bin/doom sync' does, but from within
this Emacs session. i.e. it reload autoloads files (if necessary), reloads your
package list, and lastly, reloads your private config.el.

Runs `doom-reload-hook' afterwards." t nil)(autoload 'doom/reload-autoloads "/Users/rnrbarbosa/.emacs.d/core/autoload/config" "Reload only `doom-autoloads-file' and `doom-package-autoload-file'.

This is much faster and safer than `doom/reload', but not as comprehensive. This
reloads your package and module visibility, but does not install new packages or
remove orphaned ones. It also doesn't reload your private config.

It is useful to only pull in changes performed by 'doom sync' on the command
line." t nil)(autoload 'doom/reload-env "/Users/rnrbarbosa/.emacs.d/core/autoload/config" "Regenerates and/or reloads your envvar file.

If passed the prefix ARG, clear the envvar file. Uses the same mechanism as
'bin/doom env'.

An envvar file contains a snapshot of your shell environment, which can be
imported into Emacs.

(fn &optional ARG)" t nil)(autoload 'doom/upgrade "/Users/rnrbarbosa/.emacs.d/core/autoload/config" "Run 'doom upgrade' then prompt to restart Emacs." t nil)(defvar doom-debug-variables '(debug-on-error doom-debug-p garbage-collection-messages gcmh-verbose init-file-debug jka-compr-verbose url-debug use-package-verbose) "A list of variable to toggle on `doom-debug-mode'.

Each entry can be a variable symbol or a cons cell whose CAR is the variable
symbol and CDR is the value to set it to when `doom-debug-mode' is activated.")(defvar doom-debug-mode nil "Non-nil if Doom-Debug mode is enabled.
See the `doom-debug-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `doom-debug-mode'.")(autoload 'doom-debug-mode "/Users/rnrbarbosa/.emacs.d/core/autoload/debug" "Toggle `debug-on-error' and `doom-debug-p' for verbose logging.

If called interactively, enable Doom-Debug mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'doom-run-all-startup-hooks-h "/Users/rnrbarbosa/.emacs.d/core/autoload/debug" "Run all startup Emacs hooks. Meant to be executed after starting Emacs with
-q or -Q, for example:

  emacs -Q -l init.el -f doom-run-all-startup-hooks-h" nil nil)(autoload 'doom-info "/Users/rnrbarbosa/.emacs.d/core/autoload/debug" "Returns diagnostic information about the current Emacs session in markdown,
ready to be pasted in a bug report on github." nil nil)(autoload 'doom/version "/Users/rnrbarbosa/.emacs.d/core/autoload/debug" "Display the current version of Doom & Emacs, including the current Doom
branch and commit." t nil)(autoload 'doom/info "/Users/rnrbarbosa/.emacs.d/core/autoload/debug" "Collects some debug information about your Emacs session, formats it into
markdown and copies it to your clipboard, ready to be pasted into bug reports!

(fn &optional RAW)" t nil)(autoload 'doom/am-i-secure "/Users/rnrbarbosa/.emacs.d/core/autoload/debug" "Test to see if your root certificates are securely configured in emacs.
Some items are not supported by the `nsm.el' module." t nil)(function-put 'doom/am-i-secure 'interactive-only 't)(autoload 'doom/sandbox "/Users/rnrbarbosa/.emacs.d/core/autoload/debug" "Open the Emacs Lisp sandbox.

This is a test bed for running Emacs Lisp in another instance of Emacs with
varying amounts of Doom loaded, including:

  a) vanilla Emacs (nothing loaded),
  b) vanilla Doom (only Doom core),
  c) Doom + modules - your private config or
  c) Doom + modules + your private config (a complete Doom session)

This is done without sacrificing access to installed packages. Use the sandbox
to reproduce bugs and determine if Doom is to blame." t nil)(autoload 'doom/report-bug "/Users/rnrbarbosa/.emacs.d/core/autoload/debug" "Open a markdown buffer destinated to populate the New Issue page on Doom
Emacs' issue tracker.

If called when a backtrace buffer is present, it and the output of `doom-info'
will be automatically appended to the result." t nil)(autoload 'doom/toggle-profiler "/Users/rnrbarbosa/.emacs.d/core/autoload/debug" "Toggle the Emacs profiler. Run it again to see the profiling report." t nil)(autoload 'doom-glob "/Users/rnrbarbosa/.emacs.d/core/autoload/files" "Construct a path from SEGMENTS and expand glob patterns.
Returns nil if the path doesn't exist.

(fn &rest SEGMENTS)" nil nil)(autoload 'doom-path "/Users/rnrbarbosa/.emacs.d/core/autoload/files" "Constructs a file path from SEGMENTS.

(fn &rest SEGMENTS)" nil nil)(autoload 'doom-dir "/Users/rnrbarbosa/.emacs.d/core/autoload/files" "Constructs a path from SEGMENTS.
See `doom-path'.

(fn &rest SEGMENTS)" nil nil)(autoload 'doom-files-in "/Users/rnrbarbosa/.emacs.d/core/autoload/files" "Return a list of files/directories in PATHS (one string or a list of them).

FILTER is a function or symbol that takes one argument (the path). If it returns
non-nil, the entry will be excluded.

MAP is a function or symbol which will be used to transform each entry in the
results.

TYPE determines what kind of path will be included in the results. This can be t
(files and folders), 'files or 'dirs.

By default, this function returns paths relative to PATH-OR-PATHS if it is a
single path. If it a list of paths, this function returns absolute paths.
Otherwise, by setting RELATIVE-TO to a path, the results will be transformed to
be relative to it.

The search recurses up to DEPTH and no further. DEPTH is an integer.

MATCH is a string regexp. Only entries that match it will be included.

(fn PATHS &rest REST &key FILTER MAP (FULL t) (FOLLOW-SYMLINKS t) (TYPE \\='files) (RELATIVE-TO (unless full default-directory)) (DEPTH 99999) (MINDEPTH 0) (MATCH \"/[^._][^/]+\"))" nil nil)(autoload 'doom-file-cookie-p "/Users/rnrbarbosa/.emacs.d/core/autoload/files" "Returns the evaluated result of FORM in a ;;;###COOKIE FORM at the top of
FILE.

If COOKIE doesn't exist, return NULL-VALUE.

(fn FILE &optional COOKIE NULL-VALUE)" nil nil)(autoload 'file-exists-p! "/Users/rnrbarbosa/.emacs.d/core/autoload/files" "Returns non-nil if the FILES in DIRECTORY all exist.

DIRECTORY is a path; defaults to `default-directory'.

Returns the last file found to meet the rules set by FILES, which can be a
single file or nested compound statement of `and' and `or' statements.

(fn FILES &optional DIRECTORY)" nil t)(autoload 'doom-file-size "/Users/rnrbarbosa/.emacs.d/core/autoload/files" "Returns the size of FILE (in DIR) in bytes.

(fn FILE &optional DIR)" nil nil)(autoload 'doom-directory-size "/Users/rnrbarbosa/.emacs.d/core/autoload/files" "Returns the size of FILE (in DIR) in kilobytes.

(fn DIR)" nil nil)(autoload 'doom/delete-this-file "/Users/rnrbarbosa/.emacs.d/core/autoload/files" "Delete PATH, kill its buffers and expunge it from vc/magit cache.

If PATH is not specified, default to the current buffer's file.

If FORCE-P, delete without confirmation.

(fn &optional PATH FORCE-P)" t nil)(autoload 'doom/copy-this-file "/Users/rnrbarbosa/.emacs.d/core/autoload/files" "Copy current buffer's file to NEW-PATH.

If FORCE-P, overwrite the destination file if it exists, without confirmation.

(fn NEW-PATH &optional FORCE-P)" t nil)(autoload 'doom/move-this-file "/Users/rnrbarbosa/.emacs.d/core/autoload/files" "Move current buffer's file to NEW-PATH.

If FORCE-P, overwrite the destination file if it exists, without confirmation.

(fn NEW-PATH &optional FORCE-P)" t nil)(autoload 'doom/sudo-find-file "/Users/rnrbarbosa/.emacs.d/core/autoload/files" "Open FILE as root.

(fn FILE)" t nil)(autoload 'doom/sudo-this-file "/Users/rnrbarbosa/.emacs.d/core/autoload/files" "Open the current file as root." t nil)(autoload 'doom/sudo-save-buffer "/Users/rnrbarbosa/.emacs.d/core/autoload/files" "Save this file as root." t nil)(defvar doom-font-increment 2 "How many steps to increase the font size each time `doom/increase-font-size'
or `doom/decrease-font-size' are invoked.")(defvar doom-big-font nil "The font to use for `doom-big-font-mode'. If nil, `doom-font' will be used,
scaled up by `doom-big-font-increment'. See `doom-font' for details on
acceptable values for this variable.")(defvar doom-big-font-increment 4 "How many steps to increase the font size (with `doom-font' as the base) when
`doom-big-font-mode' is enabled and `doom-big-font' is nil.")(autoload 'doom-adjust-font-size "/Users/rnrbarbosa/.emacs.d/core/autoload/fonts" "Increase size of font in FRAME by INCREMENT.
FRAME parameter defaults to current frame.

(fn INCREMENT)" nil nil)(autoload 'doom/reload-font "/Users/rnrbarbosa/.emacs.d/core/autoload/fonts" "Reload your fonts, if they're set.
See `doom-init-fonts-h'." t nil)(autoload 'doom/increase-font-size "/Users/rnrbarbosa/.emacs.d/core/autoload/fonts" "Enlargens the font size across the current and child frames.

(fn COUNT)" t nil)(autoload 'doom/decrease-font-size "/Users/rnrbarbosa/.emacs.d/core/autoload/fonts" "Shrinks the font size across the current and child frames.

(fn COUNT)" t nil)(autoload 'doom/reset-font-size "/Users/rnrbarbosa/.emacs.d/core/autoload/fonts" "Reset font size and `text-scale'.

Assuming it has been adjusted via `doom/increase-font-size' and
`doom/decrease-font-size', or `text-scale-*' commands." t nil)(defvar doom-big-font-mode nil "Non-nil if Doom-Big-Font mode is enabled.
See the `doom-big-font-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `doom-big-font-mode'.")(autoload 'doom-big-font-mode "/Users/rnrbarbosa/.emacs.d/core/autoload/fonts" "A global mode that resizes the font, for streams, screen-sharing and
presentations.

If called interactively, enable Doom-Big-Font mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

This uses `doom/increase-font-size' under the hood, and enlargens the font by
`doom-big-font-increment'.

(fn &optional ARG)" t nil)(autoload 'doom-active-minor-modes "/Users/rnrbarbosa/.emacs.d/core/autoload/help" "Return a list of active minor-mode symbols." nil nil)(defalias 'doom/describe-autodefs #'doom/help-autodefs)(defalias 'doom/describe-module #'doom/help-modules)(defalias 'doom/describe-package #'doom/help-packages)(autoload 'doom/describe-active-minor-mode "/Users/rnrbarbosa/.emacs.d/core/autoload/help" "Get information on an active minor mode. Use `describe-minor-mode' for a
selection of all minor-modes, active or not.

(fn MODE)" t nil)(autoload 'doom-completing-read-org-headings "/Users/rnrbarbosa/.emacs.d/core/autoload/help" "TODO

(fn PROMPT FILES &optional DEPTH INCLUDE-FILES INITIAL-INPUT EXTRA-CANDIDATES)" nil nil)(autoload 'doom/homepage "/Users/rnrbarbosa/.emacs.d/core/autoload/help" "Open the doom emacs homepage in the browser." t nil)(autoload 'doom/help "/Users/rnrbarbosa/.emacs.d/core/autoload/help" "Open Doom's user manual." t nil)(autoload 'doom/help-search-headings "/Users/rnrbarbosa/.emacs.d/core/autoload/help" "Search Doom's documentation and jump to a headline.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'doom/help-search "/Users/rnrbarbosa/.emacs.d/core/autoload/help" "Preform a text search on all of Doom's documentation.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'doom/help-search-news "/Users/rnrbarbosa/.emacs.d/core/autoload/help" "Search headlines in Doom's newsletters.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'doom/help-faq "/Users/rnrbarbosa/.emacs.d/core/autoload/help" "Search Doom's FAQ and jump to a question.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'doom/help-news "/Users/rnrbarbosa/.emacs.d/core/autoload/help" "Open a Doom newsletter.
The latest newsletter will be selected by default." t nil)(autoload 'doom/help-autodefs "/Users/rnrbarbosa/.emacs.d/core/autoload/help" "Open documentation for an autodef.

An autodef is a Doom concept. It is a function or macro that is always defined,
whether or not its containing module is disabled (in which case it will safely
no-op without evaluating its arguments). This syntactic sugar lets you use them
without needing to check if they are available.

(fn AUTODEF)" t nil)(autoload 'doom/help-modules "/Users/rnrbarbosa/.emacs.d/core/autoload/help" "Open the documentation for a Doom module.

CATEGORY is a keyword and MODULE is a symbol. e.g. :editor and 'evil.

If VISIT-DIR is non-nil, visit the module's directory rather than its
documentation.

Automatically selects a) the module at point (in private init files), b) the
module derived from a `featurep!' or `require!' call, c) the module that the
current file is in, or d) the module associated with the current major mode (see
`doom--help-major-mode-module-alist').

(fn CATEGORY MODULE &optional VISIT-DIR)" t nil)(autoload 'doom/help-packages "/Users/rnrbarbosa/.emacs.d/core/autoload/help" "Like `describe-package', but for packages installed by Doom modules.

Only shows installed packages. Includes information about where packages are
defined and configured.

If prefix arg is present, refresh the cache.

(fn PACKAGE)" t nil)(autoload 'doom/help-package-config "/Users/rnrbarbosa/.emacs.d/core/autoload/help" "Jump to any `use-package!', `after!' or ;;;###package block for PACKAGE.

This only searches `doom-emacs-dir' (typically ~/.emacs.d) and does not include
config blocks in your private config.

(fn PACKAGE)" t nil)(defalias 'doom/help-package-homepage #'straight-visit-package-website)(autoload 'doom/help-search-load-path "/Users/rnrbarbosa/.emacs.d/core/autoload/help" "Perform a text search on your `load-path'.
Uses the symbol at point or the current selection, if available.

(fn QUERY)" t nil)(autoload 'doom/help-search-loaded-files "/Users/rnrbarbosa/.emacs.d/core/autoload/help" "Perform a text search on your `load-path'.
Uses the symbol at point or the current selection, if available.

(fn QUERY)" t nil)(autoload 'doom--format "/Users/rnrbarbosa/.emacs.d/core/autoload/output" "

(fn OUTPUT)" nil nil)(autoload 'doom--print "/Users/rnrbarbosa/.emacs.d/core/autoload/output" "

(fn OUTPUT)" nil nil)(autoload 'doom--output-indent "/Users/rnrbarbosa/.emacs.d/core/autoload/output" "Indent TEXT by WIDTH spaces. If ARGS, format TEXT with them.

(fn WIDTH TEXT &optional PREFIX)" nil nil)(autoload 'doom--output-autofill "/Users/rnrbarbosa/.emacs.d/core/autoload/output" "Ensure MSG is split into lines no longer than `fill-column'.

(fn &rest MSGS)" nil nil)(autoload 'doom--output-color "/Users/rnrbarbosa/.emacs.d/core/autoload/output" "Apply STYLE to formatted MESSAGE with ARGS.

STYLE is a symbol that correlates to `doom-output-ansi-alist'.

In a noninteractive session, this wraps the result in ansi color codes.
Otherwise, it maps colors to a term-color-* face.

(fn STYLE FORMAT &rest ARGS)" nil nil)(autoload 'doom--output-class "/Users/rnrbarbosa/.emacs.d/core/autoload/output" "Apply CLASS to formatted format with ARGS.

CLASS is derived from `doom-output-class-alist', and can contain any arbitrary,
transformative logic.

(fn CLASS FORMAT &rest ARGS)" nil nil)(autoload 'doom--output-apply "/Users/rnrbarbosa/.emacs.d/core/autoload/output" "Replace color-name functions with calls to `doom--output-color'.

(fn FORMS &optional SUB)" nil nil)(autoload 'format! "/Users/rnrbarbosa/.emacs.d/core/autoload/output" "An alternative to `format' that understands (color ...) and converts them
into faces or ANSI codes depending on the type of sesssion we're in.

(fn MESSAGE &rest ARGS)" nil t)(autoload 'print-group! "/Users/rnrbarbosa/.emacs.d/core/autoload/output" "Indents any `print!' or `format!' output within BODY.

(fn &rest BODY)" nil t)(autoload 'print! "/Users/rnrbarbosa/.emacs.d/core/autoload/output" "Prints MESSAGE, formatted with ARGS, to stdout.

Returns non-nil if the message is a non-empty string.

Can be colored using (color ...) blocks:

  (print! \"Hello %s\" (bold (blue \"How are you?\")))
  (print! \"Hello %s\" (red \"World\"))
  (print! (green \"Great %s!\") \"success\")

Uses faces in interactive sessions and ANSI codes otherwise.

(fn MESSAGE &rest ARGS)" nil t)(autoload 'insert! "/Users/rnrbarbosa/.emacs.d/core/autoload/output" "Like `insert'; the last argument must be format arguments for MESSAGE.

(fn MESSAGE... ARGS)" nil t)(autoload 'error! "/Users/rnrbarbosa/.emacs.d/core/autoload/output" "Like `error', but with the power of `format!'.

(fn MESSAGE &rest ARGS)" nil t)(autoload 'user-error! "/Users/rnrbarbosa/.emacs.d/core/autoload/output" "Like `user-error', but with the power of `format!'.

(fn MESSAGE &rest ARGS)" nil t)(autoload 'with-output-to! "/Users/rnrbarbosa/.emacs.d/core/autoload/output" "Send all output produced in BODY to DEST.
DEST can be one or more of `standard-output', a buffer, a file

(fn DEST &rest BODY)" nil t)(function-put 'with-output-to! 'lisp-indent-function '1)(autoload 'doom/reload-packages "/Users/rnrbarbosa/.emacs.d/core/autoload/packages" "Reload `doom-packages', `package' and `quelpa'." t nil)(autoload 'doom/bumpify-package-at-point "/Users/rnrbarbosa/.emacs.d/core/autoload/packages" "Convert `package!' call at point to a bump string." t nil)(autoload 'doom/bumpify-packages-in-buffer "/Users/rnrbarbosa/.emacs.d/core/autoload/packages" "Convert all `package!' calls in buffer into bump strings." t nil)(autoload 'doom/bump-package-at-point "/Users/rnrbarbosa/.emacs.d/core/autoload/packages" "Inserts or updates a `:pin' for the `package!' statement at point.
Grabs the latest commit id of the package using 'git'.

(fn &optional SELECT)" t nil)(autoload 'doom/bump-packages-in-buffer "/Users/rnrbarbosa/.emacs.d/core/autoload/packages" "Inserts or updates a `:pin' for the `package!' statement at point.
Grabs the latest commit id of the package using 'git'.

(fn &optional SELECT)" t nil)(autoload 'doom/bump-module "/Users/rnrbarbosa/.emacs.d/core/autoload/packages" "Bump packages in CATEGORY MODULE.
If SELECT (prefix arg) is non-nil, prompt you to choose a specific commit for
each package.

(fn CATEGORY &optional MODULE SELECT)" t nil)(autoload 'doom/bump-package "/Users/rnrbarbosa/.emacs.d/core/autoload/packages" "Bump PACKAGE in all modules that install it.

(fn PACKAGE)" t nil)(autoload 'doom/commit-bumps "/Users/rnrbarbosa/.emacs.d/core/autoload/packages" nil t nil)(autoload 'doplist! "/Users/rnrbarbosa/.emacs.d/core/autoload/plist" "Loop over a PLIST's (property value) pairs then return RETVAL.

Evaluate BODY with either ARGLIST bound to (cons PROP VAL) or, if ARGLIST is a
list, the pair is destructured into (CAR . CDR).

(fn (ARGLIST PLIST &optional RETVAL) &rest BODY)" nil t)(function-put 'doplist! 'lisp-indent-function '1)(autoload 'plist-put! "/Users/rnrbarbosa/.emacs.d/core/autoload/plist" "Set each PROP VALUE pair in REST to PLIST in-place.

(fn PLIST &rest REST)" nil t)(autoload 'plist-delete! "/Users/rnrbarbosa/.emacs.d/core/autoload/plist" "Delete PROP from PLIST in-place.

(fn PLIST PROP)" nil t)(autoload 'doom-plist-get "/Users/rnrbarbosa/.emacs.d/core/autoload/plist" "Return PROP in PLIST, if it exists. Otherwise NIL-VALUE.

(fn PLIST PROP &optional NIL-VALUE)" nil nil)(autoload 'doom-plist-merge "/Users/rnrbarbosa/.emacs.d/core/autoload/plist" "Non-destructively merge FROM-PLIST onto TO-PLIST

(fn FROM-PLIST TO-PLIST)" nil nil)(autoload 'doom-plist-delete-nil "/Users/rnrbarbosa/.emacs.d/core/autoload/plist" "Delete `nil' properties from a copy of PLIST.

(fn PLIST)" nil nil)(autoload 'doom-plist-delete "/Users/rnrbarbosa/.emacs.d/core/autoload/plist" "Delete PROPS from a copy of PLIST.

(fn PLIST &rest PROPS)" nil nil)(autoload 'doom-call-process "/Users/rnrbarbosa/.emacs.d/core/autoload/process" "Execute COMMAND with ARGS synchronously.

Returns (STATUS . OUTPUT) when it is done, where STATUS is the returned error
code of the process and OUTPUT is its stdout output.

(fn COMMAND &rest ARGS)" nil nil)(autoload 'doom-exec-process "/Users/rnrbarbosa/.emacs.d/core/autoload/process" "Execute COMMAND with ARGS synchronously.

Unlike `doom-call-process', this pipes output to `standard-output' on the fly to
simulate 'exec' in the shell, so batch scripts could run external programs
synchronously without sacrificing their output.

Warning: freezes indefinitely on any stdin prompt.

(fn COMMAND &rest ARGS)" nil nil)(autoload 'projectile-relevant-known-projects "~/.emacs.d/.local/straight/build/projectile/projectile")(autoload 'project-file-exists-p! "/Users/rnrbarbosa/.emacs.d/core/autoload/projects" "Checks if the project has the specified FILES.
Paths are relative to the project root, unless they start with ./ or ../ (in
which case they're relative to `default-directory'). If they start with a slash,
they are absolute.

(fn FILES)" nil t)(autoload 'doom/find-file-in-other-project "/Users/rnrbarbosa/.emacs.d/core/autoload/projects" "Preforms `projectile-find-file' in a known project of your choosing.

(fn PROJECT-ROOT)" t nil)(autoload 'doom/browse-in-other-project "/Users/rnrbarbosa/.emacs.d/core/autoload/projects" "Preforms `find-file' in a known project of your choosing.

(fn PROJECT-ROOT)" t nil)(autoload 'doom-project-p "/Users/rnrbarbosa/.emacs.d/core/autoload/projects" "Return t if DIR (defaults to `default-directory') is a valid project.

(fn &optional DIR)" nil nil)(autoload 'doom-project-root "/Users/rnrbarbosa/.emacs.d/core/autoload/projects" "Return the project root of DIR (defaults to `default-directory').
Returns nil if not in a project.

(fn &optional DIR)" nil nil)(autoload 'doom-project-name "/Users/rnrbarbosa/.emacs.d/core/autoload/projects" "Return the name of the current project.

Returns '-' if not in a valid project.

(fn &optional DIR)" nil nil)(autoload 'doom-project-expand "/Users/rnrbarbosa/.emacs.d/core/autoload/projects" "Expand NAME to project root.

(fn NAME &optional DIR)" nil nil)(autoload 'doom-project-find-file "/Users/rnrbarbosa/.emacs.d/core/autoload/projects" "Jump to a file in DIR (searched recursively).

If DIR is not a project, it will be indexed (but not cached).

(fn DIR)" nil nil)(autoload 'doom-project-browse "/Users/rnrbarbosa/.emacs.d/core/autoload/projects" "Traverse a file structure starting linearly from DIR.

(fn DIR)" nil nil)(progn (autoload 'set-project-type! "/Users/rnrbarbosa/.emacs.d/core/autoload/projects.el" "Add a project type to `projectile-project-type'.

(fn NAME &key PREDICATE COMPILE RUN TEST CONFIGURE DIR)" nil nil) (function-put 'set-project-type! 'lisp-indent-function '1))(put 'set-project-type! 'doom-module '(:core . projects))(autoload 'doom-scratch-buffer "/Users/rnrbarbosa/.emacs.d/core/autoload/scratch" "Return a scratchpad buffer in major MODE.

(fn &optional DONT-RESTORE-P MODE DIRECTORY PROJECT-NAME)" nil nil)(autoload 'doom-persist-scratch-buffer-h "/Users/rnrbarbosa/.emacs.d/core/autoload/scratch" "Save the current buffer to `doom-scratch-dir'." nil nil)(autoload 'doom-persist-scratch-buffers-h "/Users/rnrbarbosa/.emacs.d/core/autoload/scratch" "Save all scratch buffers to `doom-scratch-dir'." nil nil)(autoload 'doom-persist-scratch-buffers-after-switch-h "/Users/rnrbarbosa/.emacs.d/core/autoload/scratch" "Kill scratch buffers when they are no longer visible, saving them to disk." nil nil)(when doom-interactive-p (add-hook 'kill-emacs-hook #'doom-persist-scratch-buffers-h))(autoload 'doom/open-scratch-buffer "/Users/rnrbarbosa/.emacs.d/core/autoload/scratch" "Pop up a persistent scratch buffer.

If passed the prefix ARG, do not restore the last scratch buffer.
If PROJECT-P is non-nil, open a persistent scratch buffer associated with the
  current project.

(fn &optional ARG PROJECT-P SAME-WINDOW-P)" t nil)(autoload 'doom/switch-to-scratch-buffer "/Users/rnrbarbosa/.emacs.d/core/autoload/scratch" "Like `doom/open-scratch-buffer', but switches to it in the current window.

If passed the prefix ARG, do not restore the last scratch buffer.

(fn &optional ARG PROJECT-P)" t nil)(autoload 'doom/open-project-scratch-buffer "/Users/rnrbarbosa/.emacs.d/core/autoload/scratch" "Opens the (persistent) project scratch buffer in a popup.

If passed the prefix ARG, do not restore the last scratch buffer.

(fn &optional ARG SAME-WINDOW-P)" t nil)(autoload 'doom/switch-to-project-scratch-buffer "/Users/rnrbarbosa/.emacs.d/core/autoload/scratch" "Like `doom/open-project-scratch-buffer', but switches to it in the current
window.

If passed the prefix ARG, do not restore the last scratch buffer.

(fn &optional ARG)" t nil)(autoload 'doom/revert-scratch-buffer "/Users/rnrbarbosa/.emacs.d/core/autoload/scratch" "Revert scratch buffer to last persistent state." t nil)(autoload 'doom/delete-persistent-scratch-file "/Users/rnrbarbosa/.emacs.d/core/autoload/scratch" "Deletes a scratch buffer file in `doom-scratch-dir'.

If prefix ARG, delete all persistent scratches.

(fn &optional ARG)" t nil)(autoload 'doom-session-file "/Users/rnrbarbosa/.emacs.d/core/autoload/sessions" "TODO

(fn &optional NAME)" nil nil)(autoload 'doom-save-session "/Users/rnrbarbosa/.emacs.d/core/autoload/sessions" "TODO

(fn &optional FILE)" nil nil)(autoload 'doom-load-session "/Users/rnrbarbosa/.emacs.d/core/autoload/sessions" "TODO

(fn &optional FILE)" nil nil)(autoload 'doom-restore-session-handler "/Users/rnrbarbosa/.emacs.d/core/autoload/sessions" "TODO

(fn &rest _)" nil nil)(add-to-list 'command-switch-alist (cons "--restore" #'doom-restore-session-handler))(autoload 'doom/quickload-session "/Users/rnrbarbosa/.emacs.d/core/autoload/sessions" "TODO" t nil)(autoload 'doom/quicksave-session "/Users/rnrbarbosa/.emacs.d/core/autoload/sessions" "TODO" t nil)(autoload 'doom/load-session "/Users/rnrbarbosa/.emacs.d/core/autoload/sessions" "TODO

(fn FILE)" t nil)(autoload 'doom/save-session "/Users/rnrbarbosa/.emacs.d/core/autoload/sessions" "TODO

(fn FILE)" t nil)(defalias 'doom/restart #'restart-emacs)(autoload 'doom/restart-and-restore "/Users/rnrbarbosa/.emacs.d/core/autoload/sessions" "TODO

(fn &optional DEBUG)" t nil)(autoload 'doom-store-persist "/Users/rnrbarbosa/.emacs.d/core/autoload/store" "Persist VARIABLES (list of symbols) in LOCATION (symbol).
This populates these variables with cached values, if one exists, and saves them
to file when Emacs quits. This cannot persist buffer-local variables.

(fn LOCATION VARIABLES)" nil nil)(autoload 'doom-store-desist "/Users/rnrbarbosa/.emacs.d/core/autoload/store" "Unregisters VARIABLES (list of symbols) in LOCATION (symbol).
Variables to persist are recorded in `doom-store-persist-alist'. Does not affect
the actual variables themselves or their values.

(fn LOCATION &optional VARIABLES)" nil nil)(autoload 'doom-store-get "/Users/rnrbarbosa/.emacs.d/core/autoload/store" "Retrieve KEY from LOCATION (defaults to `doom-store-location').
If it doesn't exist or has expired, DEFAULT_VALUE is returned.

(fn KEY &optional LOCATION DEFAULT-VALUE)" nil nil)(autoload 'doom-store-put "/Users/rnrbarbosa/.emacs.d/core/autoload/store" "Set KEY to VALUE in the store at LOCATION.
KEY can be any lisp object that is comparable with `equal'. TTL is the time (in
seconds) until this cache entry expires. LOCATION is the super-key to store this
cache item under. It defaults to `doom-store-location'.

(fn KEY VALUE &optional TTL LOCATION)" nil nil)(autoload 'doom-store-rem "/Users/rnrbarbosa/.emacs.d/core/autoload/store" "Clear a cache LOCATION (defaults to `doom-store-location').

(fn KEY &optional LOCATION)" nil nil)(autoload 'doom-store-member-p "/Users/rnrbarbosa/.emacs.d/core/autoload/store" "Return t if KEY in LOCATION exists.
LOCATION defaults to `doom-store-location'.

(fn KEY &optional LOCATION)" nil nil)(autoload 'doom-store-clear "/Users/rnrbarbosa/.emacs.d/core/autoload/store" "Clear the store at LOCATION (defaults to `doom-store-location').

(fn &optional LOCATION)" nil nil)(autoload 'doom-surrounded-p "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Returns t if point is surrounded by a brace delimiter: {[(

If INLINE is non-nil, only returns t if braces are on the same line, and
whitespace is balanced on either side of the cursor.

If INLINE is nil, returns t if the opening and closing braces are on adjacent
lines, above and below, with only whitespace in between.

(fn PAIR &optional INLINE BALANCED)" nil nil)(autoload 'doom-point-in-comment-p "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Return non-nil if POS is in a comment.
POS defaults to the current position.

(fn &optional POS)" nil nil)(autoload 'doom-point-in-string-p "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Return non-nil if POS is in a string.

(fn &optional POS)" nil nil)(autoload 'doom-point-in-string-or-comment-p "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Return non-nil if POS is in a string or comment.

(fn &optional POS)" nil nil)(autoload 'doom-region-active-p "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Return non-nil if selection is active.
Detects evil visual mode as well." nil nil)(function-put 'doom-region-active-p 'side-effect-free 't)(autoload 'doom-region-beginning "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Return beginning position of selection.
Uses `evil-visual-beginning' if available." nil nil)(function-put 'doom-region-beginning 'side-effect-free 't)(autoload 'doom-region-end "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Return end position of selection.
Uses `evil-visual-end' if available." nil nil)(function-put 'doom-region-end 'side-effect-free 't)(autoload 'doom-thing-at-point-or-region "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Grab the current selection, THING at point, or xref identifier at point.

Returns THING if it is a string. Otherwise, if nothing is found at point and
PROMPT is non-nil, prompt for a string (if PROMPT is a string it'll be used as
the prompting string). Returns nil if all else fails.

NOTE: Don't use THING for grabbing symbol-at-point. The xref fallback is smarter
in some cases.

(fn &optional THING PROMPT)" nil nil)(function-put 'doom-thing-at-point-or-region 'side-effect-free 't)(autoload 'doom/backward-to-bol-or-indent "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Jump between the indentation column (first non-whitespace character) and the
beginning of the line. The opposite of
`doom/forward-to-last-non-comment-or-eol'.

(fn &optional POINT)" t nil)(autoload 'doom/forward-to-last-non-comment-or-eol "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Jumps between the last non-blank, non-comment character in the line and the
true end of the line. The opposite of `doom/backward-to-bol-or-indent'.

(fn &optional POINT)" t nil)(autoload 'doom/backward-kill-to-bol-and-indent "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Kill line to the first non-blank character. If invoked again afterwards, kill
line to beginning of line. Same as `evil-delete-back-to-indentation'." t nil)(autoload 'doom/delete-backward-word "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Like `backward-kill-word', but doesn't affect the kill-ring.

(fn ARG)" t nil)(autoload 'doom/dumb-indent "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Inserts a tab character (or spaces x tab-width)." t nil)(autoload 'doom/dumb-dedent "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Dedents the current line." t nil)(autoload 'doom/retab "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Converts tabs-to-spaces or spaces-to-tabs within BEG and END (defaults to
buffer start and end, to make indentation consistent. Which it does depends on
the value of `indent-tab-mode'.

If ARG (universal argument) is non-nil, retab the current buffer using the
opposite indentation style.

(fn ARG &optional BEG END)" t nil)(autoload 'doom/delete-trailing-newlines "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Trim trailing newlines.

Respects `require-final-newline'." t nil)(autoload 'doom/dos2unix "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Convert the current buffer to a Unix file encoding." t nil)(autoload 'doom/unix2dos "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Convert the current buffer to a DOS file encoding." t nil)(autoload 'doom/toggle-indent-style "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Switch between tabs and spaces indentation style in the current buffer." t nil)(autoload 'doom/set-indent-width "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Change the indentation size to WIDTH of the current buffer.

The effectiveness of this command is significantly improved if you have
editorconfig or dtrt-indent installed.

(fn WIDTH)" t nil)(autoload 'doom-enable-delete-trailing-whitespace-h "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Enables the automatic deletion of trailing whitespaces upon file save.

i.e. enables `ws-butler-mode' in the current buffer." nil nil)(autoload 'doom-disable-delete-trailing-whitespace-h "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Disables the automatic deletion of trailing whitespaces upon file save.

i.e. disables `ws-butler-mode' in the current buffer." nil nil)(autoload 'doom-enable-show-trailing-whitespace-h "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Enable `show-trailing-whitespace' in the current buffer." nil nil)(autoload 'doom-disable-show-trailing-whitespace-h "/Users/rnrbarbosa/.emacs.d/core/autoload/text" "Disable `show-trailing-whitespace' in the current buffer." nil nil)(defconst doom-customize-theme-hook nil)(autoload 'custom-theme-set-faces! "/Users/rnrbarbosa/.emacs.d/core/autoload/themes" "Apply a list of face SPECS as user customizations for THEME.

THEME can be a single symbol or list thereof. If nil, apply these settings to
all themes. It will apply to all themes once they are loaded.

(fn THEME &rest SPECS)" nil t)(function-put 'custom-theme-set-faces! 'lisp-indent-function 'defun)(autoload 'custom-set-faces! "/Users/rnrbarbosa/.emacs.d/core/autoload/themes" "Apply a list of face SPECS as user customizations.

This is a convenience macro alternative to `custom-set-face' which allows for a
simplified face format, and takes care of load order issues, so you can use
doom-themes' API without worry.

(fn &rest SPECS)" nil t)(function-put 'custom-set-faces! 'lisp-indent-function 'defun)(autoload 'doom/reload-theme "/Users/rnrbarbosa/.emacs.d/core/autoload/themes" "Reload the current color theme." t nil)(autoload 'doom-resize-window "/Users/rnrbarbosa/.emacs.d/core/autoload/ui" "Resize a window to NEW-SIZE. If HORIZONTAL, do it width-wise.
If FORCE-P is omitted when `window-size-fixed' is non-nil, resizing will fail.

(fn WINDOW NEW-SIZE &optional HORIZONTAL FORCE-P)" nil nil)(autoload 'doom-quit-p "/Users/rnrbarbosa/.emacs.d/core/autoload/ui" "Prompt the user for confirmation when killing Emacs.

Returns t if it is safe to kill this session. Does not prompt if no real buffers
are open.

(fn &optional PROMPT)" nil nil)(autoload 'doom-recenter-a "/Users/rnrbarbosa/.emacs.d/core/autoload/ui" "Generic advice for recentering window (typically :after other functions).

(fn &rest _)" nil nil)(autoload 'doom-preserve-window-position-a "/Users/rnrbarbosa/.emacs.d/core/autoload/ui" "Generic advice for preserving cursor position on screen after scrolling.

(fn ORIG-FN &rest ARGS)" nil nil)(autoload 'doom-shut-up-a "/Users/rnrbarbosa/.emacs.d/core/autoload/ui" "Generic advisor for silencing noisy functions.

In interactive Emacs, this just inhibits messages from appearing in the
minibuffer. They are still logged to *Messages*.

In tty Emacs, messages suppressed completely.

(fn ORIG-FN &rest ARGS)" nil nil)(autoload 'doom-apply-ansi-color-to-compilation-buffer-h "/Users/rnrbarbosa/.emacs.d/core/autoload/ui" "Applies ansi codes to the compilation buffers. Meant for
`compilation-filter-hook'." nil nil)(autoload 'doom-disable-show-paren-mode-h "/Users/rnrbarbosa/.emacs.d/core/autoload/ui" "Turn off `show-paren-mode' buffer-locally." nil nil)(autoload 'doom-enable-line-numbers-h "/Users/rnrbarbosa/.emacs.d/core/autoload/ui" nil nil nil)(autoload 'doom-disable-line-numbers-h "/Users/rnrbarbosa/.emacs.d/core/autoload/ui" nil nil nil)(autoload 'doom/toggle-line-numbers "/Users/rnrbarbosa/.emacs.d/core/autoload/ui" "Toggle line numbers.

Cycles through regular, relative and no line numbers. The order depends on what
`display-line-numbers-type' is set to. If you're using Emacs 26+, and
visual-line-mode is on, this skips relative and uses visual instead.

See `display-line-numbers' for what these values mean." t nil)(autoload 'doom/delete-frame-with-prompt "/Users/rnrbarbosa/.emacs.d/core/autoload/ui" "Delete the current frame, but ask for confirmation if it isn't empty." t nil)(autoload 'doom/window-maximize-buffer "/Users/rnrbarbosa/.emacs.d/core/autoload/ui" "Close other windows to focus on this one.

Activate again to undo this. If prefix ARG is non-nil, don't restore the last
window configuration and re-maximize the current window. Alternatively, use
`doom/window-enlargen'.

(fn &optional ARG)" t nil)(autoload 'doom/window-enlargen "/Users/rnrbarbosa/.emacs.d/core/autoload/ui" "Enlargen the current window to focus on this one. Does not close other
windows (unlike `doom/window-maximize-buffer'). Activate again to undo.

(fn &optional ARG)" t nil)(autoload 'doom/window-maximize-horizontally "/Users/rnrbarbosa/.emacs.d/core/autoload/ui" "Delete all windows to the left and right of the current window." t nil)(autoload 'doom/window-maximize-vertically "/Users/rnrbarbosa/.emacs.d/core/autoload/ui" "Delete all windows above and below the current window." t nil)(autoload 'doom/set-frame-opacity "/Users/rnrbarbosa/.emacs.d/core/autoload/ui" "Interactively change the current frame's opacity.

OPACITY is an integer between 0 to 100, inclusive.

(fn OPACITY)" t nil)(autoload 'doom/narrow-buffer-indirectly "/Users/rnrbarbosa/.emacs.d/core/autoload/ui" "Restrict editing in this buffer to the current region, indirectly.

This recursively creates indirect clones of the current buffer so that the
narrowing doesn't affect other windows displaying the same buffer. Call
`doom/widen-indirectly-narrowed-buffer' to undo it (incrementally).

Inspired from http://demonastery.org/2013/04/emacs-evil-narrow-region/

(fn BEG END)" t nil)(autoload 'doom/widen-indirectly-narrowed-buffer "/Users/rnrbarbosa/.emacs.d/core/autoload/ui" "Widens narrowed buffers.

This command will incrementally kill indirect buffers (under the assumption they
were created by `doom/narrow-buffer-indirectly') and switch to their base
buffer.

If ARG, then kill all indirect buffers, return the base buffer and widen it.

If the current buffer is not an indirect buffer, it is `widen'ed.

(fn &optional ARG)" t nil)(autoload 'doom/toggle-narrow-buffer "/Users/rnrbarbosa/.emacs.d/core/autoload/ui" "Narrow the buffer to BEG END. If narrowed, widen it.

(fn BEG END)" t nil)(defmacro set-irc-server! (server plist) "THIS FUNCTION DOES NOTHING BECAUSE (:app . irc) IS DISABLED

Registers an irc SERVER for circe.

SERVER can either be a name for the network (in which case you must specify a
:host), or it may be the hostname itself, in which case it will be used as the
:host.

See `circe-network-options' for details." (ignore server plist))(put 'set-irc-server! 'doom-module '(:app . irc))(put 'flyspell-mode! 'doom-module '(:checkers . spell))(defalias 'flyspell-mode! #'ignore "THIS FUNCTION DOES NOTHING BECAUSE (:checkers . spell) IS DISABLED

nil")(defmacro set-flyspell-predicate! (modes predicate) "THIS FUNCTION DOES NOTHING BECAUSE (:checkers . spell) IS DISABLED

TODO" (ignore modes predicate))(put 'set-flyspell-predicate! 'doom-module '(:checkers . spell))(autoload '+syntax-init-popups-h "/Users/rnrbarbosa/.emacs.d/modules/checkers/syntax/autoload" "Activate `flycheck-posframe-mode' if available and in GUI Emacs.
Activate `flycheck-popup-tip-mode' otherwise.
Do nothing if `lsp-ui-mode' is active and `lsp-ui-sideline-enable' is non-nil." nil nil)(autoload 'set-next-checker! "/Users/rnrbarbosa/.emacs.d/modules/checkers/syntax/autoload.el" "TODO

(fn MODE CHECKER NEXT &optional APPEND)" nil nil)(put 'set-next-checker! 'doom-module '(:checkers . syntax))(defvar +company-backend-alist '((text-mode company-dabbrev company-yasnippet company-ispell) (prog-mode company-capf company-yasnippet) (conf-mode company-capf company-dabbrev-code company-yasnippet)) "An alist matching modes to company backends. The backends for any mode is
built from this.")(autoload '+company-init-backends-h "/Users/rnrbarbosa/.emacs.d/modules/completion/company/autoload" "Set `company-backends' for the current buffer." nil nil)(autoload '+company-has-completion-p "/Users/rnrbarbosa/.emacs.d/modules/completion/company/autoload" "Return non-nil if a completion candidate exists at point." nil nil)(autoload '+company/toggle-auto-completion "/Users/rnrbarbosa/.emacs.d/modules/completion/company/autoload" "Toggle as-you-type code completion." t nil)(autoload '+company/complete "/Users/rnrbarbosa/.emacs.d/modules/completion/company/autoload" "Bring up the completion popup. If only one result, complete it." t nil)(autoload '+company/dabbrev "/Users/rnrbarbosa/.emacs.d/modules/completion/company/autoload" "Invokes `company-dabbrev-code' in prog-mode buffers and `company-dabbrev'
everywhere else." t nil)(autoload '+company/whole-lines "/Users/rnrbarbosa/.emacs.d/modules/completion/company/autoload" "`company-mode' completion backend that completes whole-lines, akin to vim's
C-x C-l.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload '+company/dict-or-keywords "/Users/rnrbarbosa/.emacs.d/modules/completion/company/autoload" "`company-mode' completion combining `company-dict' and `company-keywords'." t nil)(autoload '+company/dabbrev-code-previous "/Users/rnrbarbosa/.emacs.d/modules/completion/company/autoload" "TODO" t nil)(progn (autoload 'set-company-backend! "/Users/rnrbarbosa/.emacs.d/modules/completion/company/autoload.el" "Prepends BACKENDS (in order) to `company-backends' in MODES.

MODES should be one symbol or a list of them, representing major or minor modes.
This will overwrite backends for MODES on consecutive uses.

If the car of BACKENDS is nil, unset the backends for MODES.

Examples:

  (set-company-backend! 'js2-mode
    'company-tide 'company-yasnippet)

  (set-company-backend! 'sh-mode
    '(company-shell :with company-yasnippet))

  (set-company-backend! '(c-mode c++-mode)
    '(:separate company-irony-c-headers company-irony))

  (set-company-backend! 'sh-mode nil)  ; unsets backends for sh-mode

(fn MODES &rest BACKENDS)" nil nil) (function-put 'set-company-backend! 'lisp-indent-function 'defun))(put 'set-company-backend! 'doom-module '(:completion . company))(autoload '+ivy:project-search "~/.emacs.d/modules/completion/ivy/autoload/evil" nil t)(autoload '+ivy:project-search-from-cwd "~/.emacs.d/modules/completion/ivy/autoload/evil" nil t)(autoload 'hydra-ivy/body "~/.emacs.d/modules/completion/ivy/autoload/hydras" nil nil)(autoload '+ivy-rich-buffer-name "/Users/rnrbarbosa/.emacs.d/modules/completion/ivy/autoload/ivy" "Display the buffer name.

Buffers that are considered unreal (see `doom-real-buffer-p') are dimmed with
`+ivy-buffer-unreal-face'.

(fn CANDIDATE)" nil nil)(autoload '+ivy-rich-buffer-icon "/Users/rnrbarbosa/.emacs.d/modules/completion/ivy/autoload/ivy" "Display the icon for CANDIDATE buffer.

(fn CANDIDATE)" nil nil)(autoload '+ivy-rich-describe-variable-transformer "/Users/rnrbarbosa/.emacs.d/modules/completion/ivy/autoload/ivy" "Previews the value of the variable in the minibuffer

(fn CAND)" nil nil)(autoload '+ivy-format-function-line-or-arrow "/Users/rnrbarbosa/.emacs.d/modules/completion/ivy/autoload/ivy" "Transform CANDS into a string for minibuffer.

If in terminal, prefix candidates with a chevron to make it more obvious which
one you're selecting, especially in themes that can't set a good background for
`ivy-current-match'. This is a combination of `ivy-format-function-line' and
`ivy-format-function-arrow'.

In the GUI, this is the same as `ivy-format-function-line'.

(fn CANDS)" nil nil)(autoload '+ivy/switch-workspace-buffer "/Users/rnrbarbosa/.emacs.d/modules/completion/ivy/autoload/ivy" "Switch to another buffer within the current workspace.

If ARG (universal argument), open selection in other-window.

(fn &optional ARG)" t nil)(autoload '+ivy/switch-workspace-buffer-other-window "/Users/rnrbarbosa/.emacs.d/modules/completion/ivy/autoload/ivy" "Switch another window to a buffer within the current workspace." t nil)(autoload '+ivy/switch-buffer "/Users/rnrbarbosa/.emacs.d/modules/completion/ivy/autoload/ivy" "Switch to another buffer." t nil)(autoload '+ivy/switch-buffer-other-window "/Users/rnrbarbosa/.emacs.d/modules/completion/ivy/autoload/ivy" "Switch to another buffer in another window." t nil)(autoload '+ivy/woccur "/Users/rnrbarbosa/.emacs.d/modules/completion/ivy/autoload/ivy" "Invoke a wgrep buffer on the current ivy results, if supported." t nil)(autoload '+ivy-yas-prompt-fn "/Users/rnrbarbosa/.emacs.d/modules/completion/ivy/autoload/ivy" "

(fn PROMPT CHOICES &optional DISPLAY-FN)" nil nil)(autoload '+ivy-git-grep-other-window-action "/Users/rnrbarbosa/.emacs.d/modules/completion/ivy/autoload/ivy" "Opens the current candidate in another window.

(fn X)" nil nil)(autoload '+ivy-confirm-delete-file "/Users/rnrbarbosa/.emacs.d/modules/completion/ivy/autoload/ivy" "

(fn X)" nil nil)(autoload '+ivy/projectile-find-file "/Users/rnrbarbosa/.emacs.d/modules/completion/ivy/autoload/ivy" "A more sensible `counsel-projectile-find-file', which will revert to
`counsel-find-file' if invoked from $HOME or /, `counsel-file-jump' if invoked
from a non-project, `projectile-find-file' if in a big project (more than
`ivy-sort-max-size' files), or `counsel-projectile-find-file' otherwise.

The point of this is to avoid Emacs locking up indexing massive file trees." t nil)(autoload '+ivy-file-search "/Users/rnrbarbosa/.emacs.d/modules/completion/ivy/autoload/ivy" "Conduct a file search using ripgrep.

:query STRING
  Determines the initial input to search for.
:in PATH
  Sets what directory to base the search out of. Defaults to the current
  project's root.
:recursive BOOL
  Whether or not to search files recursively from the base directory.

(fn &key QUERY IN ALL-FILES (RECURSIVE t) PROMPT ARGS)" nil nil)(function-put '+ivy-file-search 'lisp-indent-function 'defun)(autoload '+ivy/project-search "/Users/rnrbarbosa/.emacs.d/modules/completion/ivy/autoload/ivy" "Performs a live project search from the project root using ripgrep.

If ARG (universal argument), include all files, even hidden or compressed ones,
in the search.

(fn &optional ARG INITIAL-QUERY DIRECTORY)" t nil)(autoload '+ivy/project-search-from-cwd "/Users/rnrbarbosa/.emacs.d/modules/completion/ivy/autoload/ivy" "Performs a project search recursively from the current directory.

If ARG (universal argument), include all files, even hidden or compressed ones.

(fn &optional ARG INITIAL-QUERY)" t nil)(autoload '+ivy/compile "/Users/rnrbarbosa/.emacs.d/modules/completion/ivy/autoload/ivy" "Execute a compile command from the current buffer's directory." t nil)(autoload '+ivy/project-compile "/Users/rnrbarbosa/.emacs.d/modules/completion/ivy/autoload/ivy" "Execute a compile command from the current project's root." t nil)(autoload '+ivy/jump-list "/Users/rnrbarbosa/.emacs.d/modules/completion/ivy/autoload/ivy" "Go to an entry in evil's (or better-jumper's) jumplist." t nil)(autoload '+ivy/git-grep-other-window-action "/Users/rnrbarbosa/.emacs.d/modules/completion/ivy/autoload/ivy" "Open the current counsel-{ag,rg,git-grep} candidate in other-window." t nil)(autoload '+default/compile "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/default" "Runs `compile' from the root of the current project.

If a compilation window is already open, recompile that instead.

If ARG (universal argument), runs `compile' from the current directory.

(fn ARG)" t nil)(autoload '+default/man-or-woman "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/default" "Invoke `man' if man is installed, otherwise use `woman'." t nil)(autoload '+default/new-buffer "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/default" "TODO" t nil)(autoload '+default/restart-server "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/default" "Restart the Emacs server." t nil)(autoload '+default/lsp-command-map "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/deferred" "Lazily invoke `lsp-command-map'." t nil)(autoload '+default/browse-project "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/files" "Browse files from the current project's root." t nil)(autoload '+default/browse-templates "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/files" "Browse files from `+file-templates-dir'." t nil)(autoload '+default/find-in-templates "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/files" "Find a file under `+file-templates-dir', recursively." t nil)(autoload '+default/browse-emacsd "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/files" "Browse files from `doom-emacs-dir'." t nil)(autoload '+default/find-in-emacsd "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/files" "Find a file under `doom-emacs-dir', recursively." t nil)(autoload '+default/browse-notes "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/files" "Browse files from `org-directory'." t nil)(autoload '+default/find-in-notes "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/files" "Find a file under `org-directory', recursively." t nil)(autoload '+default/find-file-under-here "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/files" "Perform a recursive file search from the current directory." t nil)(autoload '+default/discover-projects "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/files" "Discover projects in `projectile-project-search-path'.
If prefix ARG is non-nil, prompt for the search path.

(fn ARG)" t nil)(autoload '+default/dired "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/files" "Open a directory in dired.
If prefix ARG is non-nil, prompt for a known project to open in dired.

(fn ARG)" t nil)(autoload '+default/search-cwd "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/search" "Conduct a text search in files under the current folder.
If prefix ARG is set, prompt for a directory to search from.

(fn &optional ARG)" t nil)(autoload '+default/search-other-cwd "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/search" "Conduct a text search in another directory." t nil)(autoload '+default/search-buffer "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/search" "Conduct a text search on the current buffer.
If a selection is active, pre-fill the prompt with it." t nil)(autoload '+default/search-project "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/search" "Conduct a text search in the current project root.
If prefix ARG is set, prompt for a known project to search from.

(fn &optional ARG)" t nil)(autoload '+default/search-other-project "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/search" "Conduct a text search in a known project." t nil)(autoload '+default/search-project-for-symbol-at-point "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/search" "Search current project for symbol at point.
If prefix ARG is set, prompt for a known project to search from.

(fn &optional SYMBOL ARG)" t nil)(autoload '+default/search-notes-for-symbol-at-point "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/search" "Conduct a text search in the current project for symbol at point. If prefix
ARG is set, prompt for a known project to search from.

(fn &optional SYMBOL)" t nil)(autoload '+default/org-notes-search "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/search" "Perform a text search on `org-directory'." t nil)(autoload '+default/org-notes-headlines "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/search" "Jump to an Org headline in `org-agenda-files'." t nil)(defalias '+default/newline #'electric-indent-just-newline)(autoload '+default/newline-above "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/text" "Insert an indented new line before the current one." t nil)(autoload '+default/newline-below "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/text" "Insert an indented new line after the current one." t nil)(autoload '+default/yank-pop "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/text" "Interactively select what text to insert from the kill ring." t nil)(autoload '+default/yank-buffer-filename "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/text" "Copy the current buffer's path to the kill ring." t nil)(autoload '+default/insert-file-path "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/text" "Insert the file name (absolute path if prefix ARG).
If `buffer-file-name' isn't set, uses `default-directory'.

(fn ARG)" t nil)(autoload 'doom/backward-delete-whitespace-to-column "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/text" "Delete back to the previous column of whitespace, or as much whitespace as
possible, or just one char if that's not possible." t nil)(autoload '+default--delete-backward-char-a "/Users/rnrbarbosa/.emacs.d/modules/config/default/autoload/text" "Same as `delete-backward-char', but preforms these additional checks:

+ If point is surrounded by (balanced) whitespace and a brace delimiter ({} []
  ()), delete a space on either side of the cursor.
+ If point is at BOL and surrounded by braces on adjacent lines, collapse
  newlines:
  {
  |
  } => {|}
+ Otherwise, resort to `doom/backward-delete-whitespace-to-column'.
+ Resorts to `delete-char' if n > 1

(fn N &optional KILLFLAG)" t nil)(autoload '+evil-escape-a "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/advice" "Call `doom/escape' if `evil-force-normal-state' is called interactively.

(fn &rest _)" nil nil)(autoload '+evil-replace-filename-modifiers-a "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/advice" "Take a path and resolve any vim-like filename modifiers in it. This adds
support for most vim file modifiers, as well as:

  %:P   Resolves to `doom-project-root'.

See http://vimdoc.sourceforge.net/htmldoc/cmdline.html#filename-modifiers for
more information on modifiers.

(fn FILE-NAME)" nil nil)(autoload '+evil--insert-newline-below-and-respect-comments-a "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/advice" "

(fn ORIG-FN COUNT)" nil nil)(autoload '+evil--insert-newline-above-and-respect-comments-a "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/advice" "

(fn ORIG-FN COUNT)" nil nil)(autoload '+evil-window-split-a "~/.emacs.d/modules/editor/evil/autoload/advice" nil t)(autoload '+evil-window-vsplit-a "~/.emacs.d/modules/editor/evil/autoload/advice" nil t)(autoload '+evil-join-a "~/.emacs.d/modules/editor/evil/autoload/advice" nil nil)(autoload '+evil--fix-dabbrev-in-minibuffer-h "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/advice" "Make `try-expand-dabbrev' from `hippie-expand' work in minibuffer. See
`he-dabbrev-beg', so we need to redefine syntax for '/'." nil nil)(autoload '+evil--embrace-get-pair "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/embrace" "

(fn CHAR)" nil nil)(autoload '+evil--embrace-escaped "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/embrace" "Backslash-escaped surround character support for embrace." nil nil)(autoload '+evil--embrace-latex "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/embrace" "LaTeX command support for embrace." nil nil)(autoload '+evil--embrace-elisp-fn "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/embrace" "Elisp function support for embrace." nil nil)(autoload '+evil--embrace-angle-brackets "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/embrace" "Type/generic angle brackets." nil nil)(autoload '+evil/visual-indent "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/evil" "vnoremap < <gv" t nil)(autoload '+evil/visual-dedent "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/evil" "vnoremap > >gv" t nil)(autoload '+evil/alt-paste "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/evil" "Call `evil-paste-after' but invert `evil-kill-on-visual-paste'.
By default, this replaces the selection with what's in the clipboard without
replacing its contents." t nil)(autoload '+evil/window-move-left "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/evil" "Swap windows to the left." t nil)(autoload '+evil/window-move-right "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/evil" "Swap windows to the right" t nil)(autoload '+evil/window-move-up "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/evil" "Swap windows upward." t nil)(autoload '+evil/window-move-down "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/evil" "Swap windows downward." t nil)(autoload '+evil:apply-macro "~/.emacs.d/modules/editor/evil/autoload/evil" nil t)(autoload '+evil:retab "~/.emacs.d/modules/editor/evil/autoload/evil" nil t)(autoload '+evil:narrow-buffer "~/.emacs.d/modules/editor/evil/autoload/evil" nil t)(autoload '+evil:yank-unindented "~/.emacs.d/modules/editor/evil/autoload/evil" nil t)(autoload '+evil-delete "~/.emacs.d/modules/editor/evil/autoload/evil" nil t)(progn (autoload 'set-evil-initial-state! "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/evil.el" "Set the initialize STATE of MODES using `evil-set-initial-state'.

(fn MODES STATE)" nil nil) (function-put 'set-evil-initial-state! 'lisp-indent-function 'defun))(put 'set-evil-initial-state! 'doom-module '(:editor . evil))(autoload '+evil-ex-regexp-match "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/ex" "

(fn FLAG &optional ARG INVERT)" nil nil)(autoload '+evil:align "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:align-right "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:open-scratch-buffer "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:pwd "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:make "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:compile "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:reverse-lines "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:cd "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:kill-all-buffers "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:kill-matching-buffers "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:help "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:read "~/.emacs.d/modules/editor/evil/autoload/ex" nil t)(autoload '+evil:delete-this-file "~/.emacs.d/modules/editor/evil/autoload/files" nil t)(autoload '+evil:move-this-file "~/.emacs.d/modules/editor/evil/autoload/files" nil t)(autoload '+evil:copy-this-file "~/.emacs.d/modules/editor/evil/autoload/files" nil t)(autoload '+evil:whole-buffer-txtobj "~/.emacs.d/modules/editor/evil/autoload/textobjects" nil nil)(autoload '+evil:defun-txtobj "~/.emacs.d/modules/editor/evil/autoload/textobjects" nil nil)(autoload '+evil:inner-url-txtobj "~/.emacs.d/modules/editor/evil/autoload/textobjects" nil nil)(autoload '+evil:outer-url-txtobj "~/.emacs.d/modules/editor/evil/autoload/textobjects" nil nil)(autoload '+evil/next-beginning-of-method "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/unimpaired" "Jump to the beginning of the COUNT-th method/function after point.

(fn COUNT)" t nil)(autoload '+evil/previous-beginning-of-method "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/unimpaired" "Jump to the beginning of the COUNT-th method/function before point.

(fn COUNT)" t nil)(defalias #'+evil/next-end-of-method #'end-of-defun "Jump to the end of the COUNT-th method/function after point.")(autoload '+evil/previous-end-of-method "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/unimpaired" "Jump to the end of the COUNT-th method/function before point.

(fn COUNT)" t nil)(autoload '+evil/next-preproc-directive "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/unimpaired" "Jump to the COUNT-th preprocessor directive after point.

By default, this only recognizes C preproc directives. To change this see
`+evil-preprocessor-regexp'.

(fn COUNT)" t nil)(autoload '+evil/previous-preproc-directive "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/unimpaired" "Jump to the COUNT-th preprocessor directive before point.

See `+evil/next-preproc-directive' for details.

(fn COUNT)" t nil)(autoload '+evil/next-comment "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/unimpaired" "Jump to the beginning of the COUNT-th commented region after point.

(fn COUNT)" t nil)(autoload '+evil/previous-comment "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/unimpaired" "Jump to the beginning of the COUNT-th commented region before point.

(fn COUNT)" t nil)(autoload '+evil/insert-newline-below "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/unimpaired" "Insert COUNT blank line(s) below current line. Does not change modes.

(fn COUNT)" t nil)(autoload '+evil/insert-newline-above "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/unimpaired" "Insert COUNT blank line(s) above current line. Does not change modes.

(fn COUNT)" t nil)(autoload '+evil/next-frame "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/unimpaired" "Focus next frame.

(fn COUNT)" t nil)(autoload '+evil/previous-frame "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/unimpaired" "Focus previous frame.

(fn COUNT)" t nil)(autoload '+evil/next-file "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/unimpaired" "Open file following this one, alphabetically, in the same directory.

(fn COUNT)" t nil)(autoload '+evil/previous-file "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/unimpaired" "Open file preceding this one, alphabetically, in the same directory.

(fn COUNT)" t nil)(autoload '+evil:url-encode "~/.emacs.d/modules/editor/evil/autoload/unimpaired" nil t)(autoload '+evil:url-decode "~/.emacs.d/modules/editor/evil/autoload/unimpaired" nil t)(autoload '+evil:c-string-encode "~/.emacs.d/modules/editor/evil/autoload/unimpaired" nil t)(autoload '+evil:c-string-decode "~/.emacs.d/modules/editor/evil/autoload/unimpaired" nil t)(autoload '+evil/reselect-paste "/Users/rnrbarbosa/.emacs.d/modules/editor/evil/autoload/unimpaired" "Return to visual mode and reselect the last pasted region." t nil)(autoload '+file-templates--expand "/Users/rnrbarbosa/.emacs.d/modules/editor/file-templates/autoload" "Auto insert a yasnippet snippet into current file and enter insert mode (if
evil is loaded and enabled).

(fn PRED &key PROJECT MODE TRIGGER IGNORE WHEN)" nil nil)(autoload '+file-templates-get-short-path "/Users/rnrbarbosa/.emacs.d/modules/editor/file-templates/autoload" "Fetches a short file path for the header in Doom module templates." nil nil)(autoload '+file-templates/insert-license "/Users/rnrbarbosa/.emacs.d/modules/editor/file-templates/autoload" "Insert a license file template into the current file." t nil)(autoload '+file-templates/debug "/Users/rnrbarbosa/.emacs.d/modules/editor/file-templates/autoload" "Tests the current buffer and outputs the file template rule most appropriate
for it. This is used for testing." t nil)(progn (autoload 'set-file-template! "/Users/rnrbarbosa/.emacs.d/modules/editor/file-templates/autoload.el" "Register a file template.

PRED can either be a regexp string or a major mode symbol. PLIST may contain
these properties:

  :when FUNCTION
    Provides a secondary predicate. This function takes no arguments and is
    executed from within the target buffer. If it returns nil, this rule will be
    skipped over.
  :trigger STRING|FUNCTION
    If a string, this is the yasnippet trigger keyword used to trigger the
      target snippet.
    If a function, this function will be run in the context of the buffer to
      insert a file template into. It is given no arguments and must insert text
      into the current buffer manually.
    If omitted, `+file-templates-default-trigger' is used.
  :mode SYMBOL
    What mode to get the yasnippet snippet from. If omitted, either PRED (if
    it's a major-mode symbol) or the mode of the buffer is used.
  :project BOOL
    If non-nil, ignore this template if this buffer isn't in a project.
  :ignore BOOL
    If non-nil, don't expand any template for this file and don't test any other
    file template rule against this buffer.

(fn PRED &key WHEN TRIGGER MODE PROJECT IGNORE)" nil nil) (function-put 'set-file-template! 'lisp-indent-function 'defun))(put 'set-file-template! 'doom-module '(:editor . file-templates))(autoload 'set-file-templates! "/Users/rnrbarbosa/.emacs.d/modules/editor/file-templates/autoload.el" "Like `set-file-template!', but can register multiple file templates at once.

(fn &rest (PRED &key WHEN TRIGGER MODE PROJECT IGNORE))" nil nil)(put 'set-file-templates! 'doom-module '(:editor . file-templates))(autoload '+fold/toggle "/Users/rnrbarbosa/.emacs.d/modules/editor/fold/autoload/fold" "Toggle the fold at point.

Targets `vimmish-fold', `hideshow' and `outline' folds." t nil)(autoload '+fold/open "/Users/rnrbarbosa/.emacs.d/modules/editor/fold/autoload/fold" "Open the folded region at point.

Targets `vimmish-fold', `hideshow' and `outline' folds." t nil)(autoload '+fold/close "/Users/rnrbarbosa/.emacs.d/modules/editor/fold/autoload/fold" "Close the folded region at point.

Targets `vimmish-fold', `hideshow' and `outline' folds." t nil)(autoload '+fold/open-all "/Users/rnrbarbosa/.emacs.d/modules/editor/fold/autoload/fold" "Open folds at LEVEL (or all folds if LEVEL is nil).

(fn &optional LEVEL)" t nil)(autoload '+fold/close-all "/Users/rnrbarbosa/.emacs.d/modules/editor/fold/autoload/fold" "Close folds at LEVEL (or all folds if LEVEL is nil).

(fn &optional LEVEL)" t nil)(autoload '+fold/next "/Users/rnrbarbosa/.emacs.d/modules/editor/fold/autoload/fold" "Jump to the next vimish fold, outline heading or folded region.

(fn COUNT)" t nil)(autoload '+fold/previous "/Users/rnrbarbosa/.emacs.d/modules/editor/fold/autoload/fold" "Jump to the previous vimish fold, outline heading or folded region.

(fn COUNT)" t nil)(autoload '+fold-hideshow-haml-forward-sexp-fn "/Users/rnrbarbosa/.emacs.d/modules/editor/fold/autoload/hideshow" "

(fn ARG)" nil nil)(autoload '+fold-hideshow-forward-block-by-indent-fn "/Users/rnrbarbosa/.emacs.d/modules/editor/fold/autoload/hideshow" "

(fn ARG)" nil nil)(autoload '+fold-hideshow-set-up-overlay-fn "/Users/rnrbarbosa/.emacs.d/modules/editor/fold/autoload/hideshow" "

(fn OV)" nil nil)(cl-defmacro set-formatter! (name formatter &key modes filter ok-statuses error-regexp) "THIS FUNCTION DOES NOTHING BECAUSE (:editor . format) IS DISABLED

Define (or modify) a formatter named NAME.

Supported keywords: :modes :filter :ok-statuses :error-regexp

NAME is a symbol that identifies this formatter.

FORMATTER can be a symbol referring to another formatter, a function, string or
nested list.

  If a function, it should be a formatter function that
    `format-all--buffer-thunk' will accept.
  If a string, it is assumed to be a shell command that the buffer's text will
    be piped to (through stdin).
  If a list, it should represent a shell command as a list of arguments. Each
    element is either a string or list (STRING ARG) where STRING is a format
    string and ARG is both a predicate and argument for STRING. If ARG is nil,
    STRING will be omitted from the vector.

MODES is a major mode, a list thereof, or a list of two-element sublists with
the structure: (MAJOR-MODE FORM). FORM is evaluated when the buffer is formatted
and its return value serves two purposes:

  1. It is a predicate for this formatter. Assuming the MAJOR-MODE matches the
     current mode, if FORM evaluates to nil, the formatter is skipped.
  2. It's return value is made available to FORMATTER if it is a function or
     list of shell arguments via the `mode-result' variable.

FILTER is a function that takes three arguments: the formatted output, any error
output and the position of the first change. This function must return these
three after making whatever changes you like to them. This might be useful if
the output contains ANSI color codes that need to be stripped out (as is the
case with elm-format).

OK-STATUSES and ERROR-REGEXP are ignored if FORMATTER is not a shell command.

OK-STATUSES is a list of integer exit codes that should be treated as success
codes. However, if ERROR-REGEXP is given, and the program's stderr contains that
regexp, then the formatting is considered failed even if the exit status is in
OK-STATUSES.

Basic examples:

  (set-formatter! 'asmfmt \"asmfmt\" :modes '(asm-mode nasm-mode))
  (set-formatter! 'black \"black -q -\")
  (set-formatter! 'html-tidy \"tidy -q -indent\" :modes '(html-mode web-mode))

Advanced examples:

  (set-formatter!
    'clang-format
    '(\"clang-format\"
      (\"-assume-filename=%S\" (or buffer-file-name mode-result \"\")))
    :modes
    '((c-mode \".c\")
      (c++-mode \".cpp\")
      (java-mode \".java\")
      (objc-mode \".m\")
      (protobuf-mode \".proto\")))

  (set-formatter! 'html-tidy
    '(\"tidy\" \"-q\" \"-indent\"
      (\"-xml\" (memq major-mode '(nxml-mode xml-mode))))
    :modes
    '(html-mode
      (web-mode (and (equal \"none\" web-mode-engine)
                     (car (member web-mode-content-type '(\"xml\" \"html\"))))))
    :ok-statuses '(0 1)
    :executable \"tidy\")

  (set-formatter! 'html-tidy  ; overwrite predefined html-tidy formatter
    '(\"tidy\" \"-q\" \"-indent\"
      \"--tidy-mark\" \"no\"
      \"--drop-empty-elements\" \"no\"
      \"--show-body-only\" \"auto\"
      (\"--indent-spaces\" \"%d\" tab-width)
      (\"--indent-with-tabs\" \"%s\" (if indent-tabs-mode \"yes\" \"no\"))
      (\"-xml\" (memq major-mode '(nxml-mode xml-mode))))
    :ok-statuses '(0 1)))

  (set-formatter! 'elm-format
    \"elm-format --yes --stdin\"
    :filter
    (lambda (output errput first-diff)
      (list output
            (format-all--remove-ansi-color errput)
            first-diff)))" (ignore name formatter modes filter ok-statuses error-regexp))(put 'set-formatter! 'doom-module '(:editor . format))(cl-defmacro set-rotate-patterns! (modes &key symbols words patterns) "THIS FUNCTION DOES NOTHING BECAUSE (:editor . rotate-text) IS DISABLED

Declare :symbols, :words or :patterns (all lists of strings) that
`rotate-text' will cycle through." (ignore modes symbols words patterns))(put 'set-rotate-patterns! 'doom-module '(:editor . rotate-text))(autoload 'set-yas-minor-mode! "/Users/rnrbarbosa/.emacs.d/modules/editor/snippets/autoload/settings.el" "Register minor MODES (one mode symbol or a list of them) with yasnippet so it
can have its own snippets category, if the folder exists.

(fn MODES)" nil nil)(put 'set-yas-minor-mode! 'doom-module '(:editor . snippets))(autoload '+snippets-prompt-private "/Users/rnrbarbosa/.emacs.d/modules/editor/snippets/autoload/snippets" "Prioritize private snippets over built-in ones if there are multiple
choices.

There are two groups of snippets in Doom Emacs. The built in ones (under
`doom-emacs-dir'; provided by Doom or its plugins) or your private snippets
(outside of `doom-eamcs-dir').

If there are multiple snippets with the same key in either camp (but not both),
you will be prompted to select one.

If there are conflicting keys across the two camps, the built-in ones are
ignored. This makes it easy to override built-in snippets with private ones.

(fn PROMPT CHOICES &optional DISPLAY-FN)" nil nil)(autoload '+snippets/goto-start-of-field "/Users/rnrbarbosa/.emacs.d/modules/editor/snippets/autoload/snippets" "Go to the beginning of the current field." t nil)(autoload '+snippets/goto-end-of-field "/Users/rnrbarbosa/.emacs.d/modules/editor/snippets/autoload/snippets" "Go to the end of the current field." t nil)(autoload '+snippets/delete-backward-char "/Users/rnrbarbosa/.emacs.d/modules/editor/snippets/autoload/snippets" "Prevents Yas from interfering with backspace deletion.

(fn &optional FIELD)" t nil)(autoload '+snippets/delete-forward-char-or-field "/Users/rnrbarbosa/.emacs.d/modules/editor/snippets/autoload/snippets" "Delete forward, or skip the current field if it's empty. This is to prevent
buggy behavior when <delete> is pressed in an empty field.

(fn &optional FIELD)" t nil)(autoload '+snippets/delete-to-start-of-field "/Users/rnrbarbosa/.emacs.d/modules/editor/snippets/autoload/snippets" "Delete to start-of-field.

(fn &optional FIELD)" t nil)(autoload '+snippets/find "/Users/rnrbarbosa/.emacs.d/modules/editor/snippets/autoload/snippets" "Open a snippet file (in all of `yas-snippet-dirs')." t nil)(autoload '+snippets/find-private "/Users/rnrbarbosa/.emacs.d/modules/editor/snippets/autoload/snippets" "Open a private snippet file in `+snippets-dir'." t nil)(autoload '+snippets/find-for-current-mode "/Users/rnrbarbosa/.emacs.d/modules/editor/snippets/autoload/snippets" "Open a snippet for this mode.

(fn TEMPLATE-UUID)" t nil)(autoload '+snippets/new "/Users/rnrbarbosa/.emacs.d/modules/editor/snippets/autoload/snippets" "Create a new snippet in `+snippets-dir'." t nil)(autoload '+snippets/new-alias "/Users/rnrbarbosa/.emacs.d/modules/editor/snippets/autoload/snippets" "Create an alias for a snippet with uuid TEMPLATE-UUID.

You will be prompted for a snippet to alias.

(fn TEMPLATE-UUID)" t nil)(autoload '+snippets/edit "/Users/rnrbarbosa/.emacs.d/modules/editor/snippets/autoload/snippets" "Edit a snippet with uuid TEMPLATE-UUID.

If the snippet isn't in `+snippets-dir', it will be copied there (where it will
shadow the default snippet).

(fn TEMPLATE-UUID)" t nil)(autoload '+snippets-show-hints-in-header-line-h "/Users/rnrbarbosa/.emacs.d/modules/editor/snippets/autoload/snippets" nil nil nil)(autoload '+snippets-enable-project-modes-h "/Users/rnrbarbosa/.emacs.d/modules/editor/snippets/autoload/snippets" "Automatically enable snippet libraries for project minor modes defined with
`def-project-mode!'.

(fn MODE &rest _)" nil nil)(autoload '+snippets-read-only-maybe-h "/Users/rnrbarbosa/.emacs.d/modules/editor/snippets/autoload/snippets" "Enable `read-only-mode' if snippet is built-in." nil nil)(autoload '+snippets-expand-on-region-a "/Users/rnrbarbosa/.emacs.d/modules/editor/snippets/autoload/snippets" "Fix off-by-one when expanding snippets on an evil visual region.

Also strips whitespace out of selection. Also switches to insert mode. If
`evil-local-mode' isn't enabled, or we're not in visual mode, run ORIG-FN as
is.

(fn ORIG-FN &optional NO-CONDITION)" nil nil)(autoload '+dired/quit-all "/Users/rnrbarbosa/.emacs.d/modules/emacs/dired/autoload" "Kill all `dired-mode' buffers." t nil)(autoload '+dired-enable-git-info-h "/Users/rnrbarbosa/.emacs.d/modules/emacs/dired/autoload" "Enable `dired-git-info-mode' in git repos." nil nil)(progn (autoload 'set-electric! "/Users/rnrbarbosa/.emacs.d/modules/emacs/electric/autoload.el" "Declare that WORDS (list of strings) or CHARS (lists of chars) should trigger
electric indentation.

Enables `electric-indent-local-mode' in MODES.

(fn MODES &key WORDS CHARS)" nil nil) (function-put 'set-electric! 'lisp-indent-function 'defun))(put 'set-electric! 'doom-module '(:emacs . electric))(autoload '+vc/smerge-hydra/body "~/.emacs.d/modules/emacs/vc/autoload/hydra" nil t)(autoload '+vc/browse-at-remote-homepage "/Users/rnrbarbosa/.emacs.d/modules/emacs/vc/autoload/vc" "Open homepage for current project in browser." t nil)(autoload '+vc/browse-at-remote-kill-homepage "/Users/rnrbarbosa/.emacs.d/modules/emacs/vc/autoload/vc" "Copy homepage URL of current project to clipboard." t nil)(defmacro set-email-account! (label letvars &optional default-p) "THIS FUNCTION DOES NOTHING BECAUSE (:email . mu4e) IS DISABLED

Registers an email address for mu4e. The LABEL is a string. LETVARS are a
list of cons cells (VARIABLE . VALUE) -- you may want to modify:

 + `user-full-name' (this or the global `user-full-name' is required)
 + `user-mail-address' (required in mu4e < 1.4)
 + `smtpmail-smtp-user' (required for sending mail from Emacs)

OPTIONAL:
 + `mu4e-sent-folder'
 + `mu4e-drafts-folder'
 + `mu4e-trash-folder'
 + `mu4e-refile-folder'
 + `mu4e-compose-signature'

DEFAULT-P is a boolean. If non-nil, it marks that email account as the
default/fallback account." (ignore label letvars default-p))(put 'set-email-account! 'doom-module '(:email . mu4e))(autoload '+emacs-lisp-eval "/Users/rnrbarbosa/.emacs.d/modules/lang/emacs-lisp/autoload" "Evaluate a region and print it to the echo area (if one line long), otherwise
to a pop up buffer.

(fn BEG END)" nil nil)(autoload '+emacs-lisp-lookup-definition "/Users/rnrbarbosa/.emacs.d/modules/lang/emacs-lisp/autoload" "Lookup definition of THING.

(fn THING)" nil nil)(autoload '+emacs-lisp-lookup-documentation "/Users/rnrbarbosa/.emacs.d/modules/lang/emacs-lisp/autoload" "Lookup THING with `helpful-variable' if it's a variable, `helpful-callable'
if it's callable, `apropos' otherwise.

(fn THING)" nil nil)(autoload '+emacs-lisp-indent-function "/Users/rnrbarbosa/.emacs.d/modules/lang/emacs-lisp/autoload" "A replacement for `lisp-indent-function'.

Indents plists more sensibly. Adapted from
https://emacs.stackexchange.com/questions/10230/how-to-indent-keywords-aligned

(fn INDENT-POINT STATE)" nil nil)(autoload '+emacs-lisp/open-repl "/Users/rnrbarbosa/.emacs.d/modules/lang/emacs-lisp/autoload" "Open the Emacs Lisp REPL (`ielm')." t nil)(autoload '+emacs-lisp/buttercup-run-file "/Users/rnrbarbosa/.emacs.d/modules/lang/emacs-lisp/autoload" "Run all buttercup tests in the focused buffer." t nil)(autoload '+emacs-lisp/buttercup-run-project "/Users/rnrbarbosa/.emacs.d/modules/lang/emacs-lisp/autoload" "Run all buttercup tests in the project." t nil)(autoload '+emacs-lisp/edebug-instrument-defun-on "/Users/rnrbarbosa/.emacs.d/modules/lang/emacs-lisp/autoload" "Toggle on instrumentalisation for the function under `defun'." t nil)(autoload '+emacs-lisp/edebug-instrument-defun-off "/Users/rnrbarbosa/.emacs.d/modules/lang/emacs-lisp/autoload" "Toggle off instrumentalisation for the function under `defun'." t nil)(autoload '+emacs-lisp-init-straight-maybe-h "/Users/rnrbarbosa/.emacs.d/modules/lang/emacs-lisp/autoload" "Make sure straight sees modifications to installed packages." nil nil)(autoload '+emacs-lisp-extend-imenu-h "/Users/rnrbarbosa/.emacs.d/modules/lang/emacs-lisp/autoload" "Improve imenu support in `emacs-lisp-mode', including recognition for Doom's API." nil nil)(autoload '+emacs-lisp-reduce-flycheck-errors-in-emacs-config-h "/Users/rnrbarbosa/.emacs.d/modules/lang/emacs-lisp/autoload" "Remove `emacs-lisp-checkdoc' checker and reduce `emacs-lisp' checker
verbosity when editing a file in `doom-private-dir' or `doom-emacs-dir'." nil nil)(autoload '+emacs-lisp-truncate-pin "/Users/rnrbarbosa/.emacs.d/modules/lang/emacs-lisp/autoload" "Truncates long SHA1 hashes in `package!' :pin's." nil nil)(autoload '+emacs-lisp-highlight-vars-and-faces "/Users/rnrbarbosa/.emacs.d/modules/lang/emacs-lisp/autoload" "Match defined variables and functions.

Functions are differentiated into special forms, built-in functions and
library/userland functions

(fn END)" nil nil)(autoload '+go/test-rerun "/Users/rnrbarbosa/.emacs.d/modules/lang/go/autoload" nil t nil)(autoload '+go/test-all "/Users/rnrbarbosa/.emacs.d/modules/lang/go/autoload" nil t nil)(autoload '+go/test-nested "/Users/rnrbarbosa/.emacs.d/modules/lang/go/autoload" nil t nil)(autoload '+go/test-single "/Users/rnrbarbosa/.emacs.d/modules/lang/go/autoload" nil t nil)(autoload '+go/bench-all "/Users/rnrbarbosa/.emacs.d/modules/lang/go/autoload" nil t nil)(autoload '+go/bench-single "/Users/rnrbarbosa/.emacs.d/modules/lang/go/autoload" nil t nil)(autoload '+go/play-buffer-or-region "/Users/rnrbarbosa/.emacs.d/modules/lang/go/autoload" "TODO

(fn &optional BEG END)" t nil)(autoload '+java-android-mode-is-layout-file "/Users/rnrbarbosa/.emacs.d/modules/lang/java/autoload/java" nil nil nil)(autoload '+java-android-mode-in-tags "/Users/rnrbarbosa/.emacs.d/modules/lang/java/autoload/java" "

(fn &rest TAGS)" nil nil)(autoload '+java-android-mode-tag-name "/Users/rnrbarbosa/.emacs.d/modules/lang/java/autoload/java" nil nil nil)(autoload '+java-android-mode-maybe-h "/Users/rnrbarbosa/.emacs.d/modules/lang/java/autoload/java" "Enable `android-mode' if this looks like an android project.

It determines this by the existence of AndroidManifest.xml or
src/main/AndroidManifest.xml." nil nil)(autoload '+java-current-package "/Users/rnrbarbosa/.emacs.d/modules/lang/java/autoload/java" "Converts the current file's path into a namespace.

For example: ~/some/project/src/net/lissner/game/MyClass.java
Is converted to: net.lissner.game

It does this by ignoring everything before the nearest package root (see
`+java-project-package-roots' to control what this function considers a package
root)." nil nil)(autoload '+java-current-class "/Users/rnrbarbosa/.emacs.d/modules/lang/java/autoload/java" "Get the class name for the current file." nil nil)(autoload '+java/groovy-open-repl "/Users/rnrbarbosa/.emacs.d/modules/lang/java/autoload/java" "Open a Groovy REPL." t nil)(autoload '+markdown-flyspell-word-p "/Users/rnrbarbosa/.emacs.d/modules/lang/markdown/autoload" "Return t if point is on a word that should be spell checked.

Return nil if on a link url, markup, html, or references." nil nil)(autoload '+markdown-compile "/Users/rnrbarbosa/.emacs.d/modules/lang/markdown/autoload" "Compile markdown into html.

Runs `+markdown-compile-functions' until the first function to return non-nil,
otherwise throws an error.

(fn BEG END OUTPUT-BUFFER)" nil nil)(autoload '+markdown-compile-marked "/Users/rnrbarbosa/.emacs.d/modules/lang/markdown/autoload" "Compiles markdown with the marked program, if available.
Returns its exit code.

(fn BEG END OUTPUT-BUFFER)" nil nil)(autoload '+markdown-compile-pandoc "/Users/rnrbarbosa/.emacs.d/modules/lang/markdown/autoload" "Compiles markdown with the pandoc program, if available.
Returns its exit code.

(fn BEG END OUTPUT-BUFFER)" nil nil)(autoload '+markdown-compile-multimarkdown "/Users/rnrbarbosa/.emacs.d/modules/lang/markdown/autoload" "Compiles markdown with the multimarkdown program, if available. Returns its
exit code.

(fn BEG END OUTPUT-BUFFER)" nil nil)(autoload '+markdown-compile-markdown "/Users/rnrbarbosa/.emacs.d/modules/lang/markdown/autoload" "Compiles markdown using the Markdown.pl script (or markdown executable), if
available. Returns its exit code.

(fn BEG END OUTPUT-BUFFER)" nil nil)(autoload '+markdown/insert-del "/Users/rnrbarbosa/.emacs.d/modules/lang/markdown/autoload" "Surround region in github strike-through delimiters." t nil)(autoload '+org-attach-icon-for "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-attach" "

(fn PATH)" nil nil)(autoload '+org/open-gallery-from-attachments "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-attach" "TODO" t nil)(autoload '+org/find-file-in-attachments "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-attach" "Open a file from `org-attach-id-dir'." t nil)(autoload '+org/attach-file-and-insert-link "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-attach" "Downloads the file at PATH and insert an org link at point.
PATH (a string) can be an url, a local file path, or a base64 encoded datauri.

(fn PATH)" t nil)(autoload '+org-headline-avy "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-avy" "TODO" nil nil)(autoload '+org/goto-visible "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-avy" "TODO" t nil)(autoload '+org-eval-handler "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-babel" "TODO

(fn BEG END)" nil nil)(autoload '+org-lookup-definition-handler "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-babel" "TODO

(fn IDENTIFIER)" nil nil)(autoload '+org-lookup-references-handler "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-babel" "TODO

(fn IDENTIFIER)" nil nil)(autoload '+org-lookup-documentation-handler "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-babel" "TODO

(fn IDENTIFIER)" nil nil)(autoload '+org-clear-babel-results-h "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-babel" "Remove the results block for the org babel block at point." nil nil)(defvar +org-capture-frame-parameters `((name . "doom-capture") (width . 70) (height . 25) (transient . t) ,(when (and IS-LINUX (not (getenv "DISPLAY"))) `(display . ":0")) ,(if IS-MAC '(menu-bar-lines . 1))) "TODO")(autoload '+org-capture-cleanup-frame-h "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-capture" "Closes the org-capture frame once done adding an entry." nil nil)(autoload '+org-capture-frame-p "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-capture" "Return t if the current frame is an org-capture frame opened by
`+org-capture/open-frame'.

(fn &rest _)" nil nil)(autoload '+org-capture/open-frame "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-capture" "Opens the org-capture window in a floating frame that cleans itself up once
you're done. This can be called from an external shell script.

(fn &optional INITIAL-INPUT KEY)" t nil)(autoload '+org-capture-available-keys "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-capture" "TODO" nil nil)(autoload '+org-capture-todo-file "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-capture" "Expand `+org-capture-todo-file' from `org-directory'.
If it is an absolute path return `+org-capture-todo-file' verbatim." nil nil)(autoload '+org-capture-notes-file "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-capture" "Expand `+org-capture-notes-file' from `org-directory'.
If it is an absolute path return `+org-capture-todo-file' verbatim." nil nil)(autoload '+org-capture-project-todo-file "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-capture" "Find the nearest `+org-capture-todo-file' in a parent directory, otherwise,
opens a blank one at the project root. Throws an error if not in a project." nil nil)(autoload '+org-capture-project-notes-file "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-capture" "Find the nearest `+org-capture-notes-file' in a parent directory, otherwise,
opens a blank one at the project root. Throws an error if not in a project." nil nil)(autoload '+org-capture-project-changelog-file "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-capture" "Find the nearest `+org-capture-changelog-file' in a parent directory,
otherwise, opens a blank one at the project root. Throws an error if not in a
project." nil nil)(autoload '+org-capture-central-project-todo-file "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-capture" "TODO" nil nil)(autoload '+org-capture-central-project-notes-file "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-capture" "TODO" nil nil)(autoload '+org-capture-central-project-changelog-file "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-capture" "TODO" nil nil)(autoload '+org/export-to-clipboard "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-export" "Exports the current buffer/selection to the clipboard.

Prompts for what BACKEND to use. See `org-export-backends' for options.

(fn BACKEND)" t nil)(autoload '+org/export-to-clipboard-as-rich-text "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-export" "Export the current buffer to HTML then copies it to clipboard as rich text.

Supports org-mode, markdown-mode, and gfm-mode buffers. In any other mode,
htmlize is used (takes what you see in Emacs and converts it to html, text
properties and font-locking et all).

(fn BEG END)" t nil)(autoload '+org-define-basic-link "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-link" "Define a link with some basic completion & fontification.

KEY is the name of the link type. DIR-VAR is the directory variable to resolve
links relative to. PLIST is passed to `org-link-set-parameters' verbatim.

Links defined with this will be rendered in the `error' face if the file doesn't
exist, and `org-link' otherwise.

(fn KEY DIR-VAR &rest PLIST)" nil nil)(function-put '+org-define-basic-link 'lisp-indent-function '2)(autoload '+org-image-file-data-fn "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-link" "Intepret LINK as an image file path and return its data.

(fn PROTOCOL LINK DESCRIPTION)" nil nil)(autoload '+org-inline-image-data-fn "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-link" "Interpret LINK as base64-encoded image data.

(fn PROTOCOL LINK DESCRIPTION)" nil nil)(autoload '+org-http-image-data-fn "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-link" "Interpret LINK as an URL to an image file.

(fn PROTOCOL LINK DESCRIPTION)" nil nil)(autoload '+org/remove-link "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-link" "Unlink the text at point." t nil)(autoload '+org/refile-to-current-file "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-refile" "TODO

(fn ARG &optional FILE)" t nil)(autoload '+org/refile-to-file "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-refile" "Refile current heading to a particular org file.

(fn ARG FILE)" t nil)(autoload '+org/refile-to-other-window "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-refile" "TODO

(fn ARG)" t nil)(autoload '+org/refile-to-other-buffer "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-refile" "TODO

(fn ARG)" t nil)(autoload '+org/refile-to-running-clock "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-refile" "TODO

(fn ARG)" t nil)(autoload '+org/refile-to-last-location "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-refile" "TODO

(fn ARG)" t nil)(autoload '+org/refile-to-visible "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-refile" "Refile current heading as first child of visible heading selected with Avy." t nil)(autoload '+org/table-previous-row "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-tables" "Go to the previous row (same column) in the current table. Before doing so,
re-align the table if necessary. (Necessary because org-mode has a
`org-table-next-row', but not `org-table-previous-row')" t nil)(autoload '+org/table-insert-column-left "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-tables" "Insert a new column left of the current column." t nil)(autoload '+org/table-insert-row-below "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-tables" "Insert a new row below the current row." t nil)(autoload '+org-realign-table-maybe-h "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-tables" "Auto-align table under cursor." nil nil)(autoload '+org-enable-auto-reformat-tables-h "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-tables" "Realign tables & update formulas when exiting insert mode (`evil-mode').
Meant for `org-mode-hook'." nil nil)(autoload '+org-delete-backward-char-and-realign-table-maybe-h "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-tables" "Ensure deleting characters with backspace doesn't deform the table cell." nil nil)(autoload '+org-realign-table-maybe-a "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org-tables" "Auto-align table under cursor and re-calculate formulas.

(fn &rest _)" nil nil)(autoload '+org-get-global-property "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org" "Get a document property named NAME (string) from an org FILE (defaults to
current file). Only scans first 2048 bytes of the document.

(fn NAME &optional FILE BOUND)" nil nil)(autoload '+org-get-todo-keywords-for "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org" "Returns the list of todo keywords that KEYWORD belongs to.

(fn &optional KEYWORD)" nil nil)(autoload '+org-pretty-mode "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org" "Hides emphasis markers and toggles pretty entities.

If called interactively, enable +Org-Pretty mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload '+org/dwim-at-point "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org" "Do-what-I-mean at point.

If on a:
- checkbox list item or todo heading: toggle it.
- clock: update its time.
- headline: cycle ARCHIVE subtrees, toggle latex fragments and inline images in
  subtree; update statistics cookies/checkboxes and ToCs.
- footnote reference: jump to the footnote's definition
- footnote definition: jump to the first reference of this footnote
- table-row or a TBLFM: recalculate the table's formulas
- table-cell: clear it and go into insert mode. If this is a formula cell,
  recaluclate it instead.
- babel-call: execute the source block
- statistics-cookie: update it.
- latex fragment: toggle it.
- link: follow it
- otherwise, refresh all inline images in current tree.

(fn &optional ARG)" t nil)(autoload '+org/shift-return "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org" "Insert a literal newline, or dwim in tables.
Executes `org-table-copy-down' if in table.

(fn &optional ARG)" t nil)(autoload '+org/insert-item-below "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org" "Inserts a new heading, table cell or item below the current one.

(fn COUNT)" t nil)(autoload '+org/insert-item-above "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org" "Inserts a new heading, table cell or item above the current one.

(fn COUNT)" t nil)(autoload '+org/toggle-last-clock "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org" "Toggles last clocked item.

Clock out if an active clock is running (or cancel it if prefix ARG is non-nil).

If no clock is active, then clock into the last item. See `org-clock-in-last' to
see how ARG affects this command.

(fn ARG)" t nil)(defalias #'+org/toggle-fold #'+org-cycle-only-current-subtree-h)(autoload '+org/open-fold "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org" "Open the current fold (not but its children)." t nil)(defalias #'+org/close-fold #'outline-hide-subtree)(autoload '+org/close-all-folds "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org" "Close all folds in the buffer (or below LEVEL).

(fn &optional LEVEL)" t nil)(autoload '+org/open-all-folds "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org" "Open all folds in the buffer (or up to LEVEL).

(fn &optional LEVEL)" t nil)(autoload '+org/show-next-fold-level "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org" "Decrease the fold-level of the visible area of the buffer. This unfolds
another level of headings on each invocation.

(fn &optional COUNT)" t nil)(autoload '+org/hide-next-fold-level "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org" "Increase the global fold-level of the visible area of the buffer. This folds
another level of headings on each invocation.

(fn &optional COUNT)" t nil)(autoload '+org-indent-maybe-h "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org" "Indent the current item (header or item), if possible.
Made for `org-tab-first-hook' in evil-mode." t nil)(autoload '+org-yas-expand-maybe-h "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org" "Expand a yasnippet snippet, if trigger exists at point or region is active.
Made for `org-tab-first-hook'." nil nil)(autoload '+org-cycle-only-current-subtree-h "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org" "Toggle the local fold at the point, and no deeper.
`org-cycle's standard behavior is to cycle between three levels: collapsed,
subtree and whole document. This is slow, especially in larger org buffer. Most
of the time I just want to peek into the current subtree -- at most, expand
*only* the current subtree.

All my (performant) foldings needs are met between this and `org-show-subtree'
(on zO for evil users), and `org-cycle' on shift-TAB if I need it.

(fn &optional ARG)" t nil)(autoload '+org-make-last-point-visible-h "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org" "Unfold subtree around point if saveplace places us in a folded region." nil nil)(autoload '+org-remove-occur-highlights-h "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org" "Remove org occur highlights on ESC in normal mode." nil nil)(autoload '+org-enable-auto-update-cookies-h "/Users/rnrbarbosa/.emacs.d/modules/lang/org/autoload/org" "Update statistics cookies when saving or exiting insert mode (`evil-mode')." nil nil)(autoload '+python-executable-find "/Users/rnrbarbosa/.emacs.d/modules/lang/python/autoload/python" "Resolve the path to the EXE executable.
Tries to be aware of your active conda/pipenv/virtualenv environment, before
falling back on searching your PATH.

(fn EXE)" nil nil)(autoload '+python/open-repl "/Users/rnrbarbosa/.emacs.d/modules/lang/python/autoload/python" "Open the Python REPL." t nil)(autoload '+python/open-ipython-repl "/Users/rnrbarbosa/.emacs.d/modules/lang/python/autoload/python" "Open an IPython REPL." t nil)(autoload '+python/open-jupyter-repl "/Users/rnrbarbosa/.emacs.d/modules/lang/python/autoload/python" "Open a Jupyter console." t nil)(autoload '+python/optimize-imports "/Users/rnrbarbosa/.emacs.d/modules/lang/python/autoload/python" "organize imports" t nil)(autoload '+rest/dwim-at-point "/Users/rnrbarbosa/.emacs.d/modules/lang/rest/autoload" "TODO" t nil)(autoload '+rest/fold-all "/Users/rnrbarbosa/.emacs.d/modules/lang/rest/autoload" "TODO" t nil)(autoload '+sh--match-variables-in-quotes "/Users/rnrbarbosa/.emacs.d/modules/lang/sh/autoload" "Search for variables in double-quoted strings bounded by LIMIT.

(fn LIMIT)" nil nil)(autoload '+sh--match-command-subst-in-quotes "/Users/rnrbarbosa/.emacs.d/modules/lang/sh/autoload" "Search for variables in double-quoted strings bounded by LIMIT.

(fn LIMIT)" nil nil)(autoload '+sh/open-repl "/Users/rnrbarbosa/.emacs.d/modules/lang/sh/autoload" "Open a shell REPL." t nil)(autoload '+macos-open-with "/Users/rnrbarbosa/.emacs.d/modules/os/macos/autoload" "Send PATH to APP-NAME on OSX.

(fn &optional APP-NAME PATH)" t nil)(autoload '+macos--open-with "/Users/rnrbarbosa/.emacs.d/modules/os/macos/autoload" "

(fn ID &optional APP DIR)" nil t)(autoload '+macos/open-in-default-program "~/.emacs.d/modules/os/macos/autoload" nil t)(autoload '+macos/reveal-in-finder "~/.emacs.d/modules/os/macos/autoload" nil t)(autoload '+macos/reveal-project-in-finder "~/.emacs.d/modules/os/macos/autoload" nil t)(autoload '+macos/send-to-transmit "~/.emacs.d/modules/os/macos/autoload" nil t)(autoload '+macos/send-cwd-to-transmit "~/.emacs.d/modules/os/macos/autoload" nil t)(autoload '+macos/send-to-launchbar "~/.emacs.d/modules/os/macos/autoload" nil t)(autoload '+macos/send-project-to-launchbar "~/.emacs.d/modules/os/macos/autoload" nil t)(autoload '+macos/open-in-iterm "~/.emacs.d/modules/os/macos/autoload" nil t)(autoload 'eshell/emacs "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/commands" "Open a FILES in Emacs.
For folks with a habit of using \"emacs\" to open files, even in eshell.

(fn &rest FILES)" nil nil)(defalias 'eshell/e #'eshell/emacs)(autoload 'eshell/cd-to-project "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/commands" "Change to the project root of the current directory." nil nil)(autoload 'eshell/quit-and-close "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/commands" "Quit the current eshell buffer and close the window it's in.

(fn &rest _)" nil nil)(autoload 'eshell/mkdir-and-cd "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/commands" "Create a directory then cd into it.

(fn DIR)" nil nil)(autoload 'company-pcomplete-available "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/company" nil nil nil)(autoload 'company-pcomplete "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/company" "`company-mode' completion backend using `pcomplete'.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload '+eshell-last-buffer "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/eshell" "Return the last opened eshell buffer.

(fn &optional NOERROR)" nil nil)(autoload '+eshell-buffers "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/eshell" "TODO" nil nil)(autoload '+eshell-run-command "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/eshell" "TODO

(fn COMMAND &optional BUFFER)" nil nil)(autoload '+eshell/toggle "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/eshell" "Toggle eshell popup window.

(fn ARG &optional COMMAND)" t nil)(autoload '+eshell/here "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/eshell" "Open eshell in the current buffer.

(fn &optional COMMAND)" t nil)(autoload '+eshell/frame "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/eshell" "Open a frame dedicated to eshell.

Once the eshell process is killed, the previous frame layout is restored.

(fn &optional COMMAND)" t nil)(autoload '+eshell/search-history "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/eshell" "Search the eshell command history with helm, ivy or `eshell-list-history'." t nil)(autoload '+eshell/pcomplete "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/eshell" "Use pcomplete with completion-in-region backend instead of popup window at
bottom. This ties pcomplete into ivy or helm, if they are enabled." t nil)(autoload '+eshell/quit-or-delete-char "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/eshell" "Delete a character (ahead of the cursor) or quit eshell if there's nothing to
delete.

(fn ARG)" t nil)(autoload '+eshell/split-below "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/eshell" "Create a new eshell window below the current one." t nil)(autoload '+eshell/split-right "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/eshell" "Create a new eshell window to the right of the current one." t nil)(autoload '+eshell/switch-to-next "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/eshell" "Switch to the next eshell buffer." t nil)(autoload '+eshell/switch-to-previous "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/eshell" "Switch to the previous eshell buffer." t nil)(autoload '+eshell/switch-to-last "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/eshell" "Switch to the last eshell buffer that was open (and is still alive)." t nil)(autoload '+eshell/switch-to "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/eshell" "Interactively switch to another eshell buffer.

(fn BUFFER)" t nil)(autoload '+eshell/kill-and-close "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/eshell" "Kill the current eshell buffer and close its window." t nil)(autoload '+eshell-init-h "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/eshell" "Initialize and track this eshell buffer in `+eshell-buffers'." nil nil)(autoload '+eshell-cleanup-h "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/eshell" "Close window (or workspace) on quit." nil nil)(autoload '+eshell-switch-workspace-fn "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/eshell" "

(fn TYPE)" nil nil)(autoload '+eshell-save-workspace-fn "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/eshell" "

(fn WORKSPACE TARGET)" nil nil)(autoload '+eshell:run "~/.emacs.d/modules/term/eshell/autoload/evil" nil t)(autoload '+eshell-goto-prompt-on-insert-a "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/evil" "Move cursor to the prompt when switching to insert mode (if point isn't
already there).

  Meant to replace `evil-collection-eshell-next-prompt-on-insert'." nil nil)(autoload '+eshell/goto-end-of-prompt "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/evil" "Move cursor to the prompt when switching to insert mode (if point isn't
already there)." t nil)(defface +eshell-prompt-pwd '((t (:inherit font-lock-constant-face))) "TODO" :group 'eshell)(defface +eshell-prompt-git-branch '((t (:inherit font-lock-builtin-face))) "TODO" :group 'eshell)(autoload '+eshell-default-prompt-fn "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/prompts" "Generate the prompt string for eshell. Use for `eshell-prompt-function'." nil nil)(autoload 'set-eshell-alias! "/Users/rnrbarbosa/.emacs.d/modules/term/eshell/autoload/settings.el" "Define aliases for eshell.

ALIASES is a flat list of alias -> command pairs. e.g.

  (set-eshell-alias!
    \"hi\"  \"echo hello world\"
    \"bye\" \"echo goodbye world\")

(fn &rest ALIASES)" nil nil)(put 'set-eshell-alias! 'doom-module '(:term . eshell))(autoload '+vterm/toggle "/Users/rnrbarbosa/.emacs.d/modules/term/vterm/autoload" "Toggles a terminal popup window at project root.

If prefix ARG is non-nil, recreate vterm buffer in the current project's root.

(fn ARG)" t nil)(autoload '+vterm/here "/Users/rnrbarbosa/.emacs.d/modules/term/vterm/autoload" "Open a terminal buffer in the current window at project root.

If prefix ARG is non-nil, cd into `default-directory' instead of project root.

(fn ARG)" t nil)(autoload '+vterm-remember-insert-point-h "/Users/rnrbarbosa/.emacs.d/modules/term/vterm/autoload" "Remember point when leaving insert mode." nil nil)(autoload '+vterm-goto-insert-point-h "/Users/rnrbarbosa/.emacs.d/modules/term/vterm/autoload" "Go to the point we were at when we left insert mode." nil nil)(autoload 'set-editorconfig-indent-var! "/Users/rnrbarbosa/.emacs.d/modules/tools/editorconfig/autoload.el" "Add (MODE VARS...) to `editorconfig-indentation-alist'.

(fn MODE &rest VARS)" nil nil)(put 'set-editorconfig-indent-var! 'doom-module '(:tools . editorconfig))(autoload '+eval-display-results-in-popup "/Users/rnrbarbosa/.emacs.d/modules/tools/eval/autoload/eval" "Display OUTPUT in a popup buffer.

(fn OUTPUT &optional SOURCE-BUFFER)" nil nil)(autoload '+eval-display-results-in-overlay "/Users/rnrbarbosa/.emacs.d/modules/tools/eval/autoload/eval" "Display OUTPUT in a floating overlay next to the cursor.

(fn OUTPUT &optional SOURCE-BUFFER)" nil nil)(autoload '+eval-display-results "/Users/rnrbarbosa/.emacs.d/modules/tools/eval/autoload/eval" "Display OUTPUT in an overlay or a popup buffer.

(fn OUTPUT &optional SOURCE-BUFFER)" nil nil)(autoload '+eval/buffer "/Users/rnrbarbosa/.emacs.d/modules/tools/eval/autoload/eval" "Evaluate the whole buffer." t nil)(autoload '+eval/region "/Users/rnrbarbosa/.emacs.d/modules/tools/eval/autoload/eval" "Evaluate a region between BEG and END and display the output.

(fn BEG END)" t nil)(autoload '+eval/line-or-region "/Users/rnrbarbosa/.emacs.d/modules/tools/eval/autoload/eval" "Evaluate the current line or selected region." t nil)(autoload '+eval/buffer-or-region "/Users/rnrbarbosa/.emacs.d/modules/tools/eval/autoload/eval" "Evaluate the whole buffer." t nil)(autoload '+eval/region-and-replace "/Users/rnrbarbosa/.emacs.d/modules/tools/eval/autoload/eval" "Evaluation a region between BEG and END, and replace it with the result.

(fn BEG END)" t nil)(autoload '+eval:region "~/.emacs.d/modules/tools/eval/autoload/evil" nil t)(autoload '+eval:replace-region "~/.emacs.d/modules/tools/eval/autoload/evil" nil t)(autoload '+eval:repl "~/.emacs.d/modules/tools/eval/autoload/evil" nil t)(autoload '+eval/open-repl-same-window "/Users/rnrbarbosa/.emacs.d/modules/tools/eval/autoload/repl" "Opens (or reopens) the REPL associated with the current major-mode and place
the cursor at the prompt.

If ARG (universal argument), prompt for a specific REPL to open.

(fn &optional ARG)" t nil)(autoload '+eval/open-repl-other-window "/Users/rnrbarbosa/.emacs.d/modules/tools/eval/autoload/repl" "Does `+eval/open-repl', but in a popup window.

If ARG (universal argument), prompt for a specific REPL to open.

(fn &optional ARG)" t nil)(autoload '+eval/send-region-to-repl "/Users/rnrbarbosa/.emacs.d/modules/tools/eval/autoload/repl" "Execute the selected region in the REPL.
Opens a REPL if one isn't already open. If AUTO-EXECUTE-P, then execute it
immediately after.

(fn BEG END &optional INHIBIT-AUTO-EXECUTE-P)" t nil)(defvar +eval-runners nil "Alist mapping major modes to interactive runner functions.")(progn (autoload 'set-repl-handler! "/Users/rnrbarbosa/.emacs.d/modules/tools/eval/autoload/settings.el" "Defines a REPL for MODES.

MODES is either a single major mode symbol or a list of them. COMMAND is a
function that creates and returns the REPL buffer.

COMMAND can either be a function that takes no arguments, or an interactive
command that will be called interactively. COMMANDS must return either the repl
buffer or a function that takes no arguments and returns the repl buffer.

PLIST is a property list that map special attributes to this repl. These are
recognized:

  :persist BOOL
    If non-nil, this REPL won't be killed when its window is closed.

(fn MODES COMMAND &rest PLIST)" nil nil) (function-put 'set-repl-handler! 'lisp-indent-function 'defun))(put 'set-repl-handler! 'doom-module '(:tools . eval))(progn (autoload 'set-eval-handler! "/Users/rnrbarbosa/.emacs.d/modules/tools/eval/autoload/settings.el" "Define a code evaluator for major mode MODES with `quickrun'.

MODES can be list of major mode symbols, or a single one.

1. If MODE is a string and COMMAND is the string, MODE is a file regexp and
   COMMAND is a string key for an entry in `quickrun-file-alist'.
2. If MODE is not a string and COMMAND is a string, MODE is a major-mode symbol
   and COMMAND is a key (for `quickrun--language-alist'), and will be registered
   in `quickrun--major-mode-alist'.
3. If MODE is not a string and COMMAND is an alist, see `quickrun-add-command':
   (quickrun-add-command MODE COMMAND :mode MODE).
4. If MODE is not a string and COMMANd is a symbol, add it to
   `+eval-runners', which is used by `+eval/region'.

(fn MODES COMMAND)" nil nil) (function-put 'set-eval-handler! 'lisp-indent-function 'defun))(put 'set-eval-handler! 'doom-module '(:tools . eval))(defmacro set-docsets! (modes &rest docsets) "THIS FUNCTION DOES NOTHING BECAUSE (:tools . lookup) IS DISABLED

Registers a list of DOCSETS for MODES.

MODES can be one major mode, or a list thereof.

DOCSETS can be strings, each representing a dash docset, or a vector with the
structure [DOCSET FORM]. If FORM evaluates to nil, the DOCSET is omitted. If it
is non-nil, (format DOCSET FORM) is used as the docset.

The first element in DOCSETS can be :add or :remove, making it easy for users to
add to or remove default docsets from modes.

DOCSETS can also contain sublists, which will be flattened.

Example:

  (set-docsets! '(js2-mode rjsx-mode) \"JavaScript\"
    [\"React\" (eq major-mode 'rjsx-mode)]
    [\"TypeScript\" (bound-and-true-p tide-mode)])

Used by `+lookup/in-docsets' and `+lookup/documentation'." (ignore modes docsets))(put 'set-docsets! 'doom-module '(:tools . lookup))(autoload '+lookup:online "~/.emacs.d/modules/tools/lookup/autoload/evil" nil t)(autoload '+lookup:dash "~/.emacs.d/modules/tools/lookup/autoload/evil" nil t)(autoload '+lookup/definition "/Users/rnrbarbosa/.emacs.d/modules/tools/lookup/autoload/lookup" "Jump to the definition of IDENTIFIER (defaults to the symbol at point).

Each function in `+lookup-definition-functions' is tried until one changes the
point or current buffer. Falls back to dumb-jump, naive
ripgrep/the_silver_searcher text search, then `evil-goto-definition' if
evil-mode is active.

(fn IDENTIFIER &optional ARG)" t nil)(autoload '+lookup/implementations "/Users/rnrbarbosa/.emacs.d/modules/tools/lookup/autoload/lookup" "Jump to the implementations of IDENTIFIER (defaults to the symbol at point).

Each function in `+lookup-implementations-functions' is tried until one changes
the point or current buffer.

(fn IDENTIFIER &optional ARG)" t nil)(autoload '+lookup/type-definition "/Users/rnrbarbosa/.emacs.d/modules/tools/lookup/autoload/lookup" "Jump to the type definition of IDENTIFIER (defaults to the symbol at point).

Each function in `+lookup-type-definition-functions' is tried until one changes
the point or current buffer.

(fn IDENTIFIER &optional ARG)" t nil)(autoload '+lookup/references "/Users/rnrbarbosa/.emacs.d/modules/tools/lookup/autoload/lookup" "Show a list of usages of IDENTIFIER (defaults to the symbol at point)

Tries each function in `+lookup-references-functions' until one changes the
point and/or current buffer. Falls back to a naive ripgrep/the_silver_searcher
search otherwise.

(fn IDENTIFIER &optional ARG)" t nil)(autoload '+lookup/documentation "/Users/rnrbarbosa/.emacs.d/modules/tools/lookup/autoload/lookup" "Show documentation for IDENTIFIER (defaults to symbol at point or selection.

First attempts the :documentation handler specified with `set-lookup-handlers!'
for the current mode/buffer (if any), then falls back to the backends in
`+lookup-documentation-functions'.

(fn IDENTIFIER &optional ARG)" t nil)(autoload '+lookup/file "/Users/rnrbarbosa/.emacs.d/modules/tools/lookup/autoload/lookup" "Figure out PATH from whatever is at point and open it.

Each function in `+lookup-file-functions' is tried until one changes the point
or the current buffer.

Otherwise, falls back on `find-file-at-point'.

(fn PATH)" t nil)(autoload '+lookup/dictionary-definition "/Users/rnrbarbosa/.emacs.d/modules/tools/lookup/autoload/lookup" "Look up the definition of the word at point (or selection).

(fn IDENTIFIER &optional ARG)" t nil)(autoload '+lookup/synonyms "/Users/rnrbarbosa/.emacs.d/modules/tools/lookup/autoload/lookup" "Look up and insert a synonym for the word at point (or selection).

(fn IDENTIFIER &optional ARG)" t nil)(progn (autoload 'set-lookup-handlers! "/Users/rnrbarbosa/.emacs.d/modules/tools/lookup/autoload/lookup.el" "Define jump handlers for major or minor MODES.

A handler is either an interactive command that changes the current buffer
and/or location of the cursor, or a function that takes one argument: the
identifier being looked up, and returns either nil (failed to find it), t
(succeeded at changing the buffer/moving the cursor), or 'deferred (assume this
handler has succeeded, but expect changes not to be visible yet).

There are several kinds of handlers, which can be defined with the following
properties:

:definition FN
  Run when jumping to a symbol's definition. Used by `+lookup/definition'.
:implementations FN
  Run when looking for implementations of a symbol in the current project. Used
  by `+lookup/implementations'.
:type-definition FN
  Run when jumping to a symbol's type definition. Used by
  `+lookup/type-definition'.
:references FN
  Run when looking for usage references of a symbol in the current project. Used
  by `+lookup/references'.
:documentation FN
  Run when looking up documentation for a symbol. Used by
  `+lookup/documentation'.
:file FN
  Run when looking up the file for a symbol/string. Typically a file path. Used
  by `+lookup/file'.
:xref-backend FN
  Defines an xref backend for a major-mode. A :definition and :references
  handler isn't necessary with a :xref-backend, but will have higher precedence
  if they exist.
:async BOOL
  Indicates that *all* supplied FNs are asynchronous. Note: lookups will not try
  any handlers after async ones, due to their nature. To get around this, you
  must write a specialized wrapper to await the async response, or use a
  different heuristic to determine, ahead of time, whether the async call will
  succeed or not.

  If you only want to specify one FN is async, declare it inline instead:

    (set-lookup-handlers! 'rust-mode
      :definition '(racer-find-definition :async t))

Handlers can either be interactive or non-interactive. Non-interactive handlers
must take one argument: the identifier being looked up. This function must
change the current buffer or window or return non-nil when it succeeds.

If it doesn't change the current buffer, or it returns nil, the lookup module
will fall back to the next handler in `+lookup-definition-functions',
`+lookup-implementations-functions', `+lookup-type-definition-functions',
`+lookup-references-functions', `+lookup-file-functions' or
`+lookup-documentation-functions'.

Consecutive `set-lookup-handlers!' calls will overwrite previously defined
handlers for MODES. If used on minor modes, they are stacked onto handlers
defined for other minor modes or the major mode it's activated in.

This can be passed nil as its second argument to unset handlers for MODES. e.g.

  (set-lookup-handlers! 'python-mode nil)

(fn MODES &key DEFINITION IMPLEMENTATIONS TYPE-DEFINITION REFERENCES DOCUMENTATION FILE XREF-BACKEND ASYNC)" nil nil) (function-put 'set-lookup-handlers! 'lisp-indent-function 'defun))(put 'set-lookup-handlers! 'doom-module '(:tools . lookup))(autoload '+lookup-online-backend-fn "/Users/rnrbarbosa/.emacs.d/modules/tools/lookup/autoload/online" "Open the browser and search for IDENTIFIER online.
When called for the first time, or with a non-nil prefix argument, prompt for
the search engine to use.

(fn IDENTIFIER)" nil nil)(autoload '+lookup/online "/Users/rnrbarbosa/.emacs.d/modules/tools/lookup/autoload/online" "Look up QUERY in the browser using PROVIDER.
When called interactively, prompt for a query and, when called for the first
time, the provider from `+lookup-provider-url-alist'. In subsequent calls, reuse
the previous provider. With a non-nil prefix argument, always prompt for the
provider.

QUERY must be a string, and PROVIDER must be a key of
`+lookup-provider-url-alist'.

(fn QUERY PROVIDER)" t nil)(autoload '+lookup/online-select "/Users/rnrbarbosa/.emacs.d/modules/tools/lookup/autoload/online" "Run `+lookup/online', but always prompt for the provider to use." t nil)(autoload '+lookup--online-backend-google "/Users/rnrbarbosa/.emacs.d/modules/tools/lookup/autoload/online" "Search Google, starting with QUERY, with live autocompletion.

(fn QUERY)" nil nil)(autoload '+lookup--online-backend-duckduckgo "/Users/rnrbarbosa/.emacs.d/modules/tools/lookup/autoload/online" "Search DuckDuckGo, starting with QUERY, with live autocompletion.

(fn QUERY)" nil nil)(autoload '+lookup-xwidget-webkit-open-url-fn "/Users/rnrbarbosa/.emacs.d/modules/tools/lookup/autoload/xwidget" "

(fn URL &optional NEW-SESSION)" nil nil)(defmacro lsp! nil "THIS FUNCTION DOES NOTHING BECAUSE (:tools . lsp) IS DISABLED

Dispatch to call the currently used lsp client entrypoint")(put 'lsp! 'doom-module '(:tools . lsp))(defmacro set-eglot-client! (mode server-call) "THIS FUNCTION DOES NOTHING BECAUSE (:tools . lsp) IS DISABLED

Add SERVER-CALL list as a possible lsp server for given major MODE.

Example : (set-eglot-client! 'python-mode `(,(concat doom-etc-dir \"lsp/mspyls/Microsoft.Python.LanguageServer\")))" (ignore mode server-call))(put 'set-eglot-client! 'doom-module '(:tools . lsp))(defmacro set-lsp-priority! (client priority) "THIS FUNCTION DOES NOTHING BECAUSE (:tools . lsp) IS DISABLED

Change the PRIORITY of lsp CLIENT." (ignore client priority))(put 'set-lsp-priority! 'doom-module '(:tools . lsp))(eval-when! IS-WINDOWS (defadvice! +magit--ignore-version-a (&optional print-dest) :override #'magit-version (when print-dest (defvar magit-git-debug) (princ (format "Magit (unknown), Git %s, Emacs %s, %s" (or (let ((magit-git-debug (lambda (err) (display-warning '(magit git) err :error)))) (magit-git-version t)) "(unknown)") emacs-version system-type) print-dest)) nil))(autoload '+magit-display-buffer-fn "/Users/rnrbarbosa/.emacs.d/modules/tools/magit/autoload" "Same as `magit-display-buffer-traditional', except...

- If opened from a commit window, it will open below it.
- Magit process windows are always opened in small windows below the current.
- Everything else will reuse the same window.

(fn BUFFER)" nil nil)(autoload '+magit-mark-stale-buffers-h "/Users/rnrbarbosa/.emacs.d/modules/tools/magit/autoload" "Revert all visible buffers and mark buried buffers as stale.

Stale buffers are reverted when they are switched to, assuming they haven't been
modified." nil nil)(autoload '+magit-revert-buffer-maybe-h "/Users/rnrbarbosa/.emacs.d/modules/tools/magit/autoload" "Update `vc' and `git-gutter' if out of date." nil nil)(autoload '+magit/quit "/Users/rnrbarbosa/.emacs.d/modules/tools/magit/autoload" "Clean up magit buffers after quitting `magit-status' and refresh version
control in buffers.

(fn &optional KILL-BUFFER)" t nil)(autoload '+magit/start-github-review "/Users/rnrbarbosa/.emacs.d/modules/tools/magit/autoload" "

(fn ARG)" t nil)(autoload '+magit/clone "/Users/rnrbarbosa/.emacs.d/modules/tools/magit/autoload" "Like `magit-clone', but supports additional formats on top of absolute URLs:

+ USER/REPO: assumes {`+magit-default-clone-url'}/USER/REPO
+ REPO: assumes {`+magit-default-clone-url'}/{USER}/REPO, where {USER} is
  ascertained from your global gitconfig.

(fn URL-OR-REPO DIR)" t nil)(autoload '+make/run "/Users/rnrbarbosa/.emacs.d/modules/tools/make/autoload" "Run a make task in the current project. If multiple makefiles are available,
you'll be prompted to select one." t nil)(autoload '+make/run-last "/Users/rnrbarbosa/.emacs.d/modules/tools/make/autoload" "TODO" t nil)(autoload 'auth-source-pass-parse-entry "~/.emacs.d/.local/straight/build/auth-source-pass/auth-source-pass")(defalias '+pass-get-entry #'auth-source-pass-parse-entry)(autoload '+pass-get-field "/Users/rnrbarbosa/.emacs.d/modules/tools/pass/autoload" "Fetches the value of a field. FIELDS can be a list of string field names or a
single one. If a list, the first field found will be returned. Will error out
otherwise, unless NOERROR is non-nill.

(fn ENTRY FIELDS &optional NOERROR)" nil nil)(autoload '+pass-get-user "/Users/rnrbarbosa/.emacs.d/modules/tools/pass/autoload" "Fetches the user field from ENTRY. Each of `+pass-user-fields' are tried in
search of your username. May prompt for your gpg passphrase.

(fn ENTRY)" nil nil)(autoload '+pass-get-secret "/Users/rnrbarbosa/.emacs.d/modules/tools/pass/autoload" "Fetches your secret from ENTRY. May prompt for your gpg passphrase.

(fn ENTRY)" nil nil)(autoload 'password-store-dir "~/.emacs.d/.local/straight/build/password-store/password-store")(autoload 'password-store-list "~/.emacs.d/.local/straight/build/password-store/password-store")(autoload 'password-store--completing-read "~/.emacs.d/.local/straight/build/password-store/password-store")(autoload '+pass/edit-entry "/Users/rnrbarbosa/.emacs.d/modules/tools/pass/autoload" "Interactively search for and open a pass entry for editing.

(fn ENTRY)" t nil)(autoload '+pass/copy-field "/Users/rnrbarbosa/.emacs.d/modules/tools/pass/autoload" "Interactively search for an entry and copy a particular field to your
clipboard.

(fn ENTRY)" t nil)(autoload '+pass/copy-secret "/Users/rnrbarbosa/.emacs.d/modules/tools/pass/autoload" "Interactively search for an entry and copy its secret/password to your
clipboard.

(fn ENTRY)" t nil)(autoload '+pass/copy-user "/Users/rnrbarbosa/.emacs.d/modules/tools/pass/autoload" "Interactively search for an entry and copy the login to your clipboard. The
fields in `+pass-user-fields' is used to find the login field.

(fn ENTRY)" t nil)(autoload '+pass/browse-url "/Users/rnrbarbosa/.emacs.d/modules/tools/pass/autoload" "Interactively search for an entry and open its url in your browser. The
fields in `+pass-url-fields' is used to find the url field.

(fn ENTRY)" t nil)(autoload '+pass/ivy "/Users/rnrbarbosa/.emacs.d/modules/tools/pass/autoload" "TODO

(fn ARG)" t nil)(autoload '+pdf--supply-width-to-create-image-calls-a "/Users/rnrbarbosa/.emacs.d/modules/tools/pdf/autoload/pdf" "

(fn ORIG-FN &rest ARGS)" nil nil)(autoload '+pdf--util-frame-scale-factor-a "/Users/rnrbarbosa/.emacs.d/modules/tools/pdf/autoload/pdf" "

(fn ORIG-FN)" nil nil)(autoload '+pdf--view-use-scaling-p-a "/Users/rnrbarbosa/.emacs.d/modules/tools/pdf/autoload/pdf" "Returns t if on ns window-system on Emacs 27+." nil nil)(autoload '+taskrunner/project-tasks "/Users/rnrbarbosa/.emacs.d/modules/tools/taskrunner/autoload" "Invokes `ivy-taskrunner' or `helm-tasksrunner', depending on which is
available." t nil)(autoload '+tmux:run "~/.emacs.d/modules/tools/tmux/autoload/evil" nil t)(autoload '+tmux:cd-here "~/.emacs.d/modules/tools/tmux/autoload/evil" nil t)(autoload '+tmux "/Users/rnrbarbosa/.emacs.d/modules/tools/tmux/autoload/tmux" "Execute COMMAND in tmux

(fn COMMAND &rest ARGS)" nil nil)(autoload '+tmux/run "/Users/rnrbarbosa/.emacs.d/modules/tools/tmux/autoload/tmux" "Run COMMAND in tmux. If NORETURN is non-nil, send the commands as keypresses
but do not execute them.

(fn COMMAND &optional NORETURN)" t nil)(autoload '+tmux/send-region "/Users/rnrbarbosa/.emacs.d/modules/tools/tmux/autoload/tmux" "Send region to tmux.

(fn BEG END &optional NORETURN)" t nil)(autoload '+tmux/rerun "/Users/rnrbarbosa/.emacs.d/modules/tools/tmux/autoload/tmux" "Rerun the last command executed by `+tmux' and `+tmux/run'." t nil)(autoload '+tmux/cd "/Users/rnrbarbosa/.emacs.d/modules/tools/tmux/autoload/tmux" "Change the pwd of the currently active tmux pane to DIRECTORY (defaults to
`default-directory', or to `doom-project-root' with the universal argument).

(fn &optional ARG DIRECTORY)" t nil)(autoload '+tmux/cd-to-here "/Users/rnrbarbosa/.emacs.d/modules/tools/tmux/autoload/tmux" "cd into `default-directory' in tmux." t nil)(autoload '+tmux/cd-to-project "/Users/rnrbarbosa/.emacs.d/modules/tools/tmux/autoload/tmux" "cd into `doom-project-root' in tmux." t nil)(autoload '+tmux-list-sessions "/Users/rnrbarbosa/.emacs.d/modules/tools/tmux/autoload/tmux" nil nil nil)(autoload '+tmux-list-windows "/Users/rnrbarbosa/.emacs.d/modules/tools/tmux/autoload/tmux" "

(fn &optional SESSION)" nil nil)(autoload '+tmux-list-panes "/Users/rnrbarbosa/.emacs.d/modules/tools/tmux/autoload/tmux" "

(fn &optional SESS-OR-WIN)" nil nil)(autoload '+doom-dashboard/open "/Users/rnrbarbosa/.emacs.d/modules/ui/doom-dashboard/autoload" "Switch to the dashboard in the current window, of the current FRAME.

(fn FRAME)" t nil)(autoload '+doom-dashboard/forward-button "/Users/rnrbarbosa/.emacs.d/modules/ui/doom-dashboard/autoload" "Like `forward-button', but don't wrap.

(fn N)" t nil)(autoload '+doom-dashboard/backward-button "/Users/rnrbarbosa/.emacs.d/modules/ui/doom-dashboard/autoload" "Like `backward-button', but don't wrap.

(fn N)" t nil)(autoload '+hydra/text-zoom/body "~/.emacs.d/modules/ui/hydra/autoload/windows" nil t)(autoload '+hydra/window-nav/body "~/.emacs.d/modules/ui/hydra/autoload/windows" nil t)(define-obsolete-function-alias 'set-pretty-symbols! 'set-ligatures! "3.0.0")(progn (autoload 'set-ligatures! "/Users/rnrbarbosa/.emacs.d/modules/ui/ligatures/autoload/ligatures.el" "Associates string patterns with icons in certain major-modes.

  MODES is a major mode symbol or a list of them.
  PLIST is a property list whose keys must match keys in
`+ligatures-extra-symbols', and whose values are strings representing the text
to be replaced with that symbol. If the car of PLIST is nil, then unset any
pretty symbols previously defined for MODES.

This function accepts one special property:

  :alist ALIST
    Appends ALIST to `prettify-symbols-alist' literally, without mapping text to
    `+ligatures-extra-symbols'.

For example, the rule for emacs-lisp-mode is very simple:

  (set-ligatures! 'emacs-lisp-mode
    :lambda \"lambda\")

This will replace any instances of \"lambda\" in emacs-lisp-mode with the symbol
assicated with :lambda in `+ligatures-extra-symbols'.

Pretty symbols can be unset for emacs-lisp-mode with:

  (set-ligatures! 'emacs-lisp-mode nil)

(fn MODES &rest PLIST)" nil nil) (function-put 'set-ligatures! 'lisp-indent-function 'defun))(put 'set-ligatures! 'doom-module '(:ui . ligatures))(autoload '+modeline-resize-for-font-h "/Users/rnrbarbosa/.emacs.d/modules/ui/modeline/autoload" "Adjust the modeline's height when the font size is changed by
`doom/increase-font-size' or `doom/decrease-font-size'.

Meant for `doom-change-font-size-hook'." nil nil)(autoload '+modeline-update-env-in-all-windows-h "/Users/rnrbarbosa/.emacs.d/modules/ui/modeline/autoload" "Update version strings in all buffers.

(fn &rest _)" nil nil)(autoload '+modeline-clear-env-in-all-windows-h "/Users/rnrbarbosa/.emacs.d/modules/ui/modeline/autoload" "Blank out version strings in all buffers.

(fn &rest _)" nil nil)(autoload '+neotree/open "/Users/rnrbarbosa/.emacs.d/modules/ui/neotree/autoload" "Open the neotree window in the current project." t nil)(autoload '+neotree/find-this-file "/Users/rnrbarbosa/.emacs.d/modules/ui/neotree/autoload" "Open the neotree window in the current project, and find the current file." t nil)(autoload '+neotree/collapse-or-up "/Users/rnrbarbosa/.emacs.d/modules/ui/neotree/autoload" "Collapse an expanded directory node or go to the parent node." t nil)(autoload '+neotree/collapse "/Users/rnrbarbosa/.emacs.d/modules/ui/neotree/autoload" "Collapse a neotree node." t nil)(autoload '+neotree/expand-or-open "/Users/rnrbarbosa/.emacs.d/modules/ui/neotree/autoload" "Expand or open a neotree node." t nil)(autoload '+popup--init "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Initializes a popup window. Run any time a popup is opened. It sets the
default window parameters for popup windows, clears leftover transient timers
and enables `+popup-buffer-mode'.

(fn WINDOW &optional ALIST)" nil nil)(autoload '+popup-buffer-p "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Return non-nil if BUFFER is a popup buffer. Defaults to the current buffer.

(fn &optional BUFFER)" nil nil)(autoload '+popup-window-p "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Return non-nil if WINDOW is a popup window. Defaults to the current window.

(fn &optional WINDOW)" nil nil)(autoload '+popup-buffer "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Open BUFFER in a popup window. ALIST describes its features.

(fn BUFFER &optional ALIST)" nil nil)(autoload '+popup-parameter "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Fetch the window PARAMETER (symbol) of WINDOW

(fn PARAMETER &optional WINDOW)" nil nil)(autoload '+popup-parameter-fn "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Fetch the window PARAMETER (symbol) of WINDOW. If it is a function, run it
with ARGS to get its return value.

(fn PARAMETER &optional WINDOW &rest ARGS)" nil nil)(autoload '+popup-windows "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Returns a list of all popup windows." nil nil)(autoload '+popup-shrink-to-fit "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Shrinks WINDOW to fit the buffer contents, if the buffer isn't empty.

Uses `shrink-window-if-larger-than-buffer'.

(fn &optional WINDOW)" nil nil)(autoload '+popup-alist-from-window-state "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Convert window STATE (from `window-state-get') to a `display-buffer' alist.

(fn STATE)" nil nil)(autoload '+popup-adjust-fringes-h "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Hides the fringe in popup windows, restoring them if `+popup-buffer-mode' is
disabled." nil nil)(autoload '+popup-adjust-margins-h "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Creates padding for the popup window determined by `+popup-margin-width',
restoring it if `+popup-buffer-mode' is disabled." nil nil)(autoload '+popup-set-modeline-on-enable-h "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Don't show modeline in popup windows without a `modeline' window-parameter.
Possible values for this parameter are:

  t            show the mode-line as normal
  nil          hide the modeline entirely (the default)
  a function   `mode-line-format' is set to its return value

Any non-nil value besides the above will be used as the raw value for
`mode-line-format'." nil nil)(autoload '+popup-unset-modeline-on-disable-h "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Restore the modeline when `+popup-buffer-mode' is deactivated." nil nil)(autoload '+popup-close-on-escape-h "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "If called inside a popup, try to close that popup window (see
`+popup/close'). If called outside, try to close all popup windows (see
`+popup/close-all')." nil nil)(autoload '+popup-cleanup-rules-h "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Cleans up any duplicate popup rules." t nil)(autoload '+popup-kill-buffer-hook-h "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "TODO" nil nil)(defalias 'other-popup #'+popup/other)(autoload '+popup/buffer "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Open this buffer in a popup window." t nil)(autoload '+popup/other "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Cycle through popup windows, like `other-window'. Ignores regular windows." t nil)(autoload '+popup/close "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Close WINDOW, if it's a popup window.

This will do nothing if the popup's `quit' window parameter is either nil or
'other. This window parameter is ignored if FORCE-P is non-nil.

(fn &optional WINDOW FORCE-P)" t nil)(autoload '+popup/close-all "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Close all open popup windows.

This will ignore popups with an `quit' parameter that is either nil or 'current.
This window parameter is ignored if FORCE-P is non-nil.

(fn &optional FORCE-P)" t nil)(autoload '+popup/toggle "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Toggle any visible popups.
If no popups are available, display the *Messages* buffer in a popup window." t nil)(autoload '+popup/restore "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Restore the last popups that were closed, if any." t nil)(autoload '+popup/raise "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Raise the current popup window into a regular window and
return it. If prefix ARG, raise the current popup into a new
window and return that window.

(fn WINDOW &optional ARG)" t nil)(autoload '+popup/diagnose "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Reveal what popup rule will be used for the current buffer." t nil)(autoload '+popup-close-a "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "TODO

(fn &rest _)" nil nil)(autoload '+popup-save-a "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Sets aside all popups before executing the original function, usually to
prevent the popup(s) from messing up the UI (or vice versa).

(fn ORIG-FN &rest ARGS)" nil nil)(autoload '+popup-display-buffer-fullframe-fn "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "Displays the buffer fullscreen.

(fn BUFFER ALIST)" nil nil)(autoload '+popup-display-buffer-stacked-side-window-fn "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/popup" "A `display-buffer' action that serves as an alternative to
`display-buffer-in-side-window', but allows for stacking popups with the `vslot'
alist entry.

Accepts the same arguments as `display-buffer-in-side-window'. You must set
`window--sides-inhibit-check' to non-nil for this work properly.

(fn BUFFER ALIST)" nil nil)(defvar +popup--display-buffer-alist nil)(defvar +popup-defaults (list :side 'bottom :height 0.16 :width 40 :quit t :select #'ignore :ttl 5) "Default properties for popup rules defined with `set-popup-rule!'.")(autoload '+popup-make-rule "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/settings" "

(fn PREDICATE PLIST)" nil nil)(progn (autoload 'set-popup-rule! "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/settings.el" "Define a popup rule.

These rules affect buffers displayed with `pop-to-buffer' and `display-buffer'
(or their siblings). Buffers displayed with `switch-to-buffer' (and its
variants) will not be affected by these rules (as they are unaffected by
`display-buffer-alist', which powers the popup management system).

PREDICATE can be either a) a regexp string (matched against the buffer's name)
or b) a function that takes two arguments (a buffer name and the ACTION argument
of `display-buffer') and returns a boolean.

PLIST can be made up of any of the following properties:

:ignore BOOL
  If BOOL is non-nil, popups matching PREDICATE will not be handled by the popup
  system. Use this for buffers that have their own window management system like
  magit or helm.

:actions ACTIONS
  ACTIONS is a list of functions or an alist containing (FUNCTION . ALIST). See
  `display-buffer''s second argument for more information on its format and what
  it accepts. If omitted, `+popup-default-display-buffer-actions' is used.

:side 'bottom|'top|'left|'right
  Which side of the frame to open the popup on. This is only respected if
  `+popup-display-buffer-stacked-side-window-fn' or `display-buffer-in-side-window'
  is in :actions or `+popup-default-display-buffer-actions'.

:size/:width/:height FLOAT|INT|FN
  Determines the size of the popup. If more than one of these size properties are
  given :size always takes precedence, and is mapped with window-width or
  window-height depending on what :side the popup is opened. Setting a height
  for a popup that opens on the left or right is harmless, but comes into play
  if two popups occupy the same :vslot.

  If a FLOAT (0 < x < 1), the number represents how much of the window will be
    consumed by the popup (a percentage).
  If an INT, the number determines the size in lines (height) or units of
    character width (width).
  If a function, it takes one argument: the popup window, and can do whatever it
    wants with it, typically resize it, like `+popup-shrink-to-fit'.

:slot/:vslot INT
  (This only applies to popups with a :side and only if :actions is blank or
  contains the `+popup-display-buffer-stacked-side-window-fn' action) These control
  how multiple popups are laid out. INT can be any integer, positive and
  negative.

  :slot controls lateral positioning (e.g. the horizontal positioning for
    top/bottom popups, or vertical positioning for left/right popups).
  :vslot controls popup stacking (from the edge of the frame toward the center).

  Let's assume popup A and B are opened with :side 'bottom, in that order.
    If they possess the same :slot and :vslot, popup B will replace popup A.
    If popup B has a higher :slot, it will open to the right of popup A.
    If popup B has a lower :slot, it will open to the left of popup A.
    If popup B has a higher :vslot, it will open above popup A.
    If popup B has a lower :vslot, it will open below popup A.

:ttl INT|BOOL|FN
  Stands for time-to-live. It can be t, an integer, nil or a function. This
  controls how (and if) the popup system will clean up after the popup.

  If any non-zero integer, wait that many seconds before killing the buffer (and
    any associated processes).
  If 0, the buffer is immediately killed.
  If nil, the buffer won't be killed and is left to its own devices.
  If t, resort to the default :ttl in `+popup-defaults'. If none exists, this is
    the same as nil.
  If a function, it takes one argument: the target popup buffer. The popup
    system does nothing else and ignores the function's return value.

:quit FN|BOOL|'other|'current
  Can be t, 'other, 'current, nil, or a function. This determines the behavior
  of the ESC/C-g keys in or outside of popup windows.

  If t, close the popup if ESC/C-g is pressed anywhere.
  If 'other, close this popup if ESC/C-g is pressed outside of any popup. This
    is great for popups you may press ESC/C-g a lot in.
  If 'current, close the current popup if ESC/C-g is pressed from inside of the
    popup. This makes it harder to accidentally close a popup until you really
    want to.
  If nil, pressing ESC/C-g will never close this popup.
  If a function, it takes one argument: the to-be-closed popup window, and is
    run when ESC/C-g is pressed while that popup is open. It must return one of
    the other values to determine the fate of the popup.

:select BOOL|FN
  Can be a boolean or function. The boolean determines whether to focus the
  popup window after it opens (non-nil) or focus the origin window (nil).

  If a function, it takes two arguments: the popup window and originating window
    (where you were before the popup opened). The popup system does nothing else
    and ignores the function's return value.

:modeline BOOL|FN|LIST
  Can be t (show the default modeline), nil (show no modeline), a function that
  returns a modeline format or a valid value for `mode-line-format' to be used
  verbatim. The function takes no arguments and is run in the context of the
  popup buffer.

:autosave BOOL|FN
  This parameter determines what to do with modified buffers when closing popup
  windows. It accepts t, 'ignore, a function or nil.

  If t, no prompts. Just save them automatically (if they're file-visiting
    buffers). Same as 'ignore for non-file-visiting buffers.
  If nil (the default), prompt the user what to do if the buffer is
    file-visiting and modified.
  If 'ignore, no prompts, no saving. Just silently kill it.
  If a function, it is run with one argument: the popup buffer, and must return
    non-nil to save or nil to do nothing (but no prompts).

:parameters ALIST
  An alist of custom window parameters. See `(elisp)Window Parameters'.

If any of these are omitted, defaults derived from `+popup-defaults' will be
used.

(fn PREDICATE &key IGNORE ACTIONS SIDE SIZE WIDTH HEIGHT SLOT VSLOT TTL QUIT SELECT MODELINE AUTOSAVE PARAMETERS)" nil nil) (function-put 'set-popup-rule! 'lisp-indent-function 'defun))(put 'set-popup-rule! 'doom-module '(:ui . popup))(progn (autoload 'set-popup-rules! "/Users/rnrbarbosa/.emacs.d/modules/ui/popup/autoload/settings.el" "Defines multiple popup rules.

Every entry in RULESETS should be a list of alists where the CAR is the
predicate and CDR is a plist. See `set-popup-rule!' for details on the predicate
and plist.

Example:

  (set-popup-rules!
    '((\"^ \\*\" :slot 1 :vslot -1 :size #'+popup-shrink-to-fit)
      (\"^\\*\"  :slot 1 :vslot -1 :select t))
    '((\"^\\*Completions\" :slot -1 :vslot -2 :ttl 0)
      (\"^\\*Compil\\(?:ation\\|e-Log\\)\" :size 0.3 :ttl 0 :quit t)))

(fn &rest RULESETS)" nil nil) (function-put 'set-popup-rules! 'lisp-indent-function '0))(put 'set-popup-rules! 'doom-module '(:ui . popup))(add-hook! 'doom-init-ui-hook (defun +unicode-init-fonts-h nil "Set up `unicode-fonts' to eventually run; accommodating the daemon, if
necessary." (setq-default bidi-display-reordering t doom-unicode-font nil) (if (display-graphic-p) (+unicode-setup-fonts-h (selected-frame)) (add-hook 'after-make-frame-functions #'+unicode-setup-fonts-h))))(autoload '+unicode-setup-fonts-h "/Users/rnrbarbosa/.emacs.d/modules/ui/unicode/autoload" "Initialize `unicode-fonts', if in a GUI session.

If doom-unicode-font is set, add it as preferred font for all unicode blocks.

(fn &optional FRAME)" nil nil)(autoload '+vc/gutter-hydra/body "~/.emacs.d/modules/ui/vc-gutter/autoload" nil t)(add-hook! '(prog-mode-hook text-mode-hook conf-mode-hook) #'vi-tilde-fringe-mode)(autoload '+workspace:save "~/.emacs.d/modules/ui/workspaces/autoload/evil" nil t)(autoload '+workspace:load "~/.emacs.d/modules/ui/workspaces/autoload/evil" nil t)(autoload '+workspace:new "~/.emacs.d/modules/ui/workspaces/autoload/evil" nil t)(autoload '+workspace:rename "~/.emacs.d/modules/ui/workspaces/autoload/evil" nil t)(autoload '+workspace:delete "~/.emacs.d/modules/ui/workspaces/autoload/evil" nil t)(autoload '+workspace:switch-next "~/.emacs.d/modules/ui/workspaces/autoload/evil" nil t)(autoload '+workspace:switch-previous "~/.emacs.d/modules/ui/workspaces/autoload/evil" nil t)(defface +workspace-tab-selected-face '((t (:inherit highlight))) "The face for selected tabs displayed by `+workspace/display'" :group 'persp-mode)(defface +workspace-tab-face '((t (:inherit default))) "The face for selected tabs displayed by `+workspace/display'" :group 'persp-mode)(defalias #'+workspace-p #'perspective-p "Return t if OBJ is a perspective hash table.")(autoload '+workspace-exists-p "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Returns t if NAME is the name of an existing workspace.

(fn NAME)" nil nil)(defalias #'+workspace-contains-buffer-p #'persp-contain-buffer-p "Return non-nil if BUFFER is in WORKSPACE (defaults to current workspace).")(defalias #'+workspace-current #'get-current-persp "Return the currently active workspace.")(autoload '+workspace-get "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Return a workspace named NAME. Unless NOERROR is non-nil, this throws an
error if NAME doesn't exist.

(fn NAME &optional NOERROR)" nil nil)(autoload '+workspace-current-name "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Get the name of the current workspace." nil nil)(autoload '+workspace-list "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Return a list of workspace structs (satisifes `+workspace-p')." nil nil)(autoload '+workspace-list-names "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Return the list of names of open workspaces." nil nil)(autoload '+workspace-buffer-list "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Return a list of buffers in PERSP.

PERSP can be a string (name of a workspace) or a workspace (satisfies
`+workspace-p'). If nil or omitted, it defaults to the current workspace.

(fn &optional PERSP)" nil nil)(autoload '+workspace-orphaned-buffer-list "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Return a list of buffers that aren't associated with any perspective." nil nil)(autoload '+workspace-load "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Loads a single workspace (named NAME) into the current session. Can only
retrieve perspectives that were explicitly saved with `+workspace-save'.

Returns t if successful, nil otherwise.

(fn NAME)" nil nil)(autoload '+workspace-save "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Saves a single workspace (NAME) from the current session. Can be loaded again
with `+workspace-load'. NAME can be the string name of a workspace or its
perspective hash table.

Returns t on success, nil otherwise.

(fn NAME)" nil nil)(autoload '+workspace-new "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Create a new workspace named NAME. If one already exists, return nil.
Otherwise return t on success, nil otherwise.

(fn NAME)" nil nil)(autoload '+workspace-rename "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Rename the current workspace named NAME to NEW-NAME. Returns old name on
success, nil otherwise.

(fn NAME NEW-NAME)" nil nil)(autoload '+workspace-delete "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Delete the workspace denoted by WORKSPACE, which can be the name of a perspective
or its hash table. If INHIBIT-KILL-P is non-nil, don't kill this workspace's
buffers.

(fn WORKSPACE &optional INHIBIT-KILL-P)" nil nil)(autoload '+workspace-switch "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Switch to another workspace named NAME (a string).

If AUTO-CREATE-P is non-nil, create the workspace if it doesn't exist, otherwise
throws an error.

(fn NAME &optional AUTO-CREATE-P)" nil nil)(defalias '+workspace/restore-last-session #'doom/quickload-session)(autoload '+workspace/load "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Load a workspace and switch to it. If called with C-u, try to reload the
current workspace (by name) from session files.

(fn NAME)" t nil)(autoload '+workspace/save "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Save the current workspace. If called with C-u, autosave the current
workspace.

(fn NAME)" t nil)(autoload '+workspace/rename "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Rename the current workspace.

(fn NEW-NAME)" t nil)(autoload '+workspace/delete "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Delete this workspace. If called with C-u, prompts you for the name of the
workspace to delete.

(fn NAME)" t nil)(autoload '+workspace/kill-session "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Delete the current session, all workspaces, windows and their buffers.

(fn &optional INTERACTIVE)" t nil)(autoload '+workspace/kill-session-and-quit "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Kill emacs without saving anything." t nil)(autoload '+workspace/new "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Create a new workspace named NAME. If CLONE-P is non-nil, clone the current
workspace, otherwise the new workspace is blank.

(fn &optional NAME CLONE-P)" t nil)(autoload '+workspace/switch-to "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Switch to a workspace at a given INDEX. A negative number will start from the
end of the workspace list.

(fn INDEX)" t nil)(dotimes (i 9) (defalias (intern (format "+workspace/switch-to-%d" i)) (lambda nil (interactive) (+workspace/switch-to i)) (format "Switch to workspace #%d" (1+ i))))(autoload '+workspace/switch-to-final "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Switch to the final workspace in open workspaces." t nil)(autoload '+workspace/other "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Switch to the last activated workspace." t nil)(autoload '+workspace/cycle "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Cycle n workspaces to the right (default) or left.

(fn N)" t nil)(autoload '+workspace/switch-left "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" nil t nil)(autoload '+workspace/switch-right "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" nil t nil)(autoload '+workspace/close-window-or-workspace "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Close the selected window. If it's the last window in the workspace, either
close the workspace (as well as its associated frame, if one exists) and move to
the next." t nil)(autoload '+workspace/swap-left "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Swap the current workspace with the COUNTth workspace on its left.

(fn &optional COUNT)" t nil)(autoload '+workspace/swap-right "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Swap the current workspace with the COUNTth workspace on its right.

(fn &optional COUNT)" t nil)(autoload '+workspace-message "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Show an 'elegant' message in the echo area next to a listing of workspaces.

(fn MESSAGE &optional TYPE)" nil nil)(autoload '+workspace-error "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Show an 'elegant' error in the echo area next to a listing of workspaces.

(fn MESSAGE &optional NOERROR)" nil nil)(autoload '+workspace/display "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Display a list of workspaces (like tabs) in the echo area." t nil)(autoload '+workspaces-delete-associated-workspace-h "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Delete workspace associated with current frame.
A workspace gets associated with a frame when a new frame is interactively
created.

(fn &optional FRAME)" nil nil)(autoload '+workspaces-associate-frame-fn "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Create a blank, new perspective and associate it with FRAME.

(fn FRAME &optional NEW-FRAME-P)" nil nil)(autoload '+workspaces-set-project-action-fn "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "A `projectile-switch-project-action' that sets the project directory for
`+workspaces-switch-to-project-h'." nil nil)(autoload '+workspaces-switch-to-project-h "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Creates a workspace dedicated to a new project. If one already exists, switch
to it. If in the main workspace and it's empty, recycle that workspace, without
renaming it.

Afterwords, runs `+workspaces-switch-project-function'. By default, this prompts
the user to open a file in the new project.

This be hooked to `projectile-after-switch-project-hook'.

(fn &optional DIR)" nil nil)(autoload '+workspaces-autosave-real-buffers-a "/Users/rnrbarbosa/.emacs.d/modules/ui/workspaces/autoload/workspaces" "Don't autosave if no real buffers are open.

(fn ORIG-FN &rest ARGS)" nil nil)(autoload 'straight-get-recipe "straight" "Interactively select a recipe from one of the recipe repositories.
All recipe repositories in `straight-recipe-repositories' will
first be cloned. After the recipe is selected, it will be copied
to the kill ring. With a prefix argument, first prompt for a
recipe repository to search. Only that repository will be
cloned.

From Lisp code, SOURCES should be a subset of the symbols in
`straight-recipe-repositories'. Only those recipe repositories
are cloned and searched. If it is nil or omitted, then the value
of `straight-recipe-repositories' is used. If SOURCES is the
symbol `interactive', then the user is prompted to select a
recipe repository, and a list containing that recipe repository
is used for the value of SOURCES. ACTION may be `copy' (copy
recipe to the kill ring), `insert' (insert at point), or nil (no
action, just return it).

(fn &optional SOURCES ACTION)" t nil)(autoload 'straight-visit-package-website "straight" "Interactively select a recipe, and visit the package's website." t nil)(autoload 'straight-use-package "straight" "Register, clone, build, and activate a package and its dependencies.
This is the main entry point to the functionality of straight.el.

MELPA-STYLE-RECIPE is either a symbol naming a package, or a list
whose car is a symbol naming a package and whose cdr is a
property list containing e.g. `:type', `:local-repo', `:files',
and VC backend specific keywords.

First, the package recipe is registered with straight.el. If
NO-CLONE is a function, then it is called with two arguments: the
package name as a string, and a boolean value indicating whether
the local repository for the package is available. In that case,
the return value of the function is used as the value of NO-CLONE
instead. In any case, if NO-CLONE is non-nil, then processing
stops here.

Otherwise, the repository is cloned, if it is missing. If
NO-BUILD is a function, then it is called with one argument: the
package name as a string. In that case, the return value of the
function is used as the value of NO-BUILD instead. In any case,
if NO-BUILD is non-nil, then processing halts here. Otherwise,
the package is built and activated. Note that if the package
recipe has a non-nil `:no-build' entry, then NO-BUILD is ignored
and processing always stops before building and activation
occurs.

CAUSE is a string explaining the reason why
`straight-use-package' has been called. It is for internal use
only, and is used to construct progress messages. INTERACTIVE is
non-nil if the function has been called interactively. It is for
internal use only, and is used to determine whether to show a
hint about how to install the package permanently.

Return non-nil if package was actually installed, and nil
otherwise (this can only happen if NO-CLONE is non-nil).

(fn MELPA-STYLE-RECIPE &optional NO-CLONE NO-BUILD CAUSE INTERACTIVE)" t nil)(autoload 'straight-register-package "straight" "Register a package without cloning, building, or activating it.
This function is equivalent to calling `straight-use-package'
with a non-nil argument for NO-CLONE. It is provided for
convenience. MELPA-STYLE-RECIPE is as for
`straight-use-package'.

(fn MELPA-STYLE-RECIPE)" nil nil)(autoload 'straight-use-package-no-build "straight" "Register and clone a package without building it.
This function is equivalent to calling `straight-use-package'
with nil for NO-CLONE but a non-nil argument for NO-BUILD. It is
provided for convenience. MELPA-STYLE-RECIPE is as for
`straight-use-package'.

(fn MELPA-STYLE-RECIPE)" nil nil)(autoload 'straight-use-package-lazy "straight" "Register, build, and activate a package if it is already cloned.
This function is equivalent to calling `straight-use-package'
with symbol `lazy' for NO-CLONE. It is provided for convenience.
MELPA-STYLE-RECIPE is as for `straight-use-package'.

(fn MELPA-STYLE-RECIPE)" nil nil)(autoload 'straight-use-recipes "straight" "Register a recipe repository using MELPA-STYLE-RECIPE.
This registers the recipe and builds it if it is already cloned.
Note that you probably want the recipe for a recipe repository to
include a non-nil `:no-build' property, to unconditionally
inhibit the build phase.

This function also adds the recipe repository to
`straight-recipe-repositories', at the end of the list.

(fn MELPA-STYLE-RECIPE)" nil nil)(autoload 'straight-override-recipe "straight" "Register MELPA-STYLE-RECIPE as a recipe override.
This puts it in `straight-recipe-overrides', depending on the
value of `straight-current-profile'.

(fn MELPA-STYLE-RECIPE)" nil nil)(autoload 'straight-check-package "straight" "Rebuild a PACKAGE if it has been modified.
PACKAGE is a string naming a package. Interactively, select
PACKAGE from the known packages in the current Emacs session
using `completing-read'. See also `straight-rebuild-package' and
`straight-check-all'.

(fn PACKAGE)" t nil)(autoload 'straight-check-all "straight" "Rebuild any packages that have been modified.
See also `straight-rebuild-all' and `straight-check-package'.
This function should not be called during init." t nil)(autoload 'straight-rebuild-package "straight" "Rebuild a PACKAGE.
PACKAGE is a string naming a package. Interactively, select
PACKAGE from the known packages in the current Emacs session
using `completing-read'. With prefix argument RECURSIVE, rebuild
all dependencies as well. See also `straight-check-package' and
`straight-rebuild-all'.

(fn PACKAGE &optional RECURSIVE)" t nil)(autoload 'straight-rebuild-all "straight" "Rebuild all packages.
See also `straight-check-all' and `straight-rebuild-package'." t nil)(autoload 'straight-prune-build-cache "straight" "Prune the build cache.
This means that only packages that were built in the last init
run and subsequent interactive session will remain; other
packages will have their build mtime information and any cached
autoloads discarded." nil nil)(autoload 'straight-prune-build-directory "straight" "Prune the build directory.
This means that only packages that were built in the last init
run and subsequent interactive session will remain; other
packages will have their build directories deleted." nil nil)(autoload 'straight-prune-build "straight" "Prune the build cache and build directory.
This means that only packages that were built in the last init
run and subsequent interactive session will remain; other
packages will have their build mtime information discarded and
their build directories deleted." t nil)(autoload 'straight-normalize-package "straight" "Normalize a PACKAGE's local repository to its recipe's configuration.
PACKAGE is a string naming a package. Interactively, select
PACKAGE from the known packages in the current Emacs session
using `completing-read'.

(fn PACKAGE)" t nil)(autoload 'straight-normalize-all "straight" "Normalize all packages. See `straight-normalize-package'.
Return a list of recipes for packages that were not successfully
normalized. If multiple packages come from the same local
repository, only one is normalized.

PREDICATE, if provided, filters the packages that are normalized.
It is called with the package name as a string, and should return
non-nil if the package should actually be normalized.

(fn &optional PREDICATE)" t nil)(autoload 'straight-fetch-package "straight" "Try to fetch a PACKAGE from the primary remote.
PACKAGE is a string naming a package. Interactively, select
PACKAGE from the known packages in the current Emacs session
using `completing-read'. With prefix argument FROM-UPSTREAM,
fetch not just from primary remote but also from upstream (for
forked packages).

(fn PACKAGE &optional FROM-UPSTREAM)" t nil)(autoload 'straight-fetch-package-and-deps "straight" "Try to fetch a PACKAGE and its (transitive) dependencies.
PACKAGE, its dependencies, their dependencies, etc. are fetched
from their primary remotes.

PACKAGE is a string naming a package. Interactively, select
PACKAGE from the known packages in the current Emacs session
using `completing-read'. With prefix argument FROM-UPSTREAM,
fetch not just from primary remote but also from upstream (for
forked packages).

(fn PACKAGE &optional FROM-UPSTREAM)" t nil)(autoload 'straight-fetch-all "straight" "Try to fetch all packages from their primary remotes.
With prefix argument FROM-UPSTREAM, fetch not just from primary
remotes but also from upstreams (for forked packages).

Return a list of recipes for packages that were not successfully
fetched. If multiple packages come from the same local
repository, only one is fetched.

PREDICATE, if provided, filters the packages that are fetched. It
is called with the package name as a string, and should return
non-nil if the package should actually be fetched.

(fn &optional FROM-UPSTREAM PREDICATE)" t nil)(autoload 'straight-merge-package "straight" "Try to merge a PACKAGE from the primary remote.
PACKAGE is a string naming a package. Interactively, select
PACKAGE from the known packages in the current Emacs session
using `completing-read'. With prefix argument FROM-UPSTREAM,
merge not just from primary remote but also from upstream (for
forked packages).

(fn PACKAGE &optional FROM-UPSTREAM)" t nil)(autoload 'straight-merge-package-and-deps "straight" "Try to merge a PACKAGE and its (transitive) dependencies.
PACKAGE, its dependencies, their dependencies, etc. are merged
from their primary remotes.

PACKAGE is a string naming a package. Interactively, select
PACKAGE from the known packages in the current Emacs session
using `completing-read'. With prefix argument FROM-UPSTREAM,
merge not just from primary remote but also from upstream (for
forked packages).

(fn PACKAGE &optional FROM-UPSTREAM)" t nil)(autoload 'straight-merge-all "straight" "Try to merge all packages from their primary remotes.
With prefix argument FROM-UPSTREAM, merge not just from primary
remotes but also from upstreams (for forked packages).

Return a list of recipes for packages that were not successfully
merged. If multiple packages come from the same local
repository, only one is merged.

PREDICATE, if provided, filters the packages that are merged. It
is called with the package name as a string, and should return
non-nil if the package should actually be merged.

(fn &optional FROM-UPSTREAM PREDICATE)" t nil)(autoload 'straight-pull-package "straight" "Try to pull a PACKAGE from the primary remote.
PACKAGE is a string naming a package. Interactively, select
PACKAGE from the known packages in the current Emacs session
using `completing-read'. With prefix argument FROM-UPSTREAM, pull
not just from primary remote but also from upstream (for forked
packages).

(fn PACKAGE &optional FROM-UPSTREAM)" t nil)(autoload 'straight-pull-package-and-deps "straight" "Try to pull a PACKAGE and its (transitive) dependencies.
PACKAGE, its dependencies, their dependencies, etc. are pulled
from their primary remotes.

PACKAGE is a string naming a package. Interactively, select
PACKAGE from the known packages in the current Emacs session
using `completing-read'. With prefix argument FROM-UPSTREAM,
pull not just from primary remote but also from upstream (for
forked packages).

(fn PACKAGE &optional FROM-UPSTREAM)" t nil)(autoload 'straight-pull-all "straight" "Try to pull all packages from their primary remotes.
With prefix argument FROM-UPSTREAM, pull not just from primary
remotes but also from upstreams (for forked packages).

Return a list of recipes for packages that were not successfully
pulled. If multiple packages come from the same local repository,
only one is pulled.

PREDICATE, if provided, filters the packages that are pulled. It
is called with the package name as a string, and should return
non-nil if the package should actually be pulled.

(fn &optional FROM-UPSTREAM PREDICATE)" t nil)(autoload 'straight-push-package "straight" "Push a PACKAGE to its primary remote, if necessary.
PACKAGE is a string naming a package. Interactively, select
PACKAGE from the known packages in the current Emacs session
using `completing-read'.

(fn PACKAGE)" t nil)(autoload 'straight-push-all "straight" "Try to push all packages to their primary remotes.

Return a list of recipes for packages that were not successfully
pushed. If multiple packages come from the same local repository,
only one is pushed.

PREDICATE, if provided, filters the packages that are normalized.
It is called with the package name as a string, and should return
non-nil if the package should actually be normalized.

(fn &optional PREDICATE)" t nil)(autoload 'straight-freeze-versions "straight" "Write version lockfiles for currently activated packages.
This implies first pushing all packages that have unpushed local
changes. If the package management system has been used since the
last time the init-file was reloaded, offer to fix the situation
by reloading the init-file again. If FORCE is
non-nil (interactively, if a prefix argument is provided), skip
all checks and write the lockfile anyway.

Currently, writing version lockfiles requires cloning all lazily
installed packages. Hopefully, this inconvenient requirement will
be removed in the future.

Multiple lockfiles may be written (one for each profile),
according to the value of `straight-profiles'.

(fn &optional FORCE)" t nil)(autoload 'straight-thaw-versions "straight" "Read version lockfiles and restore package versions to those listed." t nil)(defvar straight-x-pinned-packages nil "List of pinned packages.")(autoload 'use-package-autoload-keymap "use-package-bind-key" "Loads PACKAGE and then binds the key sequence used to invoke
this function to KEYMAP-SYMBOL. It then simulates pressing the
same key sequence a again, so that the next key pressed is routed
to the newly loaded keymap.

This function supports use-package's :bind-keymap keyword. It
works by binding the given key sequence to an invocation of this
function for a particular keymap. The keymap is expected to be
defined by the package. In this way, loading the package is
deferred until the prefix key sequence is pressed.

(fn KEYMAP-SYMBOL PACKAGE OVERRIDE)" nil nil)(autoload 'use-package-normalize-binder "use-package-bind-key" "

(fn NAME KEYWORD ARGS)" nil nil)(defalias 'use-package-normalize/:bind 'use-package-normalize-binder)(defalias 'use-package-normalize/:bind* 'use-package-normalize-binder)(defalias 'use-package-autoloads/:bind 'use-package-autoloads-mode)(defalias 'use-package-autoloads/:bind* 'use-package-autoloads-mode)(autoload 'use-package-handler/:bind "use-package-bind-key" "

(fn NAME KEYWORD ARGS REST STATE &optional BIND-MACRO)" nil nil)(defalias 'use-package-normalize/:bind-keymap 'use-package-normalize-binder)(defalias 'use-package-normalize/:bind-keymap* 'use-package-normalize-binder)(autoload 'use-package-handler/:bind-keymap "use-package-bind-key" "

(fn NAME KEYWORD ARGS REST STATE &optional OVERRIDE)" nil nil)(autoload 'use-package-handler/:bind-keymap* "use-package-bind-key" "

(fn NAME KEYWORD ARG REST STATE)" nil nil)(autoload 'use-package "use-package-core" "Declare an Emacs package by specifying a group of configuration options.

For full documentation, please see the README file that came with
this file.  Usage:

  (use-package package-name
     [:keyword [option]]...)

:init            Code to run before PACKAGE-NAME has been loaded.
:config          Code to run after PACKAGE-NAME has been loaded.  Note that
                 if loading is deferred for any reason, this code does not
                 execute until the lazy load has occurred.
:preface         Code to be run before everything except `:disabled'; this
                 can be used to define functions for use in `:if', or that
                 should be seen by the byte-compiler.

:mode            Form to be added to `auto-mode-alist'.
:magic           Form to be added to `magic-mode-alist'.
:magic-fallback  Form to be added to `magic-fallback-mode-alist'.
:interpreter     Form to be added to `interpreter-mode-alist'.

:commands        Define autoloads for commands that will be defined by the
                 package.  This is useful if the package is being lazily
                 loaded, and you wish to conditionally call functions in your
                 `:init' block that are defined in the package.
:hook            Specify hook(s) to attach this package to.

:bind            Bind keys, and define autoloads for the bound commands.
:bind*           Bind keys, and define autoloads for the bound commands,
                 *overriding all minor mode bindings*.
:bind-keymap     Bind a key prefix to an auto-loaded keymap defined in the
                 package.  This is like `:bind', but for keymaps.
:bind-keymap*    Like `:bind-keymap', but overrides all minor mode bindings

:defer           Defer loading of a package -- this is implied when using
                 `:commands', `:bind', `:bind*', `:mode', `:magic', `:hook',
                 `:magic-fallback', or `:interpreter'.  This can be an integer,
                 to force loading after N seconds of idle time, if the package
                 has not already been loaded.
:after           Delay the use-package declaration until after the named modules
                 have loaded. Once load, it will be as though the use-package
                 declaration (without `:after') had been seen at that moment.
:demand          Prevent the automatic deferred loading introduced by constructs
                 such as `:bind' (see `:defer' for the complete list).

:if EXPR         Initialize and load only if EXPR evaluates to a non-nil value.
:disabled        The package is ignored completely if this keyword is present.
:defines         Declare certain variables to silence the byte-compiler.
:functions       Declare certain functions to silence the byte-compiler.
:load-path       Add to the `load-path' before attempting to load the package.
:diminish        Support for diminish.el (if installed).
:delight         Support for delight.el (if installed).
:custom          Call `custom-set' or `set-default' with each variable
                 definition without modifying the Emacs `custom-file'.
                 (compare with `custom-set-variables').
:custom-face     Call `customize-set-faces' with each face definition.
:ensure          Loads the package using package.el if necessary.
:pin             Pin the package to an archive.

(fn NAME &rest ARGS)" nil t)(function-put 'use-package 'lisp-indent-function '1)(autoload 'use-package-normalize/:delight "use-package-delight" "Normalize arguments to delight.

(fn NAME KEYWORD ARGS)" nil nil)(autoload 'use-package-handler/:delight "use-package-delight" "

(fn NAME KEYWORD ARGS REST STATE)" nil nil)(autoload 'use-package-normalize/:diminish "use-package-diminish" "

(fn NAME KEYWORD ARGS)" nil nil)(autoload 'use-package-handler/:diminish "use-package-diminish" "

(fn NAME KEYWORD ARG REST STATE)" nil nil)(autoload 'use-package-normalize/:ensure "use-package-ensure" "

(fn NAME KEYWORD ARGS)" nil nil)(autoload 'use-package-handler/:ensure "use-package-ensure" "

(fn NAME KEYWORD ENSURE REST STATE)" nil nil)(autoload 'use-package-jump-to-package-form "use-package-jump" "Attempt to find and jump to the `use-package' form that loaded
PACKAGE. This will only find the form if that form actually
required PACKAGE. If PACKAGE was previously required then this
function will jump to the file that originally required PACKAGE
instead.

(fn PACKAGE)" t nil)(autoload 'use-package-lint "use-package-lint" "Check for errors in use-package declarations.
For example, if the module's `:if' condition is met, but even
with the specified `:load-path' the module cannot be found." t nil)(autoload 'bind-key "bind-key" "Bind KEY-NAME to COMMAND in KEYMAP (`global-map' if not passed).

KEY-NAME may be a vector, in which case it is passed straight to
`define-key'. Or it may be a string to be interpreted as
spelled-out keystrokes, e.g., \"C-c C-z\". See documentation of
`edmacro-mode' for details.

COMMAND must be an interactive function or lambda form.

KEYMAP, if present, should be a keymap variable or symbol.
For example:

  (bind-key \"M-h\" #'some-interactive-function my-mode-map)

  (bind-key \"M-h\" #'some-interactive-function 'my-mode-map)

If PREDICATE is non-nil, it is a form evaluated to determine when
a key should be bound. It must return non-nil in such cases.
Emacs can evaluate this form at any time that it does redisplay
or operates on menu data structures, so you should write it so it
can safely be called at any time.

(fn KEY-NAME COMMAND &optional KEYMAP PREDICATE)" nil t)(autoload 'unbind-key "bind-key" "Unbind the given KEY-NAME, within the KEYMAP (if specified).
See `bind-key' for more details.

(fn KEY-NAME &optional KEYMAP)" nil t)(autoload 'bind-key* "bind-key" "Similar to `bind-key', but overrides any mode-specific bindings.

(fn KEY-NAME COMMAND &optional PREDICATE)" nil t)(autoload 'bind-keys "bind-key" "Bind multiple keys at once.

Accepts keyword arguments:
:map MAP               - a keymap into which the keybindings should be
                         added
:prefix KEY            - prefix key for these bindings
:prefix-map MAP        - name of the prefix map that should be created
                         for these bindings
:prefix-docstring STR  - docstring for the prefix-map variable
:menu-name NAME        - optional menu string for prefix map
:filter FORM           - optional form to determine when bindings apply

The rest of the arguments are conses of keybinding string and a
function symbol (unquoted).

(fn &rest ARGS)" nil t)(autoload 'bind-keys* "bind-key" "

(fn &rest ARGS)" nil t)(autoload 'describe-personal-keybindings "bind-key" "Display all the personal keybindings defined by `bind-key'." t nil)(defvar auto-minor-mode-alist nil "Alist of filename patterns vs corresponding minor mode functions.

This is an equivalent of ‘auto-mode-alist’, for minor modes.

Unlike ‘auto-mode-alist’, matching is always case-folded.")(defvar auto-minor-mode-magic-alist nil "Alist of buffer beginnings vs corresponding minor mode functions.

This is an equivalent of ‘magic-mode-alist’, for minor modes.

Magic minor modes are applied after ‘set-auto-mode’ enables any
major mode, so it’s possible to check for expected major modes in
match functions.

Unlike ‘magic-mode-alist’, matching is always case-folded.")(autoload 'auto-minor-mode-set "auto-minor-mode" "Enable all minor modes appropriate for the current buffer.

If the optional argument KEEP-MODE-IF-SAME is non-nil, then we
don’t re-activate minor modes already enabled in the buffer.

(fn &optional KEEP-MODE-IF-SAME)" nil nil)(advice-add #'set-auto-mode :after #'auto-minor-mode-set)(defvar gcmh-mode nil "Non-nil if Gcmh mode is enabled.
See the `gcmh-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `gcmh-mode'.")(autoload 'gcmh-mode "gcmh" "Minor mode to tweak Garbage Collection strategy.

If called interactively, enable Gcmh mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(defvar explain-pause-mode nil "Non-nil if Explain-Pause mode is enabled.
See the `explain-pause-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `explain-pause-mode'.")(autoload 'explain-pause-mode "explain-pause-mode" "Toggle whether to attempt to discover and explain pauses in emacs.

If called interactively, enable Explain-Pause mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

When enabled, explain-pause will attempt to time how long blocking activity
takes. If it measures blocking work that takes longer then a configurable
amount of time, explain-pause logs contextual information that can be used
to help diagnose and propose areas of elisp that might affect emacs
interactivity.

When blocking work takes too long many times, explain-mode profiles the
blocking work using the builtin Emacs profiler (`profiler' package). A fixed
number of these are saved.

This mode hooks `call-interactively', both idle and regular timers, and process
filters and sentinels.

When running interactively, e.g. run from `M-x' or similar, `explain-pause-mode'
must install itself after some time while Emacs is not doing anything.

(fn &optional ARG)" t nil)(autoload 'explain-pause-top "explain-pause-mode" "Show a top-like report of commands recently ran and their runtime. Returns
the buffer." t nil)(autoload 'explain-pause-log-to-socket "explain-pause-mode" "Log the event stream to a UNIX file socket, FILE-SOCKET. If FILE-SOCKET is nil,
then the default location `explain-pause-default-log' is used. This file socket
should already exist. It might be created by `explain-pause-socket' in another
Emacs process, in which case `explain-mode-top-from-socket' will receive and
present that data. Or you can simply receive the data in any other process that
can create UNIX sockets, for example `netcat'.To turn off logging, run
`explain-pause-log-off'.

The stream is written as newline delimited elisp readable lines. See
`explain-pause-log--send-*' family of commands for the format of those objects.

Returns the process that is connected to the socket.

(fn &optional FILE-SOCKET)" t nil)(autoload 'all-the-icons-icon-for-dir "all-the-icons" "Get the formatted icon for DIR.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

Note: You want chevron, please use `all-the-icons-icon-for-dir-with-chevron'.

(fn DIR &rest ARG-OVERRIDES)" nil nil)(autoload 'all-the-icons-icon-for-file "all-the-icons" "Get the formatted icon for FILE.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn FILE &rest ARG-OVERRIDES)" nil nil)(autoload 'all-the-icons-icon-for-mode "all-the-icons" "Get the formatted icon for MODE.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn MODE &rest ARG-OVERRIDES)" nil nil)(autoload 'all-the-icons-icon-for-url "all-the-icons" "Get the formatted icon for URL.
If an icon for URL isn't found in `all-the-icons-url-alist', a globe is used.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn URL &rest ARG-OVERRIDES)" nil nil)(autoload 'all-the-icons-install-fonts "all-the-icons" "Helper function to download and install the latests fonts based on OS.
When PFX is non-nil, ignore the prompt and just install

(fn &optional PFX)" t nil)(autoload 'all-the-icons-insert "all-the-icons" "Interactive icon insertion function.
When Prefix ARG is non-nil, insert the propertized icon.
When FAMILY is non-nil, limit the candidates to the icon set matching it.

(fn &optional ARG FAMILY)" t nil)(autoload 'hide-mode-line-mode "hide-mode-line" "Minor mode to hide the mode-line in the current buffer.

If called interactively, enable Hide-Mode-Line mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-hide-mode-line-mode 'globalized-minor-mode t)(defvar global-hide-mode-line-mode nil "Non-nil if Global Hide-Mode-Line mode is enabled.
See the `global-hide-mode-line-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-hide-mode-line-mode'.")(autoload 'global-hide-mode-line-mode "hide-mode-line" "Toggle Hide-Mode-Line mode in all buffers.
With prefix ARG, enable Global Hide-Mode-Line mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Hide-Mode-Line mode is enabled in all buffers where
`turn-on-hide-mode-line-mode' would do it.
See `hide-mode-line-mode' for more information on Hide-Mode-Line mode.

(fn &optional ARG)" t nil)(autoload 'turn-on-hide-mode-line-mode "hide-mode-line" "Turn on `hide-mode-line-mode'.
Unless in `fundamental-mode' or `hide-mode-line-excluded-modes'." nil nil)(autoload 'turn-off-hide-mode-line-mode "hide-mode-line" "Turn off `hide-mode-line-mode'." nil nil)(autoload 'highlight-numbers-mode "highlight-numbers" "Minor mode for highlighting numeric literals in source code.

Toggle Highlight Numbers mode on or off.

With a prefix argument ARG, enable Highlight Numbers mode if ARG is
positive, and disable it otherwise. If called from Lisp, enable
the mode if ARG is omitted or nil, and toggle it if ARG is `toggle'.

(fn &optional ARG)" t nil)(autoload 'rainbow-delimiters-mode "rainbow-delimiters" "Highlight nested parentheses, brackets, and braces according to their depth.

If called interactively, enable Rainbow-Delimiters mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'rainbow-delimiters-mode-enable "rainbow-delimiters" "Enable `rainbow-delimiters-mode'." nil nil)(autoload 'rainbow-delimiters-mode-disable "rainbow-delimiters" "Disable `rainbow-delimiters-mode'." nil nil)(autoload 'restart-emacs-handle-command-line-args "restart-emacs" "Handle the --restart-emacs-desktop command line argument.

The value of the argument is the desktop file from which the frames should be
restored.  IGNORED are ignored.

(fn &rest IGNORED)" nil nil)(add-to-list 'command-switch-alist '("--restart-emacs-desktop" . restart-emacs-handle-command-line-args))(autoload 'restart-emacs "restart-emacs" "Restart Emacs.

When called interactively ARGS is interpreted as follows

- with a single `universal-argument' (`C-u') Emacs is restarted
  with `--debug-init' flag
- with two `universal-argument' (`C-u') Emacs is restarted with
  `-Q' flag
- with three `universal-argument' (`C-u') the user prompted for
  the arguments

When called non-interactively ARGS should be a list of arguments
with which Emacs should be restarted.

(fn &optional ARGS)" t nil)(autoload 'better-jumper-set-jump "better-jumper" "Set jump point at POS.
POS defaults to point.

(fn &optional POS)" nil nil)(autoload 'better-jumper-jump-backward "better-jumper" "Jump backward COUNT positions to previous location in jump list.
If COUNT is nil then defaults to 1.

(fn &optional COUNT)" t nil)(autoload 'better-jumper-jump-forward "better-jumper" "Jump forward COUNT positions to location in jump list.
If COUNT is nil then defaults to 1.

(fn &optional COUNT)" t nil)(autoload 'better-jumper-get-jumps "better-jumper" "Get jumps for WINDOW-OR-BUFFER.
The argument should be either a window or buffer depending on the context.

(fn WINDOW-OR-BUFFER)" nil nil)(autoload 'better-jumper-set-jumps "better-jumper" "Set jumps to JUMPS for WINDOW-OR-BUFFER.
The argument should be either a window or buffer depending on the context.

(fn WINDOW-OR-BUFFER JUMPS)" nil nil)(autoload 'turn-on-better-jumper-mode "better-jumper" "Enable better-jumper-mode in the current buffer." nil nil)(autoload 'turn-off-better-jumper-mode "better-jumper" "Disable `better-jumper-local-mode' in the current buffer." nil nil)(autoload 'better-jumper-local-mode "better-jumper" "better-jumper minor mode.

If called interactively, enable Better-Jumper-Local mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'better-jumper-mode 'globalized-minor-mode t)(defvar better-jumper-mode nil "Non-nil if Better-Jumper mode is enabled.
See the `better-jumper-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `better-jumper-mode'.")(autoload 'better-jumper-mode "better-jumper" "Toggle Better-Jumper-Local mode in all buffers.
With prefix ARG, enable Better-Jumper mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Better-Jumper-Local mode is enabled in all buffers where
`turn-on-better-jumper-mode' would do it.
See `better-jumper-local-mode' for more information on Better-Jumper-Local mode.

(fn &optional ARG)" t nil)(autoload 'dtrt-indent-mode "dtrt-indent" "Toggle dtrt-indent mode.
With no argument, this command toggles the mode.  Non-null prefix
argument turns on the mode.  Null prefix argument turns off the
mode.

If called interactively, enable Dtrt-Indent mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

When dtrt-indent mode is enabled, the proper indentation offset
and `indent-tabs-mode' will be guessed for newly opened files and
adjusted transparently.

(fn &optional ARG)" t nil)(put 'dtrt-indent-global-mode 'globalized-minor-mode t)(defvar dtrt-indent-global-mode nil "Non-nil if Dtrt-Indent-Global mode is enabled.
See the `dtrt-indent-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dtrt-indent-global-mode'.")(autoload 'dtrt-indent-global-mode "dtrt-indent" "Toggle Dtrt-Indent mode in all buffers.
With prefix ARG, enable Dtrt-Indent-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Dtrt-Indent mode is enabled in all buffers where
`(lambda nil (when (derived-mode-p 'prog-mode 'text-mode) (dtrt-indent-mode)))' would do it.
See `dtrt-indent-mode' for more information on Dtrt-Indent mode.

(fn &optional ARG)" t nil)(defvar dtrt-indent-mode nil "Toggle adaptive indentation mode.
Setting this variable directly does not take effect;
use either \\[customize] or the function `dtrt-indent-mode'.")(autoload 'helpful-function "helpful" "Show help for function named SYMBOL.

(fn SYMBOL)" t nil)(autoload 'helpful-command "helpful" "Show help for interactive function named SYMBOL.

(fn SYMBOL)" t nil)(autoload 'helpful-key "helpful" "Show help for interactive command bound to KEY-SEQUENCE.

(fn KEY-SEQUENCE)" t nil)(autoload 'helpful-macro "helpful" "Show help for macro named SYMBOL.

(fn SYMBOL)" t nil)(autoload 'helpful-callable "helpful" "Show help for function, macro or special form named SYMBOL.

See also `helpful-macro' and `helpful-function'.

(fn SYMBOL)" t nil)(autoload 'helpful-symbol "helpful" "Show help for SYMBOL, a variable, function or macro.

See also `helpful-callable' and `helpful-variable'.

(fn SYMBOL)" t nil)(autoload 'helpful-variable "helpful" "Show help for variable named SYMBOL.

(fn SYMBOL)" t nil)(autoload 'helpful-at-point "helpful" "Show help for the symbol at point." t nil)(autoload 'elisp-refs-function "elisp-refs" "Display all the references to function SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

This searches for functions, not macros. For that, see
`elisp-refs-macro'.

(fn SYMBOL &optional PATH-PREFIX)" t nil)(autoload 'elisp-refs-macro "elisp-refs" "Display all the references to macro SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

This searches for macros, not functions. For that, see
`elisp-refs-function'.

(fn SYMBOL &optional PATH-PREFIX)" t nil)(autoload 'elisp-refs-special "elisp-refs" "Display all the references to special form SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

(fn SYMBOL &optional PATH-PREFIX)" t nil)(autoload 'elisp-refs-variable "elisp-refs" "Display all the references to variable SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

(fn SYMBOL &optional PATH-PREFIX)" t nil)(autoload 'elisp-refs-symbol "elisp-refs" "Display all the references to SYMBOL in all loaded elisp files.

If called with a prefix, prompt for a directory to limit the
search.

(fn SYMBOL &optional PATH-PREFIX)" t nil)(defvar pcre-mode nil "Non-nil if PCRE mode is enabled.
See the `pcre-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pcre-mode'.")(autoload 'pcre-mode "pcre2el" "Use emulated PCRE syntax for regexps wherever possible.

If called interactively, enable PCRE mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

Advises the `interactive' specs of `read-regexp' and the
following other functions so that they read PCRE syntax and
translate to its Emacs equivalent:

- `align-regexp'
- `find-tag-regexp'
- `sort-regexp-fields'
- `isearch-message-prefix'
- `ibuffer-do-replace-regexp'

Also alters the behavior of `isearch-mode' when searching by regexp.

(fn &optional ARG)" t nil)(autoload 'pcre-query-replace-regexp "pcre2el" "Perform `query-replace-regexp' using PCRE syntax.

Consider using `pcre-mode' instead of this function." t nil)(autoload 'rxt-elisp-to-pcre "pcre2el" "Translate REGEXP, a regexp in Emacs Lisp syntax, to Perl-compatible syntax.

Interactively, reads the regexp in one of three ways. With a
prefix arg, reads from minibuffer without string escaping, like
`query-replace-regexp'. Without a prefix arg, uses the text of
the region if it is active. Otherwise, uses the result of
evaluating the sexp before point (which might be a string regexp
literal or an expression that produces a string).

Displays the translated PCRE regexp in the echo area and copies
it to the kill ring.

Emacs regexp features such as syntax classes which cannot be
translated to PCRE will cause an error.

(fn REGEXP)" t nil)(autoload 'rxt-elisp-to-rx "pcre2el" "Translate REGEXP, a regexp in Emacs Lisp syntax, to `rx' syntax.

See `rxt-elisp-to-pcre' for a description of the interactive
behavior and `rx' for documentation of the S-expression based
regexp syntax.

(fn REGEXP)" t nil)(autoload 'rxt-elisp-to-strings "pcre2el" "Return a list of all strings matched by REGEXP, an Emacs Lisp regexp.

See `rxt-elisp-to-pcre' for a description of the interactive behavior.

This is useful primarily for getting back the original list of
strings from a regexp generated by `regexp-opt', but it will work
with any regexp without unbounded quantifiers (*, +, {2, } and so
on).

Throws an error if REGEXP contains any infinite quantifiers.

(fn REGEXP)" t nil)(autoload 'rxt-toggle-elisp-rx "pcre2el" "Toggle the regexp near point between Elisp string and rx syntax." t nil)(autoload 'rxt-pcre-to-elisp "pcre2el" "Translate PCRE, a regexp in Perl-compatible syntax, to Emacs Lisp.

Interactively, uses the contents of the region if it is active,
otherwise reads from the minibuffer. Prints the Emacs translation
in the echo area and copies it to the kill ring.

PCRE regexp features that cannot be translated into Emacs syntax
will cause an error. See the commentary section of pcre2el.el for
more details.

(fn PCRE &optional FLAGS)" t nil)(defalias 'pcre-to-elisp 'rxt-pcre-to-elisp)(autoload 'rxt-pcre-to-rx "pcre2el" "Translate PCRE, a regexp in Perl-compatible syntax, to `rx' syntax.

See `rxt-pcre-to-elisp' for a description of the interactive behavior.

(fn PCRE &optional FLAGS)" t nil)(autoload 'rxt-pcre-to-strings "pcre2el" "Return a list of all strings matched by PCRE, a Perl-compatible regexp.

See `rxt-elisp-to-pcre' for a description of the interactive
behavior and `rxt-elisp-to-strings' for why this might be useful.

Throws an error if PCRE contains any infinite quantifiers.

(fn PCRE &optional FLAGS)" t nil)(autoload 'rxt-explain-elisp "pcre2el" "Insert the pretty-printed `rx' syntax for REGEXP in a new buffer.

REGEXP is a regular expression in Emacs Lisp syntax. See
`rxt-elisp-to-pcre' for a description of how REGEXP is read
interactively.

(fn REGEXP)" t nil)(autoload 'rxt-explain-pcre "pcre2el" "Insert the pretty-printed `rx' syntax for REGEXP in a new buffer.

REGEXP is a regular expression in PCRE syntax. See
`rxt-pcre-to-elisp' for a description of how REGEXP is read
interactively.

(fn REGEXP &optional FLAGS)" t nil)(autoload 'rxt-quote-pcre "pcre2el" "Return a PCRE regexp which matches TEXT literally.

Any PCRE metacharacters in TEXT will be quoted with a backslash.

(fn TEXT)" nil nil)(autoload 'rxt-explain "pcre2el" "Pop up a buffer with pretty-printed `rx' syntax for the regex at point.

Chooses regex syntax to read based on current major mode, calling
`rxt-explain-elisp' if buffer is in `emacs-lisp-mode' or
`lisp-interaction-mode', or `rxt-explain-pcre' otherwise." t nil)(autoload 'rxt-convert-syntax "pcre2el" "Convert regex at point to other kind of syntax, depending on major mode.

For buffers in `emacs-lisp-mode' or `lisp-interaction-mode',
calls `rxt-elisp-to-pcre' to convert to PCRE syntax. Otherwise,
calls `rxt-pcre-to-elisp' to convert to Emacs syntax.

The converted syntax is displayed in the echo area and copied to
the kill ring; see the two functions named above for details." t nil)(autoload 'rxt-convert-to-rx "pcre2el" "Convert regex at point to RX syntax. Chooses Emacs or PCRE syntax by major mode." t nil)(autoload 'rxt-convert-to-strings "pcre2el" "Convert regex at point to RX syntax. Chooses Emacs or PCRE syntax by major mode." t nil)(autoload 'rxt-mode "pcre2el" "Regex translation utilities.

If called interactively, enable Rxt mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'turn-on-rxt-mode "pcre2el" "Turn on `rxt-mode' in the current buffer." t nil)(put 'rxt-global-mode 'globalized-minor-mode t)(defvar rxt-global-mode nil "Non-nil if Rxt-Global mode is enabled.
See the `rxt-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `rxt-global-mode'.")(autoload 'rxt-global-mode "pcre2el" "Toggle Rxt mode in all buffers.
With prefix ARG, enable Rxt-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Rxt mode is enabled in all buffers where
`turn-on-rxt-mode' would do it.
See `rxt-mode' for more information on Rxt mode.

(fn &optional ARG)" t nil)(autoload 'sp-cheat-sheet "smartparens" "Generate a cheat sheet of all the smartparens interactive functions.

Without a prefix argument, print only the short documentation and examples.

With non-nil prefix argument ARG, show the full documentation for each function.

You can follow the links to the function or variable help page.
To get back to the full list, use \\[help-go-back].

You can use `beginning-of-defun' and `end-of-defun' to jump to
the previous/next entry.

Examples are fontified using the `font-lock-string-face' for
better orientation.

(fn &optional ARG)" t nil)(defvar smartparens-mode-map (make-sparse-keymap) "Keymap used for `smartparens-mode'.")(autoload 'sp-use-paredit-bindings "smartparens" "Initiate `smartparens-mode-map' with `sp-paredit-bindings'." t nil)(autoload 'sp-use-smartparens-bindings "smartparens" "Initiate `smartparens-mode-map' with `sp-smartparens-bindings'." t nil)(autoload 'smartparens-mode "smartparens" "Toggle smartparens mode.

If called interactively, enable Smartparens mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

You can enable pre-set bindings by customizing
`sp-base-key-bindings' variable.  The current content of
`smartparens-mode-map' is:

 \\{smartparens-mode-map}

(fn &optional ARG)" t nil)(autoload 'smartparens-strict-mode "smartparens" "Toggle the strict smartparens mode.

If called interactively, enable Smartparens-Strict mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

When strict mode is active, `delete-char', `kill-word' and their
backward variants will skip over the pair delimiters in order to
keep the structure always valid (the same way as `paredit-mode'
does).  This is accomplished by remapping them to
`sp-delete-char' and `sp-kill-word'.  There is also function
`sp-kill-symbol' that deletes symbols instead of words, otherwise
working exactly the same (it is not bound to any key by default).

When strict mode is active, this is indicated with \"/s\"
after the smartparens indicator in the mode list.

(fn &optional ARG)" t nil)(put 'smartparens-global-strict-mode 'globalized-minor-mode t)(defvar smartparens-global-strict-mode nil "Non-nil if Smartparens-Global-Strict mode is enabled.
See the `smartparens-global-strict-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `smartparens-global-strict-mode'.")(autoload 'smartparens-global-strict-mode "smartparens" "Toggle Smartparens-Strict mode in all buffers.
With prefix ARG, enable Smartparens-Global-Strict mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Smartparens-Strict mode is enabled in all buffers where
`turn-on-smartparens-strict-mode' would do it.
See `smartparens-strict-mode' for more information on Smartparens-Strict mode.

(fn &optional ARG)" t nil)(autoload 'turn-on-smartparens-strict-mode "smartparens" "Turn on `smartparens-strict-mode'." t nil)(autoload 'turn-off-smartparens-strict-mode "smartparens" "Turn off `smartparens-strict-mode'." t nil)(put 'smartparens-global-mode 'globalized-minor-mode t)(defvar smartparens-global-mode nil "Non-nil if Smartparens-Global mode is enabled.
See the `smartparens-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `smartparens-global-mode'.")(autoload 'smartparens-global-mode "smartparens" "Toggle Smartparens mode in all buffers.
With prefix ARG, enable Smartparens-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Smartparens mode is enabled in all buffers where
`turn-on-smartparens-mode' would do it.
See `smartparens-mode' for more information on Smartparens mode.

(fn &optional ARG)" t nil)(autoload 'turn-on-smartparens-mode "smartparens" "Turn on `smartparens-mode'.

This function is used to turn on `smartparens-global-mode'.

By default `smartparens-global-mode' ignores buffers with
`mode-class' set to special, but only if they are also not comint
buffers.

Additionally, buffers on `sp-ignore-modes-list' are ignored.

You can still turn on smartparens in these mode manually (or
in mode's startup-hook etc.) by calling `smartparens-mode'." t nil)(autoload 'turn-off-smartparens-mode "smartparens" "Turn off `smartparens-mode'." t nil)(autoload 'show-smartparens-mode "smartparens" "Toggle visualization of matching pairs.  When enabled, any
matching pair is highlighted after `sp-show-pair-delay' seconds
of Emacs idle time if the point is immediately in front or after
a pair.  This mode works similarly to `show-paren-mode', but
support custom pairs.

If called interactively, enable Show-Smartparens mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'show-smartparens-global-mode 'globalized-minor-mode t)(defvar show-smartparens-global-mode nil "Non-nil if Show-Smartparens-Global mode is enabled.
See the `show-smartparens-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `show-smartparens-global-mode'.")(autoload 'show-smartparens-global-mode "smartparens" "Toggle Show-Smartparens mode in all buffers.
With prefix ARG, enable Show-Smartparens-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Show-Smartparens mode is enabled in all buffers where
`turn-on-show-smartparens-mode' would do it.
See `show-smartparens-mode' for more information on Show-Smartparens mode.

(fn &optional ARG)" t nil)(autoload 'turn-on-show-smartparens-mode "smartparens" "Turn on `show-smartparens-mode'." t nil)(autoload 'turn-off-show-smartparens-mode "smartparens" "Turn off `show-smartparens-mode'." t nil)(autoload 'ws-butler-mode "ws-butler" "White space cleanup, without obtrusive white space removal.

If called interactively, enable Ws-Butler mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Whitespaces at EOL and EOF are trimmed upon file save, and only
for lines modified by you.

(fn &optional ARG)" t nil)(put 'ws-butler-global-mode 'globalized-minor-mode t)(defvar ws-butler-global-mode nil "Non-nil if Ws-Butler-Global mode is enabled.
See the `ws-butler-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ws-butler-global-mode'.")(autoload 'ws-butler-global-mode "ws-butler" "Toggle Ws-Butler mode in all buffers.
With prefix ARG, enable Ws-Butler-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Ws-Butler mode is enabled in all buffers where
`(lambda nil (unless (apply #'derived-mode-p ws-butler-global-exempt-modes) (ws-butler-mode)))' would do it.
See `ws-butler-mode' for more information on Ws-Butler mode.

(fn &optional ARG)" t nil)(autoload 'projectile-version "projectile" "Get the Projectile version as string.

If called interactively or if SHOW-VERSION is non-nil, show the
version in the echo area and the messages buffer.

The returned string includes both, the version from package.el
and the library version, if both a present and different.

If the version number could not be determined, signal an error,
if called interactively, or if SHOW-VERSION is non-nil, otherwise
just return nil.

(fn &optional SHOW-VERSION)" t nil)(autoload 'projectile-invalidate-cache "projectile" "Remove the current project's files from `projectile-projects-cache'.

With a prefix argument PROMPT prompts for the name of the project whose cache
to invalidate.

(fn PROMPT)" t nil)(autoload 'projectile-purge-file-from-cache "projectile" "Purge FILE from the cache of the current project.

(fn FILE)" t nil)(autoload 'projectile-purge-dir-from-cache "projectile" "Purge DIR from the cache of the current project.

(fn DIR)" t nil)(autoload 'projectile-cache-current-file "projectile" "Add the currently visited file to the cache." t nil)(autoload 'projectile-discover-projects-in-directory "projectile" "Discover any projects in DIRECTORY and add them to the projectile cache.
This function is not recursive and only adds projects with roots
at the top level of DIRECTORY.

(fn DIRECTORY)" t nil)(autoload 'projectile-discover-projects-in-search-path "projectile" "Discover projects in `projectile-project-search-path'.
Invoked automatically when `projectile-mode' is enabled." t nil)(autoload 'projectile-switch-to-buffer "projectile" "Switch to a project buffer." t nil)(autoload 'projectile-switch-to-buffer-other-window "projectile" "Switch to a project buffer and show it in another window." t nil)(autoload 'projectile-switch-to-buffer-other-frame "projectile" "Switch to a project buffer and show it in another frame." t nil)(autoload 'projectile-display-buffer "projectile" "Display a project buffer in another window without selecting it." t nil)(autoload 'projectile-project-buffers-other-buffer "projectile" "Switch to the most recently selected buffer project buffer.
Only buffers not visible in windows are returned." t nil)(autoload 'projectile-multi-occur "projectile" "Do a `multi-occur' in the project's buffers.
With a prefix argument, show NLINES of context.

(fn &optional NLINES)" t nil)(autoload 'projectile-find-other-file "projectile" "Switch between files with the same name but different extensions.
With FLEX-MATCHING, match any file that contains the base name of current file.
Other file extensions can be customized with the variable `projectile-other-file-alist'.

(fn &optional FLEX-MATCHING)" t nil)(autoload 'projectile-find-other-file-other-window "projectile" "Switch between files with the same name but different extensions in other window.
With FLEX-MATCHING, match any file that contains the base name of current file.
Other file extensions can be customized with the variable `projectile-other-file-alist'.

(fn &optional FLEX-MATCHING)" t nil)(autoload 'projectile-find-other-file-other-frame "projectile" "Switch between files with the same name but different extensions in other frame.
With FLEX-MATCHING, match any file that contains the base name of current file.
Other file extensions can be customized with the variable `projectile-other-file-alist'.

(fn &optional FLEX-MATCHING)" t nil)(autoload 'projectile-find-file-dwim "projectile" "Jump to a project's files using completion based on context.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

If point is on a filename, Projectile first tries to search for that
file in project:

- If it finds just a file, it switches to that file instantly.  This works even
if the filename is incomplete, but there's only a single file in the current project
that matches the filename at point.  For example, if there's only a single file named
\"projectile/projectile.el\" but the current filename is \"projectile/proj\" (incomplete),
`projectile-find-file-dwim' still switches to \"projectile/projectile.el\" immediately
 because this is the only filename that matches.

- If it finds a list of files, the list is displayed for selecting.  A list of
files is displayed when a filename appears more than one in the project or the
filename at point is a prefix of more than two files in a project.  For example,
if `projectile-find-file-dwim' is executed on a filepath like \"projectile/\", it lists
the content of that directory.  If it is executed on a partial filename like
 \"projectile/a\", a list of files with character 'a' in that directory is presented.

- If it finds nothing, display a list of all files in project for selecting.

(fn &optional INVALIDATE-CACHE)" t nil)(autoload 'projectile-find-file-dwim-other-window "projectile" "Jump to a project's files using completion based on context in other window.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

If point is on a filename, Projectile first tries to search for that
file in project:

- If it finds just a file, it switches to that file instantly.  This works even
if the filename is incomplete, but there's only a single file in the current project
that matches the filename at point.  For example, if there's only a single file named
\"projectile/projectile.el\" but the current filename is \"projectile/proj\" (incomplete),
`projectile-find-file-dwim-other-window' still switches to \"projectile/projectile.el\"
immediately because this is the only filename that matches.

- If it finds a list of files, the list is displayed for selecting.  A list of
files is displayed when a filename appears more than one in the project or the
filename at point is a prefix of more than two files in a project.  For example,
if `projectile-find-file-dwim-other-window' is executed on a filepath like \"projectile/\", it lists
the content of that directory.  If it is executed on a partial filename
like \"projectile/a\", a list of files with character 'a' in that directory
is presented.

- If it finds nothing, display a list of all files in project for selecting.

(fn &optional INVALIDATE-CACHE)" t nil)(autoload 'projectile-find-file-dwim-other-frame "projectile" "Jump to a project's files using completion based on context in other frame.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

If point is on a filename, Projectile first tries to search for that
file in project:

- If it finds just a file, it switches to that file instantly.  This works even
if the filename is incomplete, but there's only a single file in the current project
that matches the filename at point.  For example, if there's only a single file named
\"projectile/projectile.el\" but the current filename is \"projectile/proj\" (incomplete),
`projectile-find-file-dwim-other-frame' still switches to \"projectile/projectile.el\"
immediately because this is the only filename that matches.

- If it finds a list of files, the list is displayed for selecting.  A list of
files is displayed when a filename appears more than one in the project or the
filename at point is a prefix of more than two files in a project.  For example,
if `projectile-find-file-dwim-other-frame' is executed on a filepath like \"projectile/\", it lists
the content of that directory.  If it is executed on a partial filename
like \"projectile/a\", a list of files with character 'a' in that directory
is presented.

- If it finds nothing, display a list of all files in project for selecting.

(fn &optional INVALIDATE-CACHE)" t nil)(autoload 'projectile-find-file "projectile" "Jump to a project's file using completion.
With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)" t nil)(autoload 'projectile-find-file-other-window "projectile" "Jump to a project's file using completion and show it in another window.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)" t nil)(autoload 'projectile-find-file-other-frame "projectile" "Jump to a project's file using completion and show it in another frame.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)" t nil)(autoload 'projectile-toggle-project-read-only "projectile" "Toggle project read only." t nil)(autoload 'projectile-find-dir "projectile" "Jump to a project's directory using completion.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)" t nil)(autoload 'projectile-find-dir-other-window "projectile" "Jump to a project's directory in other window using completion.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)" t nil)(autoload 'projectile-find-dir-other-frame "projectile" "Jump to a project's directory in other frame using completion.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)" t nil)(autoload 'projectile-find-test-file "projectile" "Jump to a project's test file using completion.

With a prefix arg INVALIDATE-CACHE invalidates the cache first.

(fn &optional INVALIDATE-CACHE)" t nil)(autoload 'projectile-find-related-file-other-window "projectile" "Open related file in other window." t nil)(autoload 'projectile-find-related-file-other-frame "projectile" "Open related file in other frame." t nil)(autoload 'projectile-find-related-file "projectile" "Open related file." t nil)(autoload 'projectile-related-files-fn-groups "projectile" "Generate a related-files-fn which relates as KIND for files in each of GROUPS.

(fn KIND GROUPS)" nil nil)(autoload 'projectile-related-files-fn-extensions "projectile" "Generate a related-files-fn which relates as KIND for files having EXTENSIONS.

(fn KIND EXTENSIONS)" nil nil)(autoload 'projectile-related-files-fn-test-with-prefix "projectile" "Generate a related-files-fn which relates tests and impl for files with EXTENSION based on TEST-PREFIX.

(fn EXTENSION TEST-PREFIX)" nil nil)(autoload 'projectile-related-files-fn-test-with-suffix "projectile" "Generate a related-files-fn which relates tests and impl for files with EXTENSION based on TEST-SUFFIX.

(fn EXTENSION TEST-SUFFIX)" nil nil)(autoload 'projectile-project-info "projectile" "Display info for current project." t nil)(autoload 'projectile-find-implementation-or-test-other-window "projectile" "Open matching implementation or test file in other window." t nil)(autoload 'projectile-find-implementation-or-test-other-frame "projectile" "Open matching implementation or test file in other frame." t nil)(autoload 'projectile-toggle-between-implementation-and-test "projectile" "Toggle between an implementation file and its test file." t nil)(autoload 'projectile-grep "projectile" "Perform rgrep in the project.

With a prefix ARG asks for files (globbing-aware) which to grep in.
With prefix ARG of `-' (such as `M--'), default the files (without prompt),
to `projectile-grep-default-files'.

With REGEXP given, don't query the user for a regexp.

(fn &optional REGEXP ARG)" t nil)(autoload 'projectile-ag "projectile" "Run an ag search with SEARCH-TERM in the project.

With an optional prefix argument ARG SEARCH-TERM is interpreted as a
regular expression.

(fn SEARCH-TERM &optional ARG)" t nil)(autoload 'projectile-ripgrep "projectile" "Run a Ripgrep search with `SEARCH-TERM' at current project root.

With an optional prefix argument ARG SEARCH-TERM is interpreted as a
regular expression.

(fn SEARCH-TERM &optional ARG)" t nil)(autoload 'projectile-regenerate-tags "projectile" "Regenerate the project's [e|g]tags." t nil)(autoload 'projectile-find-tag "projectile" "Find tag in project." t nil)(autoload 'projectile-run-command-in-root "projectile" "Invoke `execute-extended-command' in the project's root." t nil)(autoload 'projectile-run-shell-command-in-root "projectile" "Invoke `shell-command' in the project's root." t nil)(autoload 'projectile-run-async-shell-command-in-root "projectile" "Invoke `async-shell-command' in the project's root." t nil)(autoload 'projectile-run-gdb "projectile" "Invoke `gdb' in the project's root." t nil)(autoload 'projectile-run-shell "projectile" "Invoke `shell' in the project's root.

Switch to the project specific shell buffer if it already exists.

Use a prefix argument ARG to indicate creation of a new process instead.

(fn ARG)" t nil)(autoload 'projectile-run-eshell "projectile" "Invoke `eshell' in the project's root.

Switch to the project specific eshell buffer if it already exists.

Use a prefix argument ARG to indicate creation of a new process instead.

(fn ARG)" t nil)(autoload 'projectile-run-ielm "projectile" "Invoke `ielm' in the project's root.

Switch to the project specific ielm buffer if it already exists.

Use a prefix argument ARG to indicate creation of a new process instead.

(fn ARG)" t nil)(autoload 'projectile-run-term "projectile" "Invoke `term' in the project's root.

Switch to the project specific term buffer if it already exists.

Use a prefix argument ARG to indicate creation of a new process instead.

(fn ARG)" t nil)(autoload 'projectile-run-vterm "projectile" "Invoke `vterm' in the project's root.

Switch to the project specific term buffer if it already exists.

Use a prefix argument ARG to indicate creation of a new process instead.

(fn &optional ARG)" t nil)(autoload 'projectile-replace "projectile" "Replace literal string in project using non-regexp `tags-query-replace'.

With a prefix argument ARG prompts you for a directory on which
to run the replacement.

(fn &optional ARG)" t nil)(autoload 'projectile-replace-regexp "projectile" "Replace a regexp in the project using `tags-query-replace'.

With a prefix argument ARG prompts you for a directory on which
to run the replacement.

(fn &optional ARG)" t nil)(autoload 'projectile-kill-buffers "projectile" "Kill project buffers.

The buffer are killed according to the value of
`projectile-kill-buffers-filter'." t nil)(autoload 'projectile-save-project-buffers "projectile" "Save all project buffers." t nil)(autoload 'projectile-dired "projectile" "Open `dired' at the root of the project." t nil)(autoload 'projectile-dired-other-window "projectile" "Open `dired'  at the root of the project in another window." t nil)(autoload 'projectile-dired-other-frame "projectile" "Open `dired' at the root of the project in another frame." t nil)(autoload 'projectile-vc "projectile" "Open `vc-dir' at the root of the project.

For git projects `magit-status-internal' is used if available.
For hg projects `monky-status' is used if available.

If PROJECT-ROOT is given, it is opened instead of the project
root directory of the current buffer file.  If interactively
called with a prefix argument, the user is prompted for a project
directory to open.

(fn &optional PROJECT-ROOT)" t nil)(autoload 'projectile-recentf "projectile" "Show a list of recently visited files in a project." t nil)(autoload 'projectile-configure-project "projectile" "Run project configure command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

(fn ARG)" t nil)(autoload 'projectile-compile-project "projectile" "Run project compilation command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

(fn ARG)" t nil)(autoload 'projectile-test-project "projectile" "Run project test command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

(fn ARG)" t nil)(autoload 'projectile-install-project "projectile" "Run project install command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

(fn ARG)" t nil)(autoload 'projectile-package-project "projectile" "Run project package command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

(fn ARG)" t nil)(autoload 'projectile-run-project "projectile" "Run project run command.

Normally you'll be prompted for a compilation command, unless
variable `compilation-read-command'.  You can force the prompt
with a prefix ARG.

(fn ARG)" t nil)(autoload 'projectile-repeat-last-command "projectile" "Run last projectile external command.

External commands are: `projectile-configure-project',
`projectile-compile-project', `projectile-test-project',
`projectile-install-project', `projectile-package-project',
and `projectile-run-project'.

If the prefix argument SHOW_PROMPT is non nil, the command can be edited.

(fn SHOW-PROMPT)" t nil)(autoload 'projectile-switch-project "projectile" "Switch to a project we have visited before.
Invokes the command referenced by `projectile-switch-project-action' on switch.
With a prefix ARG invokes `projectile-commander' instead of
`projectile-switch-project-action.'

(fn &optional ARG)" t nil)(autoload 'projectile-switch-open-project "projectile" "Switch to a project we have currently opened.
Invokes the command referenced by `projectile-switch-project-action' on switch.
With a prefix ARG invokes `projectile-commander' instead of
`projectile-switch-project-action.'

(fn &optional ARG)" t nil)(autoload 'projectile-find-file-in-directory "projectile" "Jump to a file in a (maybe regular) DIRECTORY.

This command will first prompt for the directory the file is in.

(fn &optional DIRECTORY)" t nil)(autoload 'projectile-find-file-in-known-projects "projectile" "Jump to a file in any of the known projects." t nil)(autoload 'projectile-cleanup-known-projects "projectile" "Remove known projects that don't exist anymore." t nil)(autoload 'projectile-clear-known-projects "projectile" "Clear both `projectile-known-projects' and `projectile-known-projects-file'." t nil)(autoload 'projectile-remove-known-project "projectile" "Remove PROJECT from the list of known projects.

(fn &optional PROJECT)" t nil)(autoload 'projectile-remove-current-project-from-known-projects "projectile" "Remove the current project from the list of known projects." t nil)(autoload 'projectile-add-known-project "projectile" "Add PROJECT-ROOT to the list of known projects.

(fn PROJECT-ROOT)" t nil)(autoload 'projectile-ibuffer "projectile" "Open an IBuffer window showing all buffers in the current project.

Let user choose another project when PROMPT-FOR-PROJECT is supplied.

(fn PROMPT-FOR-PROJECT)" t nil)(autoload 'projectile-commander "projectile" "Execute a Projectile command with a single letter.
The user is prompted for a single character indicating the action to invoke.
The `?' character describes then
available actions.

See `def-projectile-commander-method' for defining new methods." t nil)(autoload 'projectile-browse-dirty-projects "projectile" "Browse dirty version controlled projects.

With a prefix argument, or if CACHED is non-nil, try to use the cached
dirty project list.

(fn &optional CACHED)" t nil)(autoload 'projectile-edit-dir-locals "projectile" "Edit or create a .dir-locals.el file of the project." t nil)(defvar projectile-mode nil "Non-nil if Projectile mode is enabled.
See the `projectile-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `projectile-mode'.")(autoload 'projectile-mode "projectile" "Minor mode to assist project management and navigation.

When called interactively, toggle `projectile-mode'.  With prefix
ARG, enable `projectile-mode' if ARG is positive, otherwise disable
it.

When called from Lisp, enable `projectile-mode' if ARG is omitted,
nil or positive.  If ARG is `toggle', toggle `projectile-mode'.
Otherwise behave as if called interactively.

\\{projectile-mode-map}

(fn &optional ARG)" t nil)(define-obsolete-function-alias 'projectile-global-mode 'projectile-mode "1.0")(autoload 'pkg-info-library-original-version "pkg-info" "Get the original version in the header of LIBRARY.

The original version is stored in the X-Original-Version header.
This header is added by the MELPA package archive to preserve
upstream version numbers.

LIBRARY is either a symbol denoting a named feature, or a library
name as string.

If SHOW is non-nil, show the version in the minibuffer.

Return the version from the header of LIBRARY as list.  Signal an
error if the LIBRARY was not found or had no X-Original-Version
header.

See Info node `(elisp)Library Headers' for more information
about library headers.

(fn LIBRARY &optional SHOW)" t nil)(autoload 'pkg-info-library-version "pkg-info" "Get the version in the header of LIBRARY.

LIBRARY is either a symbol denoting a named feature, or a library
name as string.

If SHOW is non-nil, show the version in the minibuffer.

Return the version from the header of LIBRARY as list.  Signal an
error if the LIBRARY was not found or had no proper header.

See Info node `(elisp)Library Headers' for more information
about library headers.

(fn LIBRARY &optional SHOW)" t nil)(autoload 'pkg-info-defining-library-original-version "pkg-info" "Get the original version of the library defining FUNCTION.

The original version is stored in the X-Original-Version header.
This header is added by the MELPA package archive to preserve
upstream version numbers.

If SHOW is non-nil, show the version in mini-buffer.

This function is mainly intended to find the version of a major
or minor mode, i.e.

   (pkg-info-defining-library-version 'flycheck-mode)

Return the version of the library defining FUNCTION.  Signal an
error if FUNCTION is not a valid function, if its defining
library was not found, or if the library had no proper version
header.

(fn FUNCTION &optional SHOW)" t nil)(autoload 'pkg-info-defining-library-version "pkg-info" "Get the version of the library defining FUNCTION.

If SHOW is non-nil, show the version in mini-buffer.

This function is mainly intended to find the version of a major
or minor mode, i.e.

   (pkg-info-defining-library-version 'flycheck-mode)

Return the version of the library defining FUNCTION.  Signal an
error if FUNCTION is not a valid function, if its defining
library was not found, or if the library had no proper version
header.

(fn FUNCTION &optional SHOW)" t nil)(autoload 'pkg-info-package-version "pkg-info" "Get the version of an installed PACKAGE.

If SHOW is non-nil, show the version in the minibuffer.

Return the version as list, or nil if PACKAGE is not installed.

(fn PACKAGE &optional SHOW)" t nil)(autoload 'pkg-info-version-info "pkg-info" "Obtain complete version info for LIBRARY and PACKAGE.

LIBRARY is a symbol denoting a named feature, or a library name
as string.  PACKAGE is a symbol denoting an ELPA package.  If
omitted or nil, default to LIBRARY.

If SHOW is non-nil, show the version in the minibuffer.

When called interactively, prompt for LIBRARY.  When called
interactively with prefix argument, prompt for PACKAGE as well.

Return a string with complete version information for LIBRARY.
This version information contains the version from the headers of
LIBRARY, and the version of the installed PACKAGE, the LIBRARY is
part of.  If PACKAGE is not installed, or if the PACKAGE version
is the same as the LIBRARY version, do not include a package
version.

(fn LIBRARY &optional PACKAGE SHOW)" t nil)(autoload 'general-define-key "general" "The primary key definition function provided by general.el.

Define MAPS, optionally using DEFINER, in the keymap(s) corresponding to STATES
and KEYMAPS.

MAPS consists of paired keys (vectors or strings; also see
`general-implicit-kbd') and definitions (those mentioned in `define-key''s
docstring and general.el's \"extended\" definitions). All pairs (when not
ignored) will be recorded and can be later displayed with
`general-describe-keybindings'.

If DEFINER is specified, a custom key definer will be used to bind MAPS. See
general.el's documentation/README for more information.

Unlike with normal key definitions functions, the keymaps in KEYMAPS should be
quoted (this allows using the keymap name for other purposes, e.g. deferring
keybindings if the keymap symbol is not bound, optionally inferring the
corresponding major mode for a symbol by removing \"-map\" for :which-key,
easily storing the keymap name for use with `general-describe-keybindings',
etc.). Note that general.el provides other key definer macros that do not
require quoting keymaps.

STATES corresponds to the evil state(s) to bind the keys in. Non-evil users
should not set STATES. When STATES is non-nil, `evil-define-key*' will be
used (the evil auxiliary keymaps corresponding STATES and KEYMAPS will be used);
otherwise `define-key' will be used (unless DEFINER is specified). KEYMAPS
defaults to 'global. There is also 'local, which create buffer-local
keybindings for both evil and non-evil keybindings. There are other special,
user-alterable \"shorthand\" symbols for keymaps and states (see
`general-keymap-aliases' and `general-state-aliases').

Note that STATES and KEYMAPS can either be lists or single symbols. If any
keymap does not exist, those keybindings will be deferred until the keymap does
exist, so using `eval-after-load' is not necessary with this function.

PREFIX corresponds to a key to prefix keys in MAPS with and defaults to none. To
bind/unbind a key specified with PREFIX, \"\" can be specified as a key in
MAPS (e.g. ...:prefix \"SPC\" \"\" nil... will unbind space).

The keywords in this paragraph are only useful for evil users. If
NON-NORMAL-PREFIX is specified, this prefix will be used instead of PREFIX for
states in `general-non-normal-states' (e.g. the emacs and insert states). This
argument will only have an effect if one of these states is in STATES or if
corresponding global keymap (e.g. `evil-insert-state-map') is in KEYMAPS.
Alternatively, GLOBAL-PREFIX can be used with PREFIX and/or NON-NORMAL-PREFIX to
bind keys in all states under the specified prefix. Like with NON-NORMAL-PREFIX,
GLOBAL-PREFIX will prevent PREFIX from applying to `general-non-normal-states'.
INFIX can be used to append a string to all of the specified prefixes. This is
potentially useful when you are using GLOBAL-PREFIX and/or NON-NORMAL-PREFIX so
that you can sandwich keys in between all the prefixes and the specified keys in
MAPS. This may be particularly useful if you are using default prefixes in a
wrapper function/macro so that you can add to them without needing to re-specify
all of them. If none of the other prefix keyword arguments are specified, INFIX
will have no effect.

If PREFIX-COMMAND or PREFIX-MAP is specified, a prefix command and/or keymap
will be created. PREFIX-NAME can be additionally specified to set the keymap
menu name/prompt. If PREFIX-COMMAND is specified, `define-prefix-command' will
be used. Otherwise, only a prefix keymap will be created. Previously created
prefix commands/keymaps will never be redefined/cleared. All prefixes (including
the INFIX key, if specified) will then be bound to PREFIX-COMMAND or PREFIX-MAP.
If the user did not specify any PREFIX or manually specify any KEYMAPS, general
will bind all MAPS in the prefix keymap corresponding to either PREFIX-MAP or
PREFIX-COMMAND instead of in the default keymap.

PREDICATE corresponds to a predicate to check to determine whether a definition
should be active (e.g. \":predicate '(eobp)\"). Definitions created with a
predicate will only be active when the predicate is true. When the predicate is
false, key lookup will continue to search for a match in lower-precedence
keymaps.

In addition to the normal definitions supported by `define-key', general.el also
provides \"extended\" definitions, which are plists containing the normal
definition as well as other keywords. For example, PREDICATE can be specified
globally or locally in an extended definition. New global (~general-define-key~)
and local (extended definition) keywords can be added by the user. See
`general-extended-def-keywords' and general.el's documentation/README for more
information.

PACKAGE is the global version of the extended definition keyword that specifies
the package a keymap is defined in (used for \"autoloading\" keymaps)

PROPERTIES, REPEAT, and JUMP are the global versions of the extended definition
keywords used for adding evil command properties to commands.

MAJOR-MODES, WK-MATCH-KEYS, WK-MATCH-BINDINGS, and WK-FULL-KEYS are the
corresponding global versions of which-key extended definition keywords. They
will only have an effect for extended definitions that specify :which-key or
:wk. See the section on extended definitions in the general.el
documentation/README for more information.

LISPY-PLIST and WORF-PLIST are the global versions of extended definition
keywords that are used for each corresponding custom DEFINER.

(fn &rest MAPS &key DEFINER (STATES general-default-states) (KEYMAPS general-default-keymaps KEYMAPS-SPECIFIED-P) (PREFIX general-default-prefix) (NON-NORMAL-PREFIX general-default-non-normal-prefix) (GLOBAL-PREFIX general-default-global-prefix) INFIX PREFIX-COMMAND PREFIX-MAP PREFIX-NAME PREDICATE PACKAGE PROPERTIES REPEAT JUMP MAJOR-MODES (WK-MATCH-KEYS t) (WK-MATCH-BINDING t) (WK-FULL-KEYS t) LISPY-PLIST WORF-PLIST &allow-other-keys)" nil nil)(autoload 'general-emacs-define-key "general" "A wrapper for `general-define-key' that is similar to `define-key'.
It has a positional argument for KEYMAPS (that will not be overridden by a later
:keymaps argument). Besides this, it acts the same as `general-define-key', and
ARGS can contain keyword arguments in addition to keybindings. This can
basically act as a drop-in replacement for `define-key', and unlike with
`general-define-key', KEYMAPS does not need to be quoted.

(fn KEYMAPS &rest ARGS)" nil t)(function-put 'general-emacs-define-key 'lisp-indent-function '1)(autoload 'general-evil-define-key "general" "A wrapper for `general-define-key' that is similar to `evil-define-key'.
It has positional arguments for STATES and KEYMAPS (that will not be overridden
by a later :keymaps or :states argument). Besides this, it acts the same as
`general-define-key', and ARGS can contain keyword arguments in addition to
keybindings. This can basically act as a drop-in replacement for
`evil-define-key', and unlike with `general-define-key', KEYMAPS does not need
to be quoted.

(fn STATES KEYMAPS &rest ARGS)" nil t)(function-put 'general-evil-define-key 'lisp-indent-function '2)(autoload 'general-def "general" "General definer that takes a variable number of positional arguments in ARGS.
This macro will act as `general-define-key', `general-emacs-define-key', or
`general-evil-define-key' based on how many of the initial arguments do not
correspond to keybindings. All quoted and non-quoted lists and symbols before
the first string, vector, or keyword are considered to be positional arguments.
This means that you cannot use a function or variable for a key that starts
immediately after the positional arguments. If you need to do this, you should
use one of the definers that `general-def' dispatches to or explicitly separate
the positional arguments from the maps with a bogus keyword pair like
\":start-maps t\"

(fn &rest ARGS)" nil t)(function-put 'general-def 'lisp-indent-function 'defun)(autoload 'general-create-definer "general" "A helper macro to create wrappers for `general-def'.
This can be used to create key definers that will use a certain keymap, evil
state, prefix key, etc. by default. NAME is the wrapper name and DEFAULTS are
the default arguments. WRAPPING can also be optionally specified to use a
different definer than `general-def'. It should not be quoted.

(fn NAME &rest DEFAULTS &key WRAPPING &allow-other-keys)" nil t)(function-put 'general-create-definer 'lisp-indent-function 'defun)(autoload 'general-defs "general" "A wrapper that splits into multiple `general-def's.
Each consecutive grouping of positional argument followed by keyword/argument
pairs (having only one or the other is fine) marks the start of a new section.
Each section corresponds to one use of `general-def'. This means that settings
only apply to the keybindings that directly follow.

Since positional arguments can appear at any point, unqouted symbols are always
considered to be positional arguments (e.g. a keymap). This means that variables
can never be used for keys with `general-defs'. Variables can still be used for
definitions or as arguments to keywords.

(fn &rest ARGS)" nil t)(function-put 'general-defs 'lisp-indent-function 'defun)(autoload 'general-unbind "general" "A wrapper for `general-def' to unbind multiple keys simultaneously.
Insert after all keys in ARGS before passing ARGS to `general-def.' \":with
 #'func\" can optionally specified to use a custom function instead (e.g.
 `ignore').

(fn &rest ARGS)" nil t)(function-put 'general-unbind 'lisp-indent-function 'defun)(autoload 'general-describe-keybindings "general" "Show all keys that have been bound with general in an org buffer.
Any local keybindings will be shown first followed by global keybindings.
With a non-nil prefix ARG only show bindings in active maps.

(fn &optional ARG)" t nil)(autoload 'general-key "general" "Act as KEY's definition in the current context.
This uses an extended menu item's capability of dynamically computing a
definition. It is recommended over `general-simulate-key' wherever possible. See
the docstring of `general-simulate-key' and the readme for information about the
benefits and downsides of `general-key'.

KEY should be a string given in `kbd' notation and should correspond to a single
definition (as opposed to a sequence of commands). When STATE is specified, look
up KEY with STATE as the current evil state. When specified, DOCSTRING will be
the menu item's name/description.

Let can be used to bind variables around key lookup. For example:
(general-key \"some key\"
  :let ((some-var some-val)))

SETUP and TEARDOWN can be used to run certain functions before and after key
lookup. For example, something similar to using :state 'emacs would be:
(general-key \"some key\"
  :setup (evil-local-mode -1)
  :teardown (evil-local-mode))

ACCEPT-DEFAULT, NO-REMAP, and POSITION are passed to `key-binding'.

(fn KEY &key STATE DOCSTRING LET SETUP TEARDOWN ACCEPT-DEFAULT NO-REMAP POSITION)" nil t)(function-put 'general-key 'lisp-indent-function '1)(autoload 'general-simulate-keys "general" "Deprecated. Please use `general-simulate-key' instead.

(fn KEYS &optional STATE KEYMAP (LOOKUP t) DOCSTRING NAME)" nil t)(autoload 'general-simulate-key "general" "Create and return a command that simulates KEYS in STATE and KEYMAP.

`general-key' should be prefered over this whenever possible as it is simpler
and has saner functionality in many cases because it does not rely on
`unread-command-events' (e.g. \"C-h k\" will show the docstring of the command
to be simulated ; see the readme for more information). The main downsides of
`general-key' are that it cannot simulate a command followed by keys or
subsequent commands, and which-key does not currently work well with it when
simulating a prefix key/incomplete key sequence.

KEYS should be a string given in `kbd' notation. It can also be a list of a
single command followed by a string of the key(s) to simulate after calling that
command. STATE should only be specified by evil users and should be a quoted
evil state. KEYMAP should not be quoted. Both STATE and KEYMAP aliases are
supported (but they have to be set when the macro is expanded). When neither
STATE or KEYMAP are specified, the key(s) will be simulated in the current
context.

If NAME is specified, it will replace the automatically generated function name.
NAME should not be quoted. If DOCSTRING is specified, it will replace the
automatically generated docstring.

Normally the generated function will look up KEY in the correct context to try
to match a command. To prevent this lookup, LOOKUP can be specified as nil.
Generally, you will want to keep LOOKUP non-nil because this will allow checking
the evil repeat property of matched commands to determine whether or not they
should be recorded. See the docstring for `general--simulate-keys' for more
information about LOOKUP.

When a WHICH-KEY description is specified, it will replace the command name in
the which-key popup.

When a command name is specified and that command has been remapped (i.e. [remap
command] is currently bound), the remapped version will be used instead of the
original command unless REMAP is specified as nil (it is true by default).

The advantages of this over a keyboard macro are as follows:
- Prefix arguments are supported
- The user can control the context in which the keys are simulated
- The user can simulate both a named command and keys
- The user can simulate an incomplete key sequence (e.g. for a keymap)

(fn KEYS &key STATE KEYMAP NAME DOCSTRING (LOOKUP t) WHICH-KEY (REMAP t))" nil t)(function-put 'general-simulate-key 'lisp-indent-function 'defun)(autoload 'general-key-dispatch "general" "Create and return a command that runs FALLBACK-COMMAND or a command in MAPS.
MAPS consists of <key> <command> pairs. If a key in MAPS is matched, the
corresponding command will be run. Otherwise FALLBACK-COMMAND will be run with
the unmatched keys. So, for example, if \"ab\" was pressed, and \"ab\" is not
one of the key sequences from MAPS, the FALLBACK-COMMAND will be run followed by
the simulated keypresses of \"ab\". Prefix arguments will still work regardless
of which command is run. This is useful for binding under non-prefix keys. For
example, this can be used to redefine a sequence like \"cw\" or \"cow\" in evil
but still have \"c\" work as `evil-change'. If TIMEOUT is specified,
FALLBACK-COMMAND will also be run in the case that the user does not press the
next key within the TIMEOUT (e.g. 0.5).

NAME and DOCSTRING are optional keyword arguments. They can be used to replace
the automatically generated name and docstring for the created function. By
default, `cl-gensym' is used to prevent name clashes (e.g. allows the user to
create multiple different commands using `self-insert-command' as the
FALLBACK-COMMAND without explicitly specifying NAME to manually prevent
clashes).

When INHERIT-KEYMAP is specified, all the keybindings from that keymap will be
inherited in MAPS.

When a WHICH-KEY description is specified, it will replace the command name in
the which-key popup.

When command to be executed has been remapped (i.e. [remap command] is currently
bound), the remapped version will be used instead of the original command unless
REMAP is specified as nil (it is true by default).

(fn FALLBACK-COMMAND &rest MAPS &key TIMEOUT INHERIT-KEYMAP NAME DOCSTRING WHICH-KEY (REMAP t) &allow-other-keys)" nil t)(function-put 'general-key-dispatch 'lisp-indent-function '1)(autoload 'general-predicate-dispatch "general" "

(fn FALLBACK-DEF &rest DEFS &key DOCSTRING &allow-other-keys)" nil t)(function-put 'general-predicate-dispatch 'lisp-indent-function '1)(autoload 'general-translate-key "general" "Translate keys in the keymap(s) corresponding to STATES and KEYMAPS.
STATES should be the name of an evil state, a list of states, or nil. KEYMAPS
should be a symbol corresponding to the keymap to make the translations in or a
list of keymap names. Keymap and state aliases are supported (as well as 'local
and 'global for KEYMAPS).

MAPS corresponds to a list of translations (key replacement pairs). For example,
specifying \"a\" \"b\" will bind \"a\" to \"b\"'s definition in the keymap.
Specifying nil as a replacement will unbind a key.

If DESTRUCTIVE is non-nil, the keymap will be destructively altered without
creating a backup. If DESTRUCTIVE is nil, store a backup of the keymap on the
initial invocation, and for future invocations always look up keys in the
original/backup keymap. On the other hand, if DESTRUCTIVE is non-nil, calling
this function multiple times with \"a\" \"b\" \"b\" \"a\", for example, would
continue to swap and unswap the definitions of these keys. This means that when
DESTRUCTIVE is non-nil, all related swaps/cycles should be done in the same
invocation.

If both MAPS and DESCTRUCTIVE are nil, only create the backup keymap.

(fn STATES KEYMAPS &rest MAPS &key DESTRUCTIVE &allow-other-keys)" nil nil)(function-put 'general-translate-key 'lisp-indent-function 'defun)(autoload 'general-swap-key "general" "Wrapper around `general-translate-key' for swapping keys.
STATES, KEYMAPS, and ARGS are passed to `general-translate-key'. ARGS should
consist of key swaps (e.g. \"a\" \"b\" is equivalent to \"a\" \"b\" \"b\" \"a\"
with `general-translate-key') and optionally keyword arguments for
`general-translate-key'.

(fn STATES KEYMAPS &rest ARGS)" nil t)(function-put 'general-swap-key 'lisp-indent-function 'defun)(autoload 'general-auto-unbind-keys "general" "Advise `define-key' to automatically unbind keys when necessary.
This will prevent errors when a sub-sequence of a key is already bound (e.g. the
user attempts to bind \"SPC a\" when \"SPC\" is bound, resulting in a \"Key
sequnce starts with non-prefix key\" error). When UNDO is non-nil, remove
advice.

(fn &optional UNDO)" nil nil)(autoload 'general-add-hook "general" "A drop-in replacement for `add-hook'.
Unlike `add-hook', HOOKS and FUNCTIONS can be single items or lists. APPEND and
LOCAL are passed directly to `add-hook'. When TRANSIENT is non-nil, each
function will remove itself from the hook it is in after it is run once. If
TRANSIENT is a function, call it on the return value in order to determine
whether to remove a function from the hook. For example, if TRANSIENT is
#'identity, remove each function only if it returns non-nil. TRANSIENT could
alternatively check something external and ignore the function's return value.

(fn HOOKS FUNCTIONS &optional APPEND LOCAL TRANSIENT)" nil nil)(autoload 'general-remove-hook "general" "A drop-in replacement for `remove-hook'.
Unlike `remove-hook', HOOKS and FUNCTIONS can be single items or lists. LOCAL is
passed directly to `remove-hook'.

(fn HOOKS FUNCTIONS &optional LOCAL)" nil nil)(autoload 'general-advice-add "general" "A drop-in replacement for `advice-add'.
SYMBOLS, WHERE, FUNCTIONS, and PROPS correspond to the arguments for
`advice-add'. Unlike `advice-add', SYMBOLS and FUNCTIONS can be single items or
lists. When TRANSIENT is non-nil, each function will remove itself as advice
after it is run once. If TRANSIENT is a function, call it on the return value in
order to determine whether to remove a function as advice. For example, if
TRANSIENT is #'identity, remove each function only if it returns non-nil.
TRANSIENT could alternatively check something external and ignore the function's
return value.

(fn SYMBOLS WHERE FUNCTIONS &optional PROPS TRANSIENT)" nil nil)(autoload 'general-add-advice "general")(autoload 'general-advice-remove "general" "A drop-in replacement for `advice-remove'.
Unlike `advice-remove', SYMBOLS and FUNCTIONS can be single items or lists.

(fn SYMBOLS FUNCTIONS)" nil nil)(autoload 'general-remove-advice "general")(autoload 'general-evil-setup "general" "Set up some basic equivalents for vim mapping functions.
This creates global key definition functions for the evil states.
Specifying SHORT-NAMES as non-nil will create non-prefixed function
aliases such as `nmap' for `general-nmap'.

(fn &optional SHORT-NAMES _)" nil nil)(defvar which-key-mode nil "Non-nil if Which-Key mode is enabled.
See the `which-key-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `which-key-mode'.")(autoload 'which-key-mode "which-key" "Toggle which-key-mode.

If called interactively, enable Which-Key mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'which-key-setup-side-window-right "which-key" "Apply suggested settings for side-window that opens on right." t nil)(autoload 'which-key-setup-side-window-right-bottom "which-key" "Apply suggested settings for side-window that opens on right
if there is space and the bottom otherwise." t nil)(autoload 'which-key-setup-side-window-bottom "which-key" "Apply suggested settings for side-window that opens on
bottom." t nil)(autoload 'which-key-setup-minibuffer "which-key" "Apply suggested settings for minibuffer.
Do not use this setup if you use the paging commands. Instead use
`which-key-setup-side-window-bottom', which is nearly identical
but more functional." t nil)(autoload 'which-key-add-key-based-replacements "which-key" "Replace the description of KEY-SEQUENCE with REPLACEMENT.
KEY-SEQUENCE is a string suitable for use in `kbd'. REPLACEMENT
may either be a string, as in

(which-key-add-key-based-replacements \"C-x 1\" \"maximize\")

a cons of two strings as in

(which-key-add-key-based-replacements \"C-x 8\"
                                        '(\"unicode\" . \"Unicode keys\"))

or a function that takes a (KEY . BINDING) cons and returns a
replacement.

In the second case, the second string is used to provide a longer
name for the keys under a prefix.

MORE allows you to specifcy additional KEY REPLACEMENT pairs.  All
replacements are added to
`which-key-key-based-description-replacement-alist'.

(fn KEY-SEQUENCE REPLACEMENT &rest MORE)" nil nil)(autoload 'which-key-add-major-mode-key-based-replacements "which-key" "Functions like `which-key-add-key-based-replacements'.
The difference is that MODE specifies the `major-mode' that must
be active for KEY-SEQUENCE and REPLACEMENT (MORE contains
addition KEY-SEQUENCE REPLACEMENT pairs) to apply.

(fn MODE KEY-SEQUENCE REPLACEMENT &rest MORE)" nil nil)(autoload 'which-key-reload-key-sequence "which-key" "Simulate entering the key sequence KEY-SEQ.
KEY-SEQ should be a list of events as produced by
`listify-key-sequence'. If nil, KEY-SEQ defaults to
`which-key--current-key-list'. Any prefix arguments that were
used are reapplied to the new key sequence.

(fn &optional KEY-SEQ)" nil nil)(autoload 'which-key-show-standard-help "which-key" "Call the command in `which-key--prefix-help-cmd-backup'.
Usually this is `describe-prefix-bindings'.

(fn &optional _)" t nil)(autoload 'which-key-show-next-page-no-cycle "which-key" "Show next page of keys unless on the last page, in which case
call `which-key-show-standard-help'." t nil)(autoload 'which-key-show-previous-page-no-cycle "which-key" "Show previous page of keys unless on the first page, in which
case do nothing." t nil)(autoload 'which-key-show-next-page-cycle "which-key" "Show the next page of keys, cycling from end to beginning
after last page.

(fn &optional _)" t nil)(autoload 'which-key-show-previous-page-cycle "which-key" "Show the previous page of keys, cycling from beginning to end
after first page.

(fn &optional _)" t nil)(autoload 'which-key-show-top-level "which-key" "Show top-level bindings.

(fn &optional _)" t nil)(autoload 'which-key-show-major-mode "which-key" "Show top-level bindings in the map of the current major mode.

This function will also detect evil bindings made using
`evil-define-key' in this map. These bindings will depend on the
current evil state. 

(fn &optional ALL)" t nil)(autoload 'which-key-show-full-major-mode "which-key" "Show all bindings in the map of the current major mode.

This function will also detect evil bindings made using
`evil-define-key' in this map. These bindings will depend on the
current evil state. " t nil)(autoload 'which-key-dump-bindings "which-key" "Dump bindings from PREFIX into buffer named BUFFER-NAME.

PREFIX should be a string suitable for `kbd'.

(fn PREFIX BUFFER-NAME)" t nil)(autoload 'which-key-undo-key "which-key" "Undo last keypress and force which-key update.

(fn &optional _)" t nil)(autoload 'which-key-C-h-dispatch "which-key" "Dispatch C-h commands by looking up key in
`which-key-C-h-map'. This command is always accessible (from any
prefix) if `which-key-use-C-h-commands' is non nil." t nil)(autoload 'which-key-show-keymap "which-key" "Show the top-level bindings in KEYMAP using which-key. KEYMAP
is selected interactively from all available keymaps.

If NO-PAGING is non-nil, which-key will not intercept subsequent
keypresses for the paging functionality.

(fn KEYMAP &optional NO-PAGING)" t nil)(autoload 'which-key-show-full-keymap "which-key" "Show all bindings in KEYMAP using which-key. KEYMAP is
selected interactively from all available keymaps.

(fn KEYMAP)" t nil)(autoload 'which-key-show-minor-mode-keymap "which-key" "Show the top-level bindings in KEYMAP using which-key. KEYMAP
is selected interactively by mode in `minor-mode-map-alist'.

(fn &optional ALL)" t nil)(autoload 'which-key-show-full-minor-mode-keymap "which-key" "Show all bindings in KEYMAP using which-key. KEYMAP
is selected interactively by mode in `minor-mode-map-alist'." t nil)(autoload 'company-mode "company" "\"complete anything\"; is an in-buffer completion framework.
Completion starts automatically, depending on the values
`company-idle-delay' and `company-minimum-prefix-length'.

If called interactively, enable Company mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

Completion can be controlled with the commands:
`company-complete-common', `company-complete-selection', `company-complete',
`company-select-next', `company-select-previous'.  If these commands are
called before `company-idle-delay', completion will also start.

Completions can be searched with `company-search-candidates' or
`company-filter-candidates'.  These can be used while completion is
inactive, as well.

The completion data is retrieved using `company-backends' and displayed
using `company-frontends'.  If you want to start a specific backend, call
it interactively or use `company-begin-backend'.

By default, the completions list is sorted alphabetically, unless the
backend chooses otherwise, or `company-transformers' changes it later.

regular keymap (`company-mode-map'):

\\{company-mode-map}
keymap during active completions (`company-active-map'):

\\{company-active-map}

(fn &optional ARG)" t nil)(put 'global-company-mode 'globalized-minor-mode t)(defvar global-company-mode nil "Non-nil if Global Company mode is enabled.
See the `global-company-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-company-mode'.")(autoload 'global-company-mode "company" "Toggle Company mode in all buffers.
With prefix ARG, enable Global Company mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Company mode is enabled in all buffers where
`company-mode-on' would do it.
See `company-mode' for more information on Company mode.

(fn &optional ARG)" t nil)(autoload 'company-manual-begin "company" nil t nil)(autoload 'company-complete "company" "Insert the common part of all candidates or the current selection.
The first time this is called, the common part is inserted, the second
time, or when the selection has been changed, the selected candidate is
inserted." t nil)(autoload 'company-abbrev "company-abbrev" "`company-mode' completion backend for abbrev.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-bbdb "company-bbdb" "`company-mode' completion backend for BBDB.

(fn COMMAND &optional ARG &rest IGNORE)" t nil)(autoload 'company-css "company-css" "`company-mode' completion backend for `css-mode'.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-dabbrev "company-dabbrev" "dabbrev-like `company-mode' completion backend.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-dabbrev-code "company-dabbrev-code" "dabbrev-like `company-mode' backend for code.
The backend looks for all symbols in the current buffer that aren't in
comments or strings.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-elisp "company-elisp" "`company-mode' completion backend for Emacs Lisp.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-etags "company-etags" "`company-mode' completion backend for etags.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-files "company-files" "`company-mode' completion backend existing file names.
Completions works for proper absolute and relative files paths.
File paths with spaces are only supported inside strings.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-gtags "company-gtags" "`company-mode' completion backend for GNU Global.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-ispell "company-ispell" "`company-mode' completion backend using Ispell.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-keywords "company-keywords" "`company-mode' backend for programming language keywords.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-nxml "company-nxml" "`company-mode' completion backend for `nxml-mode'.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-oddmuse "company-oddmuse" "`company-mode' completion backend for `oddmuse-mode'.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-semantic "company-semantic" "`company-mode' completion backend using CEDET Semantic.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-tempo "company-tempo" "`company-mode' completion backend for tempo.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-tng-frontend "company-tng" "When the user changes the selection at least once, this
frontend will display the candidate in the buffer as if it's
already there and any key outside of `company-active-map' will
confirm the selection and finish the completion.

(fn COMMAND)" nil nil)(autoload 'company-tng-configure-default "company-tng" "Applies the default configuration to enable company-tng." nil nil)(autoload 'company-yasnippet "company-yasnippet" "`company-mode' backend for `yasnippet'.

This backend should be used with care, because as long as there are
snippets defined for the current major mode, this backend will always
shadow backends that come after it.  Recommended usages:

* In a buffer-local value of `company-backends', grouped with a backend or
  several that provide actual text completions.

  (add-hook 'js-mode-hook
            (lambda ()
              (set (make-local-variable 'company-backends)
                   '((company-dabbrev-code company-yasnippet)))))

* After keyword `:with', grouped with other backends.

  (push '(company-semantic :with company-yasnippet) company-backends)

* Not in `company-backends', just bound to a key.

  (global-set-key (kbd \"C-c y\") 'company-yasnippet)

(fn COMMAND &optional ARG &rest IGNORE)" t nil)(autoload 'company-dict-refresh "company-dict" "Refresh all loaded dictionaries." t nil)(autoload 'company-dict "company-dict" "`company-mode' backend for user-provided dictionaries. Dictionary files are lazy
loaded.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'swiper-avy "swiper" "Jump to one of the current swiper candidates." t nil)(autoload 'swiper-backward "swiper" "`isearch-backward' with an overview.
When non-nil, INITIAL-INPUT is the initial search pattern.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'swiper-thing-at-point "swiper" "`swiper' with `ivy-thing-at-point'." t nil)(autoload 'swiper-all-thing-at-point "swiper" "`swiper-all' with `ivy-thing-at-point'." t nil)(autoload 'swiper "swiper" "`isearch-forward' with an overview.
When non-nil, INITIAL-INPUT is the initial search pattern.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'swiper-all "swiper" "Run `swiper' for all open buffers.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'swiper-isearch "swiper" "A `swiper' that's not line-based.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'swiper-isearch-backward "swiper" "Like `swiper-isearch' but the first result is before the point.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'ivy-resume "ivy" "Resume the last completion session, or SESSION if non-nil.
With a prefix arg, try to restore a recorded completion session,
if one exists.

(fn &optional SESSION)" t nil)(autoload 'ivy-read "ivy" "Read a string in the minibuffer, with completion.

PROMPT is a string, normally ending in a colon and a space.
`ivy-count-format' is prepended to PROMPT during completion.

COLLECTION is either a list of strings, a function, an alist, or
a hash table, supplied for `minibuffer-completion-table'.

PREDICATE is applied to filter out the COLLECTION immediately.
This argument is for compatibility with `completing-read'.

When REQUIRE-MATCH is non-nil, only members of COLLECTION can be
selected.

If INITIAL-INPUT is non-nil, then insert that input in the
minibuffer initially.

HISTORY is a name of a variable to hold the completion session
history.

KEYMAP is composed with `ivy-minibuffer-map'.

PRESELECT, when non-nil, determines which one of the candidates
matching INITIAL-INPUT to select initially.  An integer stands
for the position of the desired candidate in the collection,
counting from zero.  Otherwise, use the first occurrence of
PRESELECT in the collection.  Comparison is first done with
`equal'.  If that fails, and when applicable, match PRESELECT as
a regular expression.

DEF is for compatibility with `completing-read'.

UPDATE-FN is called each time the candidate list is re-displayed.

When SORT is non-nil, `ivy-sort-functions-alist' determines how
to sort candidates before displaying them.

ACTION is a function to call after selecting a candidate.
It takes one argument, the selected candidate. If COLLECTION is
an alist, the argument is a cons cell, otherwise it's a string.

MULTI-ACTION, when non-nil, is called instead of ACTION when
there are marked candidates. It takes the list of candidates as
its only argument. When it's nil, ACTION is called on each marked
candidate.

UNWIND is a function of no arguments to call before exiting.

RE-BUILDER is a function transforming input text into a regex
pattern.

MATCHER is a function which can override how candidates are
filtered based on user input.  It takes a regex pattern and a
list of candidates, and returns the list of matching candidates.

DYNAMIC-COLLECTION is a boolean specifying whether the list of
candidates is updated after each input by calling COLLECTION.

EXTRA-PROPS is a plist that can be used to store
collection-specific session-specific data.

CALLER is a symbol to uniquely identify the caller to `ivy-read'.
It is used, along with COLLECTION, to determine which
customizations apply to the current completion session.

(fn PROMPT COLLECTION &key PREDICATE REQUIRE-MATCH INITIAL-INPUT HISTORY PRESELECT DEF KEYMAP UPDATE-FN SORT ACTION MULTI-ACTION UNWIND RE-BUILDER MATCHER DYNAMIC-COLLECTION EXTRA-PROPS CALLER)" nil nil)(autoload 'ivy-completing-read "ivy" "Read a string in the minibuffer, with completion.

This interface conforms to `completing-read' and can be used for
`completing-read-function'.

PROMPT is a string that normally ends in a colon and a space.
COLLECTION is either a list of strings, an alist, an obarray, or a hash table.
PREDICATE limits completion to a subset of COLLECTION.
REQUIRE-MATCH is a boolean value or a symbol.  See `completing-read'.
INITIAL-INPUT is a string inserted into the minibuffer initially.
HISTORY is a list of previously selected inputs.
DEF is the default value.
INHERIT-INPUT-METHOD is currently ignored.

(fn PROMPT COLLECTION &optional PREDICATE REQUIRE-MATCH INITIAL-INPUT HISTORY DEF INHERIT-INPUT-METHOD)" nil nil)(defvar ivy-mode nil "Non-nil if Ivy mode is enabled.
See the `ivy-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ivy-mode'.")(autoload 'ivy-mode "ivy" "Toggle Ivy mode on or off.
Turn Ivy mode on if ARG is positive, off otherwise.
Turning on Ivy mode sets `completing-read-function' to
`ivy-completing-read'.

Global bindings:
\\{ivy-mode-map}

Minibuffer bindings:
\\{ivy-minibuffer-map}

(fn &optional ARG)" t nil)(autoload 'ivy-switch-buffer "ivy" "Switch to another buffer." t nil)(autoload 'ivy-switch-view "ivy" "Switch to one of the window views stored by `ivy-push-view'." t nil)(autoload 'ivy-switch-buffer-other-window "ivy" "Switch to another buffer in another window." t nil)(autoload 'defhydra "hydra" "Create a Hydra - a family of functions with prefix NAME.

NAME should be a symbol, it will be the prefix of all functions
defined here.

BODY has the format:

    (BODY-MAP BODY-KEY &rest BODY-PLIST)

DOCSTRING will be displayed in the echo area to identify the
Hydra.  When DOCSTRING starts with a newline, special Ruby-style
substitution will be performed by `hydra--format'.

Functions are created on basis of HEADS, each of which has the
format:

    (KEY CMD &optional HINT &rest PLIST)

BODY-MAP is a keymap; `global-map' is used quite often.  Each
function generated from HEADS will be bound in BODY-MAP to
BODY-KEY + KEY (both are strings passed to `kbd'), and will set
the transient map so that all following heads can be called
though KEY only.  BODY-KEY can be an empty string.

CMD is a callable expression: either an interactive function
name, or an interactive lambda, or a single sexp (it will be
wrapped in an interactive lambda).

HINT is a short string that identifies its head.  It will be
printed beside KEY in the echo erea if `hydra-is-helpful' is not
nil.  If you don't even want the KEY to be printed, set HINT
explicitly to nil.

The heads inherit their PLIST from BODY-PLIST and are allowed to
override some keys.  The keys recognized are :exit, :bind, and :column.
:exit can be:

- nil (default): this head will continue the Hydra state.
- t: this head will stop the Hydra state.

:bind can be:
- nil: this head will not be bound in BODY-MAP.
- a lambda taking KEY and CMD used to bind a head.

:column is a string that sets the column for all subsequent heads.

It is possible to omit both BODY-MAP and BODY-KEY if you don't
want to bind anything.  In that case, typically you will bind the
generated NAME/body command.  This command is also the return
result of `defhydra'.

(fn NAME BODY &optional DOCSTRING &rest HEADS)" nil t)(function-put 'defhydra 'lisp-indent-function 'defun)(function-put 'defhydra 'doc-string-elt '3)(autoload 'counsel-company "counsel" "Complete using `company-candidates'." t nil)(autoload 'counsel-irony "counsel" "Inline C/C++ completion using Irony." t nil)(autoload 'counsel-describe-variable "counsel" "Forward to `describe-variable'.

Variables declared using `defcustom' are highlighted according to
`ivy-highlight-face'." t nil)(autoload 'counsel-describe-function "counsel" "Forward to `describe-function'.

Interactive functions (i.e., commands) are highlighted according
to `ivy-highlight-face'." t nil)(autoload 'counsel-describe-symbol "counsel" "Forward to `describe-symbol'." t nil)(autoload 'counsel-set-variable "counsel" "Set a variable SYM, with completion.

When the selected variable is a `defcustom' with the type boolean
or radio, offer completion of all possible values.

Otherwise, offer a variant of `eval-expression', with the initial
input corresponding to the chosen variable.

With a prefix arg, restrict list to variables defined using
`defcustom'.

(fn SYM)" t nil)(autoload 'counsel-apropos "counsel" "Show all matching symbols.
See `apropos' for further information on what is considered
a symbol and how to search for them." t nil)(autoload 'counsel-info-lookup-symbol "counsel" "Forward SYMBOL to `info-lookup-symbol' with ivy completion.
With prefix arg MODE a query for the symbol help mode is offered.

(fn SYMBOL &optional MODE)" t nil)(autoload 'counsel-M-x "counsel" "Ivy version of `execute-extended-command'.
Optional INITIAL-INPUT is the initial input in the minibuffer.
This function integrates with either the `amx' or `smex' package
when available, in that order of precedence.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel-command-history "counsel" "Show the history of commands." t nil)(autoload 'counsel-load-library "counsel" "Load a selected the Emacs Lisp library.
The libraries are offered from `load-path'." t nil)(autoload 'counsel-find-library "counsel" "Visit a selected the Emacs Lisp library.
The libraries are offered from `load-path'." t nil)(autoload 'counsel-load-theme "counsel" "Forward to `load-theme'.
Usable with `ivy-resume', `ivy-next-line-and-call' and
`ivy-previous-line-and-call'." t nil)(autoload 'counsel-descbinds "counsel" "Show a list of all defined keys and their definitions.
If non-nil, show only bindings that start with PREFIX.
BUFFER defaults to the current one.

(fn &optional PREFIX BUFFER)" t nil)(autoload 'counsel-describe-face "counsel" "Completion for `describe-face'." t nil)(autoload 'counsel-faces "counsel" "Complete faces with preview.
Actions are provided by default for describing or customizing the
selected face." t nil)(autoload 'counsel-git "counsel" "Find file in the current Git repository.
INITIAL-INPUT can be given as the initial minibuffer input.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel-git-grep "counsel" "Grep for a string in the current Git repository.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.
When CMD is a string, use it as a \"git grep\" command.
When CMD is non-nil, prompt for a specific \"git grep\" command.

(fn &optional INITIAL-INPUT INITIAL-DIRECTORY CMD)" t nil)(autoload 'counsel-git-stash "counsel" "Search through all available git stashes." t nil)(autoload 'counsel-git-change-worktree "counsel" "Find the file corresponding to the current buffer on a different worktree." t nil)(autoload 'counsel-git-checkout "counsel" "Call the \"git checkout\" command." t nil)(autoload 'counsel-git-log "counsel" "Call the \"git log --grep\" shell command." t nil)(autoload 'counsel-find-file "counsel" "Forward to `find-file'.
When INITIAL-INPUT is non-nil, use it in the minibuffer during completion.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel-dired "counsel" "Forward to `dired'.
When INITIAL-INPUT is non-nil, use it in the minibuffer during completion.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel-recentf "counsel" "Find a file on `recentf-list'." t nil)(autoload 'counsel-buffer-or-recentf "counsel" "Find a buffer visiting a file or file on `recentf-list'." t nil)(autoload 'counsel-bookmark "counsel" "Forward to `bookmark-jump' or `bookmark-set' if bookmark doesn't exist." t nil)(autoload 'counsel-bookmarked-directory "counsel" "Ivy interface for bookmarked directories.

With a prefix argument, this command creates a new bookmark which points to the
current value of `default-directory'." t nil)(autoload 'counsel-file-register "counsel" "Search file in register.

You cannot use Emacs' normal register commands to create file
registers.  Instead you must use the `set-register' function like
so: `(set-register ?i \"/home/eric/.emacs.d/init.el\")'.  Now you
can use `C-x r j i' to open that file." t nil)(autoload 'counsel-locate-action-extern "counsel" "Pass X to `xdg-open' or equivalent command via the shell.

(fn X)" t nil)(autoload 'counsel-locate "counsel" "Call the \"locate\" shell command.
INITIAL-INPUT can be given as the initial minibuffer input.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel-tracker "counsel" nil t nil)(autoload 'counsel-fzf "counsel" "Open a file using the fzf shell command.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.
FZF-PROMPT, if non-nil, is passed as `ivy-read' prompt argument.

(fn &optional INITIAL-INPUT INITIAL-DIRECTORY FZF-PROMPT)" t nil)(autoload 'counsel-dpkg "counsel" "Call the \"dpkg\" shell command." t nil)(autoload 'counsel-rpm "counsel" "Call the \"rpm\" shell command." t nil)(autoload 'counsel-file-jump "counsel" "Jump to a file below the current directory.
List all files within the current directory or any of its sub-directories.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.

(fn &optional INITIAL-INPUT INITIAL-DIRECTORY)" t nil)(autoload 'counsel-dired-jump "counsel" "Jump to a directory (see `dired-jump') below the current directory.
List all sub-directories within the current directory.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.

(fn &optional INITIAL-INPUT INITIAL-DIRECTORY)" t nil)(autoload 'counsel-ag "counsel" "Grep for a string in a root directory using ag.

By default, the root directory is the first directory containing a .git subdirectory.

INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.
EXTRA-AG-ARGS, if non-nil, is appended to `counsel-ag-base-command'.
AG-PROMPT, if non-nil, is passed as `ivy-read' prompt argument.
CALLER is passed to `ivy-read'.

With a `\\[universal-argument]' prefix argument, prompt for INITIAL-DIRECTORY.
With a `\\[universal-argument] \\[universal-argument]' prefix argument, prompt additionally for EXTRA-AG-ARGS.

(fn &optional INITIAL-INPUT INITIAL-DIRECTORY EXTRA-AG-ARGS AG-PROMPT &key CALLER)" t nil)(autoload 'counsel-pt "counsel" "Grep for a string in the current directory using pt.
INITIAL-INPUT can be given as the initial minibuffer input.
This uses `counsel-ag' with `counsel-pt-base-command' instead of
`counsel-ag-base-command'.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel-ack "counsel" "Grep for a string in the current directory using ack.
INITIAL-INPUT can be given as the initial minibuffer input.
This uses `counsel-ag' with `counsel-ack-base-command' replacing
`counsel-ag-base-command'.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel-rg "counsel" "Grep for a string in the current directory using rg.
INITIAL-INPUT can be given as the initial minibuffer input.
INITIAL-DIRECTORY, if non-nil, is used as the root directory for search.
EXTRA-RG-ARGS string, if non-nil, is appended to `counsel-rg-base-command'.
RG-PROMPT, if non-nil, is passed as `ivy-read' prompt argument.

Example input with inclusion and exclusion file patterns:
    require i -- -g*.el

(fn &optional INITIAL-INPUT INITIAL-DIRECTORY EXTRA-RG-ARGS RG-PROMPT)" t nil)(autoload 'counsel-grep "counsel" "Grep for a string in the file visited by the current buffer.
When non-nil, INITIAL-INPUT is the initial search pattern.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel-grep-backward "counsel" "Grep for a string in the file visited by the current buffer going
backward similar to `swiper-backward'. When non-nil, INITIAL-INPUT is
the initial search pattern.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel-grep-or-swiper "counsel" "Call `swiper' for small buffers and `counsel-grep' for large ones.
When non-nil, INITIAL-INPUT is the initial search pattern.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel-grep-or-swiper-backward "counsel" "Call `swiper-backward' for small buffers and `counsel-grep-backward' for
large ones.  When non-nil, INITIAL-INPUT is the initial search pattern.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel-recoll "counsel" "Search for a string in the recoll database.
You'll be given a list of files that match.
Selecting a file will launch `swiper' for that file.
INITIAL-INPUT can be given as the initial minibuffer input.

(fn &optional INITIAL-INPUT)" t nil)(autoload 'counsel--org-get-tags "counsel" nil nil nil)(autoload 'counsel-org-tag "counsel" "Add or remove tags in `org-mode'." t nil)(autoload 'counsel-org-tag-agenda "counsel" "Set tags for the current agenda item." t nil)(defalias 'counsel-org-goto #'counsel-outline)(autoload 'counsel-org-goto-all "counsel" "Go to a different location in any org file." t nil)(autoload 'counsel-org-file "counsel" "Browse all attachments for current Org file." t nil)(autoload 'counsel-org-entity "counsel" "Complete Org entities using Ivy." t nil)(autoload 'counsel-org-capture "counsel" "Capture something." t nil)(autoload 'counsel-org-agenda-headlines "counsel" "Choose from headers of `org-mode' files in the agenda." t nil)(autoload 'counsel-org-link "counsel" "Insert a link to an headline with completion." t nil)(autoload 'counsel-mark-ring "counsel" "Browse `mark-ring' interactively.
Obeys `widen-automatically', which see." t nil)(autoload 'counsel-evil-marks "counsel" "Ivy replacement for `evil-show-marks'.
By default, this function respects `counsel-evil-marks-exclude-registers'.
When ARG is non-nil, display all active evil registers.

(fn &optional ARG)" t nil)(autoload 'counsel-package "counsel" "Install or delete packages.

Packages not currently installed are prefixed with \"+\", and
selecting one of these will try to install it.
Packages currently installed are prefixed with \"-\", and
selecting one of these will try to delete it.

Additional actions:\\<ivy-minibuffer-map>

  \\[ivy-dispatching-done] d: Describe package
  \\[ivy-dispatching-done] h: Visit package's homepage" t nil)(autoload 'counsel-tmm "counsel" "Text-mode emulation of looking and choosing from a menu bar." t nil)(autoload 'counsel-yank-pop "counsel" "Ivy replacement for `yank-pop'.
With a plain prefix argument (\\[universal-argument]),
temporarily toggle the value of `counsel-yank-pop-after-point'.
Any other value of ARG has the same meaning as in `yank-pop', but
`counsel-yank-pop-preselect-last' determines its default value.
See also `counsel-yank-pop-filter' for how to filter candidates.

Note: Duplicate elements of `kill-ring' are always deleted.

(fn &optional ARG)" t nil)(autoload 'counsel-register "counsel" "Interactively choose a register." t nil)(autoload 'counsel-evil-registers "counsel" "Ivy replacement for `evil-show-registers'." t nil)(autoload 'counsel-imenu "counsel" "Jump to a buffer position indexed by imenu." t nil)(autoload 'counsel-list-processes "counsel" "Offer completion for `process-list'.
The default action deletes the selected process.
An extra action allows to switch to the process buffer." t nil)(autoload 'counsel-minibuffer-history "counsel" "Browse minibuffer history." t nil)(autoload 'counsel-esh-history "counsel" "Browse Eshell history." t nil)(autoload 'counsel-shell-history "counsel" "Browse shell history." t nil)(autoload 'counsel-slime-repl-history "counsel" "Browse Slime REPL history." t nil)(autoload 'counsel-hydra-heads "counsel" "Call a head of the current/last hydra." t nil)(autoload 'counsel-semantic "counsel" "Jump to a semantic tag in the current buffer." t nil)(autoload 'counsel-semantic-or-imenu "counsel" nil t nil)(autoload 'counsel-outline "counsel" "Jump to an outline heading with completion." t nil)(autoload 'counsel-ibuffer "counsel" "Use ibuffer to switch to another buffer.
NAME specifies the name of the buffer (defaults to \"*Ibuffer*\").

(fn &optional NAME)" t nil)(autoload 'counsel-switch-to-shell-buffer "counsel" "Switch to a shell buffer, or create one." t nil)(autoload 'counsel-unicode-char "counsel" "Insert COUNT copies of a Unicode character at point.
COUNT defaults to 1.

(fn &optional COUNT)" t nil)(autoload 'counsel-colors-emacs "counsel" "Show a list of all supported colors for a particular frame.

You can insert or kill the name or hexadecimal RGB value of the
selected color." t nil)(autoload 'counsel-colors-web "counsel" "Show a list of all W3C web colors for use in CSS.

You can insert or kill the name or hexadecimal RGB value of the
selected color." t nil)(autoload 'counsel-fonts "counsel" "Show a list of all supported font families for a particular frame.

You can insert or kill the name of the selected font." t nil)(autoload 'counsel-kmacro "counsel" "Interactively choose and run a keyboard macro.

With prefix argument, run macro that many times.

Macros are run using the current value of `kmacro-counter-value'
and their respective counter format. Displayed next to each macro is
the counter's format and initial value.

One can use actions to copy the counter format or initial counter
value of a macro, using them for a new macro." t nil)(autoload 'counsel-geiser-doc-look-up-manual "counsel" "Search Scheme documentation." t nil)(autoload 'counsel-rhythmbox "counsel" "Choose a song from the Rhythmbox library to play or enqueue.

(fn &optional ARG)" t nil)(autoload 'counsel-linux-app "counsel" "Launch a Linux desktop application, similar to Alt-<F2>.
When ARG is non-nil, ignore NoDisplay property in *.desktop files.

(fn &optional ARG)" t nil)(autoload 'counsel-wmctrl "counsel" "Select a desktop window using wmctrl." t nil)(autoload 'counsel-switch-buffer "counsel" "Switch to another buffer.
Display a preview of the selected ivy completion candidate buffer
in the current window." t nil)(autoload 'counsel-switch-buffer-other-window "counsel" "Switch to another buffer in another window.
Display a preview of the selected ivy completion candidate buffer
in the current window." t nil)(autoload 'counsel-compile "counsel" "Call `compile' completing with smart suggestions, optionally for DIR.

Additional actions:

\\{counsel-compile-map}

(fn &optional DIR)" t nil)(autoload 'counsel-compile-env "counsel" "Update `counsel-compile-env' interactively." t nil)(autoload 'counsel-minor "counsel" "Enable or disable minor mode.

Disabled minor modes are prefixed with \"+\", and
selecting one of these will enable it.
Enabled minor modes are prefixed with \"-\", and
selecting one of these will enable it.

Additional actions:\\<ivy-minibuffer-map>

  \\[ivy-dispatching-done] d: Go to minor mode definition
  \\[ivy-dispatching-done] h: Describe minor mode" t nil)(autoload 'counsel-major "counsel" nil t nil)(autoload 'counsel-compilation-errors "counsel" "Compilation errors." t nil)(autoload 'counsel-flycheck "counsel" "Flycheck errors." t nil)(defvar counsel-mode nil "Non-nil if Counsel mode is enabled.
See the `counsel-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `counsel-mode'.")(autoload 'counsel-mode "counsel" "Toggle Counsel mode on or off.
Turn Counsel mode on if ARG is positive, off otherwise. Counsel
mode remaps built-in emacs functions that have counsel
replacements.

Local bindings (`counsel-mode-map'):
\\{counsel-mode-map}

(fn &optional ARG)" t nil)(defvar amx-mode nil "Non-nil if Amx mode is enabled.
See the `amx-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `amx-mode'.")(autoload 'amx-mode "amx" "Use ido completion for M-x

If called interactively, enable Amx mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'amx "amx" "Read a command name and execute the command.

This is the main entry point for the Amx package, an alternative
to the normal \\[execute-extended-command] built into Emacs that
provides several extra features." t nil)(autoload 'amx-major-mode-commands "amx" "Like `amx', but limited to commands that are relevant to the active major mode." t nil)(autoload 'amx-initialize "amx" "Ensure that amx is properly initialized.

This function is normally idempotent, only having an effect the
first time it is called, so it is safe to call it at the
beginning of any function that expects amx to be initialized.
However, optional arg REINIT forces the initialization needs to
be re-run. Interactively, reinitialize when a prefix arg is
provided.

(fn &optional REINIT)" t nil)(autoload 'counsel-projectile-find-file "counsel-projectile" "Jump to a file in the current project.

With a prefix ARG, invalidate the cache first.  If DWIM is
non-nil, use completion based on context.

(fn &optional ARG DWIM)" t nil)(autoload 'counsel-projectile-find-file-dwim "counsel-projectile" "Jump to a file in the current project using completion based on context.

With a prefix ARG, invalidate the cache first.

(fn &optional ARG)" t nil)(autoload 'counsel-projectile-find-dir "counsel-projectile" "Jump to a directory in the current project.

With a prefix ARG, invalidate the cache first.

(fn &optional ARG)" t nil)(autoload 'counsel-projectile-switch-to-buffer "counsel-projectile" "Jump to a buffer in the current project." t nil)(autoload 'counsel-projectile-grep "counsel-projectile" "Search the current project with grep.

If inside a git project and `projectile-use-git-grep' is non-nil,
use git grep. Otherwise use grep recursively.

OPTIONS-OR-CMD, if non-nil, is a string containing either
additional options to be passed to grep, or an alternative git
grep command. It is read from the minibuffer if the function is
called with a prefix argument.

(fn &optional OPTIONS-OR-CMD)" t nil)(autoload 'counsel-projectile-git-grep "counsel-projectile" "Search the current project with git grep.

CMD, if non-nil, is a string containing an alternative git grep
command. It is read from the minibuffer if the function is called
with a prefix argument.

(fn &optional CMD)" t nil)(autoload 'counsel-projectile-ag "counsel-projectile" "Search the current project with ag.

OPTIONS, if non-nil, is a string containing additional options to
be passed to ag. It is read from the minibuffer if the function
is called with a prefix argument.

(fn &optional OPTIONS)" t nil)(autoload 'counsel-projectile-rg "counsel-projectile" "Search the current project with rg.

OPTIONS, if non-nil, is a string containing additional options to
be passed to rg. It is read from the minibuffer if the function
is called with a prefix argument.

(fn &optional OPTIONS)" t nil)(autoload 'counsel-projectile-org-capture "counsel-projectile" "Capture into the current project.

This command is a replacement for `org-capture' (or
`counsel-org-capture') offering project-specific capture
templates, in addition to the regular templates available from
`org-capture'. These project templates, which are \"expanded\"
relatively to the current project, are determined by the
variables `counsel-projectile-org-capture-templates' and
`counsel-projectile-org-capture-templates-contexts'. See the
former variable in particular for details.

Optional argument FROM-BUFFER specifies the buffer from which to
capture.

(fn &optional FROM-BUFFER)" t nil)(autoload 'counsel-projectile-org-agenda "counsel-projectile" "Open project agenda.

This command simply calls `org-agenda' after filtering out all
agenda files that do not belong to the current project.

Optional arguments ARG, KEYS, and RESTRICTION are as in
`org-agenda'.

(fn &optional ARG KEYS RESTRICTION)" t nil)(autoload 'counsel-projectile-switch-project "counsel-projectile" "Switch project.

Optional argument DEFAULT-ACTION is the key, function, name, or
index in the list `counsel-projectile-switch-project-action' (1
for the first action, etc) of the action to set as default.

(fn &optional DEFAULT-ACTION)" t nil)(autoload 'counsel-projectile "counsel-projectile" "Jump to a buffer or file in the current project.

With a prefix ARG, invalidate the cache first.

If not inside a project, call `counsel-projectile-switch-project'.

(fn &optional ARG)" t nil)(defvar counsel-projectile-mode nil "Non-nil if Counsel-Projectile mode is enabled.
See the `counsel-projectile-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `counsel-projectile-mode'.")(autoload 'counsel-projectile-mode "counsel-projectile" "Toggle Counsel-Projectile mode on or off.

With a prefix argument ARG, enable the mode if ARG is positive,
and disable it otherwise.  If called from Lisp, enable the mode
if ARG is omitted or nil, and toggle it if ARG is `toggle'.

Counsel-Projectile mode turns on Projectile mode, thus enabling
all projectile key bindings, and adds the counsel-projectile key
bindings on top of them.

The counsel-projectile key bindings either remap existing
projectile commands to their counsel-projectile replacements or
bind keys to counsel-projectile commands that have no projectile
counterparts.

(fn &optional ARG)" t nil)(defvar ivy-rich-mode nil "Non-nil if Ivy-Rich mode is enabled.
See the `ivy-rich-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ivy-rich-mode'.")(autoload 'ivy-rich-mode "ivy-rich" "Toggle ivy-rich mode globally.

If called interactively, enable Ivy-Rich mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'ivy-rich-reload "ivy-rich" nil nil nil)(autoload 'wgrep-setup "wgrep" "Setup wgrep preparation." nil nil)(add-hook 'grep-setup-hook 'wgrep-setup)(autoload 'doom-name-to-rgb "doom-themes" "Retrieves the hexidecimal string repesented the named COLOR (e.g. \"red\")
for FRAME (defaults to the current frame).

(fn COLOR)" nil nil)(autoload 'doom-blend "doom-themes" "Blend two colors (hexidecimal strings) together by a coefficient ALPHA (a
float between 0 and 1)

(fn COLOR1 COLOR2 ALPHA)" nil nil)(autoload 'doom-darken "doom-themes" "Darken a COLOR (a hexidecimal string) by a coefficient ALPHA (a float between
0 and 1).

(fn COLOR ALPHA)" nil nil)(autoload 'doom-lighten "doom-themes" "Brighten a COLOR (a hexidecimal string) by a coefficient ALPHA (a float
between 0 and 1).

(fn COLOR ALPHA)" nil nil)(autoload 'doom-color "doom-themes" "Retrieve a specific color named NAME (a symbol) from the current theme.

(fn NAME &optional TYPE)" nil nil)(autoload 'doom-ref "doom-themes" "TODO

(fn FACE PROP &optional CLASS)" nil nil)(autoload 'doom-themes-set-faces "doom-themes" "Customize THEME (a symbol) with FACES.

If THEME is nil, it applies to all themes you load. FACES is a list of Doom
theme face specs. These is a simplified spec. For example:

  (doom-themes-set-faces 'user
    '(default :background red :foreground blue)
    '(doom-modeline-bar :background (if -modeline-bright modeline-bg highlight))
    '(doom-modeline-buffer-file :inherit 'mode-line-buffer-id :weight 'bold)
    '(doom-modeline-buffer-path :inherit 'mode-line-emphasis :weight 'bold)
    '(doom-modeline-buffer-project-root :foreground green :weight 'bold))

(fn THEME &rest FACES)" nil nil)(function-put 'doom-themes-set-faces 'lisp-indent-function 'defun)(when (and (boundp 'custom-theme-load-path) "/Users/rnrbarbosa/.emacs.d/.local/straight/build/doom-themes/doom-themes-autoloads.el") (let* ((base (file-name-directory "/Users/rnrbarbosa/.emacs.d/.local/straight/build/doom-themes/doom-themes-autoloads.el")) (dir (expand-file-name "themes/" base))) (add-to-list 'custom-theme-load-path (or (and (file-directory-p dir) dir) base))))(autoload 'doom-themes-neotree-config "doom-themes-ext-neotree" "Install doom-themes' neotree configuration.

Includes an Atom-esque icon theme and highlighting based on filetype." nil nil)(autoload 'doom-themes-org-config "doom-themes-ext-org" "Enable custom fontification & improves theme integration with org-mode." nil nil)(autoload 'doom-themes-treemacs-config "doom-themes-ext-treemacs" "Install doom-themes' treemacs configuration.

Includes an Atom-esque icon theme and highlighting based on filetype." nil nil)(autoload 'doom-themes-visual-bell-fn "doom-themes-ext-visual-bell" "Blink the mode-line red briefly. Set `ring-bell-function' to this to use it." nil nil)(autoload 'doom-themes-visual-bell-config "doom-themes-ext-visual-bell" "Enable flashing the mode-line on error." nil nil)(autoload 'solaire-mode "solaire-mode" "Make source buffers grossly incandescent by remapping common faces (see
`solaire-mode-remap-alist') to their solaire-mode variants.

If called interactively, enable Solaire mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'solaire-global-mode 'globalized-minor-mode t)(defvar solaire-global-mode nil "Non-nil if Solaire-Global mode is enabled.
See the `solaire-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `solaire-global-mode'.")(autoload 'solaire-global-mode "solaire-mode" "Toggle Solaire mode in all buffers.
With prefix ARG, enable Solaire-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Solaire mode is enabled in all buffers where
`turn-on-solaire-mode' would do it.
See `solaire-mode' for more information on Solaire mode.

(fn &optional ARG)" t nil)(autoload 'turn-on-solaire-mode "solaire-mode" "Conditionally enable `solaire-mode' in the current buffer.

Does nothing if the current buffer doesn't satisfy the function in
`solaire-mode-real-buffer-fn'." t nil)(autoload 'turn-off-solaire-mode "solaire-mode" "Disable `solaire-mode' in the current buffer." t nil)(autoload 'solaire-mode-in-minibuffer "solaire-mode" "Highlight the minibuffer whenever it is active." nil nil)(autoload 'solaire-mode-reset "solaire-mode" "Reset all buffers with `solaire-mode' enabled.

The purpose for this is to reset faces that cannot be buffer-local such as the
fringe, which can be changed by loading a new theme or opening an Emacs client
frame with a different display (via emacsclient).

(fn &rest _)" t nil)(advice-add #'load-theme :before (lambda (theme &optional _ no-enable) (unless no-enable (setq solaire-mode--current-theme theme))))(advice-add #'load-theme :after (lambda (theme &rest _) (when (memq theme custom-enabled-themes) (setq solaire-mode--bg-swapped nil) (when (featurep 'solaire-mode) (solaire-mode--swap-bg-faces-maybe)))))(autoload 'solaire-mode-swap-bg "solaire-mode" "Does nothing. Set `solaire-mode-auto-swap-bg' instead." nil nil)(make-obsolete 'solaire-mode-swap-bg 'solaire-mode-auto-swap-bg '"1.1.4")(autoload 'solaire-mode-restore-persp-mode-buffers "solaire-mode" "Restore `solaire-mode' in buffers when `persp-mode' loads a session.

(fn &rest _)" nil nil)(autoload 'hl-todo-mode "hl-todo" "Highlight TODO and similar keywords in comments and strings.

If called interactively, enable Hl-Todo mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-hl-todo-mode 'globalized-minor-mode t)(defvar global-hl-todo-mode nil "Non-nil if Global Hl-Todo mode is enabled.
See the `global-hl-todo-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-hl-todo-mode'.")(autoload 'global-hl-todo-mode "hl-todo" "Toggle Hl-Todo mode in all buffers.
With prefix ARG, enable Global Hl-Todo mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Hl-Todo mode is enabled in all buffers where
`hl-todo--turn-on-mode-if-desired' would do it.
See `hl-todo-mode' for more information on Hl-Todo mode.

(fn &optional ARG)" t nil)(autoload 'hl-todo-next "hl-todo" "Jump to the next TODO or similar keyword.
The prefix argument ARG specifies how many keywords to move.
A negative argument means move backward that many keywords.

(fn ARG)" t nil)(autoload 'hl-todo-previous "hl-todo" "Jump to the previous TODO or similar keyword.
The prefix argument ARG specifies how many keywords to move.
A negative argument means move forward that many keywords.

(fn ARG)" t nil)(autoload 'hl-todo-occur "hl-todo" "Use `occur' to find all TODO or similar keywords.
This actually finds a superset of the highlighted keywords,
because it uses a regexp instead of a more sophisticated
matcher.  It also finds occurrences that are not within a
string or comment." t nil)(autoload 'hl-todo-insert "hl-todo" "Insert TODO or similar keyword.
If point is not inside a string or comment, then insert a new
comment.  If point is at the end of the line, then insert the
comment there, otherwise insert it as a new line before the
current line.

(fn KEYWORD)" t nil)(autoload 'doom-modeline-init "doom-modeline" "Initialize doom mode-line." nil nil)(autoload 'doom-modeline-set-main-modeline "doom-modeline" "Set main mode-line.
If DEFAULT is non-nil, set the default mode-line for all buffers.

(fn &optional DEFAULT)" nil nil)(autoload 'doom-modeline-set-minimal-modeline "doom-modeline" "Set minimal mode-line." nil nil)(autoload 'doom-modeline-set-special-modeline "doom-modeline" "Set sepcial mode-line." nil nil)(autoload 'doom-modeline-set-project-modeline "doom-modeline" "Set project mode-line." nil nil)(autoload 'doom-modeline-set-dashboard-modeline "doom-modeline" "Set dashboard mode-line." nil nil)(autoload 'doom-modeline-set-vcs-modeline "doom-modeline" "Set vcs mode-line." nil nil)(autoload 'doom-modeline-set-info-modeline "doom-modeline" "Set Info mode-line." nil nil)(autoload 'doom-modeline-set-package-modeline "doom-modeline" "Set package mode-line." nil nil)(autoload 'doom-modeline-set-media-modeline "doom-modeline" "Set media mode-line." nil nil)(autoload 'doom-modeline-set-message-modeline "doom-modeline" "Set message mode-line." nil nil)(autoload 'doom-modeline-set-pdf-modeline "doom-modeline" "Set pdf mode-line." nil nil)(autoload 'doom-modeline-set-org-src-modeline "doom-modeline" "Set org-src mode-line." nil nil)(autoload 'doom-modeline-set-helm-modeline "doom-modeline" "Set helm mode-line.

(fn &rest _)" nil nil)(autoload 'doom-modeline-set-timemachine-modeline "doom-modeline" "Set timemachine mode-line." nil nil)(defvar doom-modeline-mode nil "Non-nil if Doom-Modeline mode is enabled.
See the `doom-modeline-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `doom-modeline-mode'.")(autoload 'doom-modeline-mode "doom-modeline" "Toggle doom-modeline on or off.

If called interactively, enable Doom-Modeline mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'doom-modeline-env-setup-python "doom-modeline-env")(autoload 'doom-modeline-env-setup-ruby "doom-modeline-env")(autoload 'doom-modeline-env-setup-perl "doom-modeline-env")(autoload 'doom-modeline-env-setup-go "doom-modeline-env")(autoload 'doom-modeline-env-setup-elixir "doom-modeline-env")(autoload 'doom-modeline-env-setup-rust "doom-modeline-env")(autoload 'anzu-mode "anzu" "minor-mode which display search information in mode-line.

If called interactively, enable Anzu mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-anzu-mode 'globalized-minor-mode t)(defvar global-anzu-mode nil "Non-nil if Global Anzu mode is enabled.
See the `global-anzu-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-anzu-mode'.")(autoload 'global-anzu-mode "anzu" "Toggle Anzu mode in all buffers.
With prefix ARG, enable Global Anzu mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Anzu mode is enabled in all buffers where
`anzu--turn-on' would do it.
See `anzu-mode' for more information on Anzu mode.

(fn &optional ARG)" t nil)(autoload 'anzu-query-replace-at-cursor "anzu" "Replace symbol at cursor with to-string." t nil)(autoload 'anzu-query-replace-at-cursor-thing "anzu" "Replace symbol at cursor within `anzu-replace-at-cursor-thing' area." t nil)(autoload 'anzu-query-replace "anzu" "anzu version of `query-replace'.

(fn ARG)" t nil)(autoload 'anzu-query-replace-regexp "anzu" "anzu version of `query-replace-regexp'.

(fn ARG)" t nil)(autoload 'anzu-replace-at-cursor-thing "anzu" "anzu-query-replace-at-cursor-thing without query." t nil)(autoload 'anzu-isearch-query-replace "anzu" "anzu version of `isearch-query-replace'.

(fn ARG)" t nil)(autoload 'anzu-isearch-query-replace-regexp "anzu" "anzu version of `isearch-query-replace-regexp'.

(fn ARG)" t nil)(autoload 'evil-mode "evil" nil t)(autoload 'undo-tree-mode "undo-tree" "Toggle undo-tree mode.
With no argument, this command toggles the mode.
A positive prefix argument turns the mode on.
A negative prefix argument turns it off.

If called interactively, enable Undo-Tree mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Undo-tree-mode replaces Emacs' standard undo feature with a more
powerful yet easier to use version, that treats the undo history
as what it is: a tree.

The following keys are available in `undo-tree-mode':

  \\{undo-tree-map}

Within the undo-tree visualizer, the following keys are available:

  \\{undo-tree-visualizer-mode-map}

(fn &optional ARG)" t nil)(put 'global-undo-tree-mode 'globalized-minor-mode t)(defvar global-undo-tree-mode nil "Non-nil if Global Undo-Tree mode is enabled.
See the `global-undo-tree-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-undo-tree-mode'.")(autoload 'global-undo-tree-mode "undo-tree" "Toggle Undo-Tree mode in all buffers.
With prefix ARG, enable Global Undo-Tree mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Undo-Tree mode is enabled in all buffers where
`turn-on-undo-tree-mode' would do it.
See `undo-tree-mode' for more information on Undo-Tree mode.

(fn &optional ARG)" t nil)(autoload 'goto-last-change "goto-chg" "Go to the point where the last edit was made in the current buffer.
Repeat the command to go to the second last edit, etc.

To go back to more recent edit, the reverse of this command, use \\[goto-last-change-reverse]
or precede this command with \\[universal-argument] - (minus).

It does not go to the same point twice even if there has been many edits
there. I call the minimal distance between distinguishable edits \"span\".
Set variable `glc-default-span' to control how close is \"the same point\".
Default span is 8.
The span can be changed temporarily with \\[universal-argument] right before \\[goto-last-change]:
\\[universal-argument] <NUMBER> set current span to that number,
\\[universal-argument] (no number) multiplies span by 4, starting with default.
The so set span remains until it is changed again with \\[universal-argument], or the consecutive
repetition of this command is ended by any other command.

When span is zero (i.e. \\[universal-argument] 0) subsequent \\[goto-last-change] visits each and
every point of edit and a message shows what change was made there.
In this case it may go to the same point twice.

This command uses undo information. If undo is disabled, so is this command.
At times, when undo information becomes too large, the oldest information is
discarded. See variable `undo-limit'.

(fn ARG)" t nil)(autoload 'goto-last-change-reverse "goto-chg" "Go back to more recent changes after \\[goto-last-change] have been used.
See `goto-last-change' for use of prefix argument.

(fn ARG)" t nil)(defvar evil-goggles-mode nil "Non-nil if Evil-Goggles mode is enabled.
See the `evil-goggles-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `evil-goggles-mode'.")(autoload 'evil-goggles-mode "evil-goggles" "evil-goggles global minor mode.

If called interactively, enable Evil-Goggles mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'git-gutter:linum-setup "git-gutter" "Setup for linum-mode." nil nil)(autoload 'git-gutter-mode "git-gutter" "Git-Gutter mode

If called interactively, enable Git-Gutter mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-git-gutter-mode 'globalized-minor-mode t)(defvar global-git-gutter-mode nil "Non-nil if Global Git-Gutter mode is enabled.
See the `global-git-gutter-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-git-gutter-mode'.")(autoload 'global-git-gutter-mode "git-gutter" "Toggle Git-Gutter mode in all buffers.
With prefix ARG, enable Global Git-Gutter mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Git-Gutter mode is enabled in all buffers where
`git-gutter--turn-on' would do it.
See `git-gutter-mode' for more information on Git-Gutter mode.

(fn &optional ARG)" t nil)(autoload 'git-gutter "git-gutter" "Show diff information in gutter" t nil)(autoload 'git-gutter:toggle "git-gutter" "Toggle to show diff information." t nil)(autoload 'vi-tilde-fringe-mode "vi-tilde-fringe" "Buffer-local minor mode to display tildes in the fringe when the line is
empty.

If called interactively, enable Vi-Tilde-Fringe mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-vi-tilde-fringe-mode 'globalized-minor-mode t)(defvar global-vi-tilde-fringe-mode nil "Non-nil if Global Vi-Tilde-Fringe mode is enabled.
See the `global-vi-tilde-fringe-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-vi-tilde-fringe-mode'.")(autoload 'global-vi-tilde-fringe-mode "vi-tilde-fringe" "Toggle Vi-Tilde-Fringe mode in all buffers.
With prefix ARG, enable Global Vi-Tilde-Fringe mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Vi-Tilde-Fringe mode is enabled in all buffers where
`vi-tilde-fringe-mode--turn-on' would do it.
See `vi-tilde-fringe-mode' for more information on Vi-Tilde-Fringe mode.

(fn &optional ARG)" t nil)(autoload 'persp-def-auto-persp "persp-mode" "

(fn NAME &rest KEYARGS &key BUFFER-NAME FILE-NAME MODE MODE-NAME MINOR-MODE MINOR-MODE-NAME PREDICATE HOOKS DYN-ENV GET-NAME GET-BUFFER GET-PERSP SWITCH PARAMETERS NOAUTO WEAK USER-DATA ON-MATCH AFTER-MATCH DONT-PICK-UP-BUFFERS DELETE)" nil nil)(define-obsolete-function-alias 'def-auto-persp 'persp-def-auto-persp "persp-mode 2.9.6")(autoload 'persp-def-buffer-save/load "persp-mode" "

(fn &rest KEYARGS &key BUFFER-NAME FILE-NAME MODE MODE-NAME MINOR-MODE MINOR-MODE-NAME PREDICATE TAG-SYMBOL SAVE-VARS SAVE-FUNCTION LOAD-FUNCTION AFTER-LOAD-FUNCTION MODE-RESTORE-FUNCTION APPEND)" nil nil)(define-obsolete-function-alias 'def-persp-buffer-save/load 'persp-def-buffer-save/load "persp-mode 2.9.6")(defvar persp-mode nil "Non-nil if Persp mode is enabled.
See the `persp-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `persp-mode'.")(autoload 'persp-mode "persp-mode" "Toggle the persp-mode.
When active, keeps track of multiple 'perspectives',
named collections of buffers and window configurations.
Here is a keymap of this minor mode:
\\{persp-mode-map}

If called interactively, enable Persp mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'evil-backward-arg "evil-args" "Move the cursor backward COUNT arguments.

(fn COUNT)" t nil)(autoload 'evil-forward-arg "evil-args" "Move the cursor forward COUNT arguments.

(fn COUNT)" t nil)(autoload 'evil-inner-arg "evil-args")(autoload 'evil-outer-arg "evil-args")(autoload 'evil-jump-out-args "evil-args" "Move the cursor out of the nearest enclosing matching pairs.

(fn COUNT)" t nil)(autoload 'evilem--collect "evil-easymotion" "Repeatedly execute func, and collect the cursor positions into a list

(fn FUNC &optional SCOPE ALL-WINDOWS INITIAL-POINT SORT-KEY COLLECT-POSTPROCESS INCLUDE-INVISIBLE)" nil nil)(autoload 'evilem-motion-forward-word-begin "evil-easymotion" nil t)(autoload 'evilem-motion-forward-WORD-begin "evil-easymotion" nil t)(autoload 'evilem-motion-forward-word-end "evil-easymotion" nil t)(autoload 'evilem-motion-forward-WORD-end "evil-easymotion" nil t)(autoload 'evilem-motion-backward-word-begin "evil-easymotion" nil t)(autoload 'evilem-motion-backward-WORD-begin "evil-easymotion" nil t)(autoload 'evilem-motion-backward-word-end "evil-easymotion" nil t)(autoload 'evilem-motion-backward-WORD-end "evil-easymotion" nil t)(autoload 'evilem-motion-next-line "evil-easymotion" nil t)(autoload 'evilem-motion-previous-line "evil-easymotion" nil t)(autoload 'evilem-motion-next-visual-line "evil-easymotion" nil t)(autoload 'evilem-motion-previous-visual-line "evil-easymotion" nil t)(autoload 'evilem-motion-find-char-to "evil-easymotion" nil t)(autoload 'evilem-motion-find-char-to-backward "evil-easymotion" nil t)(autoload 'evilem-motion-find-char "evil-easymotion" nil t)(autoload 'evilem-motion-find-char-backward "evil-easymotion" nil t)(autoload 'evilem-motion-backward-section-begin "evil-easymotion" nil t)(autoload 'evilem-motion-backward-section-end "evil-easymotion" nil t)(autoload 'evilem-motion-forward-section-begin "evil-easymotion" nil t)(autoload 'evilem-motion-forward-section-end "evil-easymotion" nil t)(autoload 'evilem-motion-backward-sentence-begin "evil-easymotion" nil t)(autoload 'evilem-motion-forward-sentence-begin "evil-easymotion" nil t)(autoload 'evilem-motion-search-next "evil-easymotion" nil t)(autoload 'evilem-motion-search-previous "evil-easymotion" nil t)(autoload 'evilem-motion-search-word-forward "evil-easymotion" nil t)(autoload 'evilem-motion-search-word-backward "evil-easymotion" nil t)(autoload 'evilem-motion-previous-line-first-non-blank "evil-easymotion" nil t)(autoload 'evilem-motion-next-line-first-non-blank "evil-easymotion" nil t)(autoload 'evilem-default-keybindings "evil-easymotion" "Define easymotions for all motions evil defines by default

(fn PREFIX)" nil nil)(autoload 'avy-goto-char "avy" "Jump to the currently visible CHAR.
The window scope is determined by `avy-all-windows' (ARG negates it).

(fn CHAR &optional ARG)" t nil)(autoload 'avy-goto-char-in-line "avy" "Jump to the currently visible CHAR in the current line.

(fn CHAR)" t nil)(autoload 'avy-goto-char-2 "avy" "Jump to the currently visible CHAR1 followed by CHAR2.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.

(fn CHAR1 CHAR2 &optional ARG BEG END)" t nil)(autoload 'avy-goto-char-2-above "avy" "Jump to the currently visible CHAR1 followed by CHAR2.
This is a scoped version of `avy-goto-char-2', where the scope is
the visible part of the current buffer up to point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR1 CHAR2 &optional ARG)" t nil)(autoload 'avy-goto-char-2-below "avy" "Jump to the currently visible CHAR1 followed by CHAR2.
This is a scoped version of `avy-goto-char-2', where the scope is
the visible part of the current buffer following point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR1 CHAR2 &optional ARG)" t nil)(autoload 'avy-isearch "avy" "Jump to one of the current isearch candidates." t nil)(autoload 'avy-goto-word-0 "avy" "Jump to a word start.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.

(fn ARG &optional BEG END)" t nil)(autoload 'avy-goto-whitespace-end "avy" "Jump to the end of a whitespace sequence.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.

(fn ARG &optional BEG END)" t nil)(autoload 'avy-goto-word-1 "avy" "Jump to the currently visible CHAR at a word start.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.
When SYMBOL is non-nil, jump to symbol start instead of word start.

(fn CHAR &optional ARG BEG END SYMBOL)" t nil)(autoload 'avy-goto-word-1-above "avy" "Jump to the currently visible CHAR at a word start.
This is a scoped version of `avy-goto-word-1', where the scope is
the visible part of the current buffer up to point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR &optional ARG)" t nil)(autoload 'avy-goto-word-1-below "avy" "Jump to the currently visible CHAR at a word start.
This is a scoped version of `avy-goto-word-1', where the scope is
the visible part of the current buffer following point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR &optional ARG)" t nil)(autoload 'avy-goto-symbol-1 "avy" "Jump to the currently visible CHAR at a symbol start.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR &optional ARG)" t nil)(autoload 'avy-goto-symbol-1-above "avy" "Jump to the currently visible CHAR at a symbol start.
This is a scoped version of `avy-goto-symbol-1', where the scope is
the visible part of the current buffer up to point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR &optional ARG)" t nil)(autoload 'avy-goto-symbol-1-below "avy" "Jump to the currently visible CHAR at a symbol start.
This is a scoped version of `avy-goto-symbol-1', where the scope is
the visible part of the current buffer following point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR &optional ARG)" t nil)(autoload 'avy-goto-subword-0 "avy" "Jump to a word or subword start.
The window scope is determined by `avy-all-windows' (ARG negates it).

When PREDICATE is non-nil it's a function of zero parameters that
should return true.

BEG and END narrow the scope where candidates are searched.

(fn &optional ARG PREDICATE BEG END)" t nil)(autoload 'avy-goto-subword-1 "avy" "Jump to the currently visible CHAR at a subword start.
The window scope is determined by `avy-all-windows' (ARG negates it).
The case of CHAR is ignored.

(fn CHAR &optional ARG)" t nil)(autoload 'avy-goto-word-or-subword-1 "avy" "Forward to `avy-goto-subword-1' or `avy-goto-word-1'.
Which one depends on variable `subword-mode'." t nil)(autoload 'avy-goto-line "avy" "Jump to a line start in current buffer.

When ARG is 1, jump to lines currently visible, with the option
to cancel to `goto-line' by entering a number.

When ARG is 4, negate the window scope determined by
`avy-all-windows'.

Otherwise, forward to `goto-line' with ARG.

(fn &optional ARG)" t nil)(autoload 'avy-goto-line-above "avy" "Goto visible line above the cursor.
OFFSET changes the distance between the closest key to the cursor and
the cursor
When BOTTOM-UP is non-nil, display avy candidates from top to bottom

(fn &optional OFFSET BOTTOM-UP)" t nil)(autoload 'avy-goto-line-below "avy" "Goto visible line below the cursor.
OFFSET changes the distance between the closest key to the cursor and
the cursor
When BOTTOM-UP is non-nil, display avy candidates from top to bottom

(fn &optional OFFSET BOTTOM-UP)" t nil)(autoload 'avy-goto-end-of-line "avy" "Call `avy-goto-line' and move to the end of the line.

(fn &optional ARG)" t nil)(autoload 'avy-copy-line "avy" "Copy a selected line above the current line.
ARG lines can be used.

(fn ARG)" t nil)(autoload 'avy-move-line "avy" "Move a selected line above the current line.
ARG lines can be used.

(fn ARG)" t nil)(autoload 'avy-copy-region "avy" "Select two lines and copy the text between them to point.

The window scope is determined by `avy-all-windows' or
`avy-all-windows-alt' when ARG is non-nil.

(fn ARG)" t nil)(autoload 'avy-move-region "avy" "Select two lines and move the text between them above the current line." t nil)(autoload 'avy-kill-region "avy" "Select two lines and kill the region between them.

The window scope is determined by `avy-all-windows' or
`avy-all-windows-alt' when ARG is non-nil.

(fn ARG)" t nil)(autoload 'avy-kill-ring-save-region "avy" "Select two lines and save the region between them to the kill ring.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn ARG)" t nil)(autoload 'avy-kill-whole-line "avy" "Select line and kill the whole selected line.

With a numerical prefix ARG, kill ARG line(s) starting from the
selected line.  If ARG is negative, kill backward.

If ARG is zero, kill the selected line but exclude the trailing
newline.

\\[universal-argument] 3 \\[avy-kil-whole-line] kill three lines
starting from the selected line.  \\[universal-argument] -3

\\[avy-kill-whole-line] kill three lines backward including the
selected line.

(fn ARG)" t nil)(autoload 'avy-kill-ring-save-whole-line "avy" "Select line and save the whole selected line as if killed, but don’t kill it.

This command is similar to `avy-kill-whole-line', except that it
saves the line(s) as if killed, but does not kill it(them).

With a numerical prefix ARG, kill ARG line(s) starting from the
selected line.  If ARG is negative, kill backward.

If ARG is zero, kill the selected line but exclude the trailing
newline.

(fn ARG)" t nil)(autoload 'avy-setup-default "avy" "Setup the default shortcuts." nil nil)(autoload 'avy-goto-char-timer "avy" "Read one or many consecutive chars and jump to the first one.
The window scope is determined by `avy-all-windows' (ARG negates it).

(fn &optional ARG)" t nil)(autoload 'evil-embrace-enable-evil-surround-integration "evil-embrace" nil t nil)(autoload 'evil-embrace-disable-evil-surround-integration "evil-embrace" nil t nil)(autoload 'embrace-delete "embrace" nil t nil)(autoload 'embrace-change "embrace" nil t nil)(autoload 'embrace-add "embrace" nil t nil)(autoload 'embrace-commander "embrace" nil t nil)(autoload 'embrace-LaTeX-mode-hook "embrace" nil nil nil)(autoload 'embrace-org-mode-hook "embrace" nil nil nil)(autoload 'embrace-ruby-mode-hook "embrace" nil nil nil)(autoload 'embrace-emacs-lisp-mode-hook "embrace" nil nil nil)(autoload 'er/expand-region "expand-region" "Increase selected region by semantic units.

With prefix argument expands the region that many times.
If prefix argument is negative calls `er/contract-region'.
If prefix argument is 0 it resets point and mark to their state
before calling `er/expand-region' for the first time.

(fn ARG)" t nil)(let ((loads (get 'expand-region 'custom-loads))) (if (member '"expand-region-custom" loads) nil (put 'expand-region 'custom-loads (cons '"expand-region-custom" loads))))(defvar expand-region-preferred-python-mode 'python "The name of your preferred python mode")(defvar expand-region-guess-python-mode t "If expand-region should attempt to guess your preferred python mode")(defvar expand-region-autocopy-register "" "If set to a string of a single character (try \"e\"), then the
contents of the most recent expand or contract command will
always be copied to the register named after that character.")(defvar expand-region-skip-whitespace t "If expand-region should skip past whitespace on initial expansion")(defvar expand-region-fast-keys-enabled t "If expand-region should bind fast keys after initial expand/contract")(defvar expand-region-contract-fast-key "-" "Key to use after an initial expand/contract to contract once more.")(defvar expand-region-reset-fast-key "0" "Key to use after an initial expand/contract to undo.")(defvar expand-region-exclude-text-mode-expansions '(html-mode nxml-mode) "List of modes which derive from `text-mode' for which text mode expansions are not appropriate.")(defvar expand-region-smart-cursor nil "Defines whether the cursor should be placed intelligently after expansion.

If set to t, and the cursor is already at the beginning of the new region,
keep it there; otherwise, put it at the end of the region.

If set to nil, always place the cursor at the beginning of the region.")(define-obsolete-variable-alias 'er/enable-subword-mode\? 'expand-region-subword-enabled "2019-03-23")(defvar expand-region-subword-enabled nil "Whether expand-region should use subword expansions.")(autoload 'evil-surround-delete "evil-surround" "Delete the surrounding delimiters represented by CHAR.
Alternatively, the text to delete can be represented with
the overlays OUTER and INNER, where OUTER includes the delimiters
and INNER excludes them. The intersection (i.e., difference)
between these overlays is what is deleted.

(fn CHAR &optional OUTER INNER)" t nil)(autoload 'evil-surround-change "evil-surround" "Change the surrounding delimiters represented by CHAR.
Alternatively, the text to delete can be represented with the
overlays OUTER and INNER, which are passed to `evil-surround-delete'.

(fn CHAR &optional OUTER INNER)" t nil)(autoload 'evil-surround-mode "evil-surround" "Buffer-local minor mode to emulate surround.vim.

If called interactively, enable Evil-Surround mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'turn-on-evil-surround-mode "evil-surround" "Enable evil-surround-mode in the current buffer." nil nil)(autoload 'turn-off-evil-surround-mode "evil-surround" "Disable evil-surround-mode in the current buffer." nil nil)(put 'global-evil-surround-mode 'globalized-minor-mode t)(defvar global-evil-surround-mode nil "Non-nil if Global Evil-Surround mode is enabled.
See the `global-evil-surround-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-evil-surround-mode'.")(autoload 'global-evil-surround-mode "evil-surround" "Toggle Evil-Surround mode in all buffers.
With prefix ARG, enable Global Evil-Surround mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Evil-Surround mode is enabled in all buffers where
`turn-on-evil-surround-mode' would do it.
See `evil-surround-mode' for more information on Evil-Surround mode.

(fn &optional ARG)" t nil)(defvar evil-escape-mode nil "Non-nil if Evil-Escape mode is enabled.
See the `evil-escape-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `evil-escape-mode'.")(autoload 'evil-escape-mode "evil-escape" "Buffer-local minor mode to escape insert state and everything else
with a key sequence.

If called interactively, enable Evil-Escape mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'evil-exchange "evil-exchange" "Exchange two regions with evil motion." t)(autoload 'evil-exchange-cancel "evil-exchange" "Cancel current pending exchange." t nil)(autoload 'evil-exchange-install "evil-exchange" "Setting evil-exchange key bindings." nil nil)(autoload 'evil-exchange-cx-install "evil-exchange" "Setting evil-exchange key bindings in a vim-compatible way" t nil)(autoload 'evil-indent-plus-i-indent "evil-indent-plus" nil t)(autoload 'evil-indent-plus-a-indent "evil-indent-plus" nil t)(autoload 'evil-indent-plus-i-indent-up "evil-indent-plus" nil t)(autoload 'evil-indent-plus-a-indent-up "evil-indent-plus" nil t)(autoload 'evil-indent-plus-i-indent-up-down "evil-indent-plus" nil t)(autoload 'evil-indent-plus-a-indent-up-down "evil-indent-plus" nil t)(autoload 'evil-indent-plus-default-bindings "evil-indent-plus" "Set the default evil-indent-plus keybindings." nil nil)(autoload 'evil-lion-left "evil-lion" nil t)(autoload 'evil-lion-right "evil-lion" nil t)(defvar evil-lion-mode nil "Non-nil if Evil-Lion mode is enabled.
See the `evil-lion-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `evil-lion-mode'.")(autoload 'evil-lion-mode "evil-lion" "evil-lion global mode, defines align operators 'gl' and 'gL'.

If called interactively, enable Evil-Lion mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

  Align with `gl MOTION CHAR` or right-align with `gL MOTION CHAR`.

  If CHAR is `/` you will be prompted for a regular expression instead
  of a plain character.

  If CHAR is `RET` alignment will be performed with align.el's rules
  specific for the current major mode.

(fn &optional ARG)" t nil)(autoload 'evilnc-comment-or-uncomment-paragraphs "evil-nerd-commenter" "Comment or uncomment NUM paragraph(s).
A paragraph is a continuation non-empty lines.
Paragraphs are separated by empty lines.

(fn &optional NUM)" t nil)(autoload 'evilnc-comment-or-uncomment-to-the-line "evil-nerd-commenter" "Comment or uncomment from current line to LINENUM line.

(fn &optional LINENUM)" t nil)(autoload 'evilnc-quick-comment-or-uncomment-to-the-line "evil-nerd-commenter" "Comment/uncomment to line number by LAST-DIGITS.
For example, you can use either \\<M-53>\\[evilnc-quick-comment-or-uncomment-to-the-line] or \\<M-3>\\[evilnc-quick-comment-or-uncomment-to-the-line] to comment to the line 6453

(fn &optional LAST-DIGITS)" t nil)(autoload 'evilnc-toggle-invert-comment-line-by-line "evil-nerd-commenter" "Please note this command may NOT work on complex evil text objects." t nil)(autoload 'evilnc-toggle-comment-empty-lines "evil-nerd-commenter" "Toggle the flag which decide wether empty line will be commented." t nil)(autoload 'evilnc-comment-or-uncomment-lines "evil-nerd-commenter" "Comment or uncomment NUM lines.  NUM could be negative.

Case 1: If no region selected, comment/uncomment on current line.
If NUM>1, comment/uncomment extra N-1 lines from next line.

Case 2: Selected region is expanded to make it contain whole lines.
Then we comment/uncomment the expanded region.  NUM is ignored.

Case 3: If a region inside of ONE line is selected,
we comment/uncomment that region.
CORRECT comment syntax will be used for C++/Java/Javascript.

(fn &optional NUM)" t nil)(autoload 'evilnc-copy-and-comment-lines "evil-nerd-commenter" "Copy&paste NUM lines and comment out original lines.
NUM could be negative.

Case 1: If no region selected, operate on current line.
if NUM>1, comment/uncomment extra N-1 lines from next line

Case 2: Selected region is expanded to make it contain whole lines.
Then we operate the expanded region.  NUM is ignored.

(fn &optional NUM)" t nil)(autoload 'evilnc-comment-and-kill-ring-save "evil-nerd-commenter" "Comment lines save origin lines into `kill-ring'.
NUM could be negative.

Case 1: If no region selected, operate on current line.
;; if NUM>1, comment/uncomment extra N-1 lines from next line

Case 2: Selected region is expanded to make it contain whole lines.
Then we operate the expanded region.  NUM is ignored.

(fn &optional NUM)" t nil)(autoload 'evilnc-copy-to-line "evil-nerd-commenter" "Copy from current line to LINENUM line.  For non-evil user only.

(fn &optional LINENUM)" t nil)(autoload 'evilnc-kill-to-line "evil-nerd-commenter" "Kill from the current line to the LINENUM line.  For non-evil user only.

(fn &optional LINENUM)" t nil)(autoload 'evilnc-version "evil-nerd-commenter" "The version number." t nil)(autoload 'evilnc-default-hotkeys "evil-nerd-commenter" "Setup the key bindings of evil-nerd-comment.
If NO-EVIL-KEYBINDINGS is t, we don't define keybindings in EVIL,
if NO-EMACS-KEYBINDINGS is t, we don't define keybindings in EMACS mode.

(fn &optional NO-EVIL-KEYBINDINGS NO-EMACS-KEYBINDINGS)" t nil)(autoload 'evilnc-imenu-create-index-function "evil-nerd-commenter" "Imenu function find comments." nil nil)(autoload 'evilnc-comment-or-uncomment-html-tag "evil-nerd-commenter" "Comment or uncomment html tag(s).
If no region is selected, current tag under focus is automatically selected.
In this case, only one tag is selected.
If users manually select region, the region could cross multiple sibling tags
and automatically expands to include complete tags.
Users can press \"v\" key in evil mode to select multiple tags.
This command is not dependent on any 3rd party package." t nil)(autoload 'evilnc-comment-or-uncomment-html-paragraphs "evil-nerd-commenter" "Comment or uncomment NUM paragraphs contain html tag.
A paragraph is a continuation non-empty lines.
Paragraphs are separated by empty lines.

(fn &optional NUM)" t nil)(defvar evil-numbers/padDefault nil "Whether numbers are padded by default")(autoload 'evil-numbers/inc-at-pt "evil-numbers" nil t)(autoload 'evil-numbers/dec-at-pt "evil-numbers" nil t)(autoload 'evil-numbers/inc-at-pt-incremental "evil-numbers" nil t)(autoload 'evil-numbers/dec-at-pt-incremental "evil-numbers" nil t)(autoload 'evil-snipe-def "evil-snipe" "Define a N-char snipe, and bind it to FORWARD-KEY and BACKWARD-KEY. TYPE can
be inclusive or exclusive. Specify FORWARD-FN and/or BACKWARD-FN to explicitly
choose the function names.

(fn N TYPE FORWARD-KEY BACKWARD-KEY &key FORWARD-FN BACKWARD-FN)" nil t)(autoload 'evil-snipe-s "evil-snipe" nil t)(autoload 'evil-snipe-S "evil-snipe" nil t)(autoload 'evil-snipe-x "evil-snipe" nil t)(autoload 'evil-snipe-X "evil-snipe" nil t)(autoload 'evil-snipe-f "evil-snipe" nil t)(autoload 'evil-snipe-F "evil-snipe" nil t)(autoload 'evil-snipe-t "evil-snipe" nil t)(autoload 'evil-snipe-T "evil-snipe" nil t)(autoload 'turn-on-evil-snipe-mode "evil-snipe" "Enable evil-snipe-mode in the current buffer." nil nil)(autoload 'turn-on-evil-snipe-override-mode "evil-snipe" "Enable evil-snipe-mode in the current buffer." nil nil)(autoload 'turn-off-evil-snipe-mode "evil-snipe" "Disable `evil-snipe-local-mode' in the current buffer." nil nil)(autoload 'turn-off-evil-snipe-override-mode "evil-snipe" "Disable evil-snipe-override-mode in the current buffer." nil nil)(autoload 'evil-snipe-local-mode "evil-snipe" "evil-snipe minor mode.

If called interactively, enable Evil-Snipe-Local mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'evil-snipe-override-local-mode "evil-snipe" "evil-snipe minor mode that overrides evil-mode f/F/t/T/;/, bindings.

If called interactively, enable Evil-Snipe-Override-Local mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'evil-snipe-mode 'globalized-minor-mode t)(defvar evil-snipe-mode nil "Non-nil if Evil-Snipe mode is enabled.
See the `evil-snipe-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `evil-snipe-mode'.")(autoload 'evil-snipe-mode "evil-snipe" "Toggle Evil-Snipe-Local mode in all buffers.
With prefix ARG, enable Evil-Snipe mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Evil-Snipe-Local mode is enabled in all buffers where
`turn-on-evil-snipe-mode' would do it.
See `evil-snipe-local-mode' for more information on Evil-Snipe-Local mode.

(fn &optional ARG)" t nil)(put 'evil-snipe-override-mode 'globalized-minor-mode t)(defvar evil-snipe-override-mode nil "Non-nil if Evil-Snipe-Override mode is enabled.
See the `evil-snipe-override-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `evil-snipe-override-mode'.")(autoload 'evil-snipe-override-mode "evil-snipe" "Toggle Evil-Snipe-Override-Local mode in all buffers.
With prefix ARG, enable Evil-Snipe-Override mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Evil-Snipe-Override-Local mode is enabled in all buffers where
`turn-on-evil-snipe-override-mode' would do it.
See `evil-snipe-override-local-mode' for more information on Evil-Snipe-Override-Local mode.

(fn &optional ARG)" t nil)(autoload 'evil-textobj-anyblock-inner-block "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-a-block "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-forward-open-block-start "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-forward-open-block-end "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-forward-close-block-start "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-forward-close-block-end "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-backward-open-block-start "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-backward-open-block-end "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-backward-close-block-start "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-backward-close-block-end "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-forward-any-block-start "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-forward-any-block-end "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-backward-any-block-start "evil-textobj-anyblock" nil t)(autoload 'evil-textobj-anyblock-backward-any-block-end "evil-textobj-anyblock" nil t)(defvar evil-traces-mode nil "Non-nil if Evil-Traces mode is enabled.
See the `evil-traces-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `evil-traces-mode'.")(autoload 'evil-traces-mode "evil-traces" "Global minor mode for evil-traces.

If called interactively, enable Evil-Traces mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'evil-visualstar-mode "evil-visualstar" "Minor mode for visual star selection.

If called interactively, enable Evil-Visualstar mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-evil-visualstar-mode 'globalized-minor-mode t)(defvar global-evil-visualstar-mode nil "Non-nil if Global Evil-Visualstar mode is enabled.
See the `global-evil-visualstar-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-evil-visualstar-mode'.")(autoload 'global-evil-visualstar-mode "evil-visualstar" "Toggle Evil-Visualstar mode in all buffers.
With prefix ARG, enable Global Evil-Visualstar mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Evil-Visualstar mode is enabled in all buffers where
`turn-on-evil-visualstar-mode' would do it.
See `evil-visualstar-mode' for more information on Evil-Visualstar mode.

(fn &optional ARG)" t nil)(autoload 'turn-on-evil-visualstar-mode "evil-visualstar" "Turns on visual star selection." t nil)(autoload 'turn-off-evil-visualstar-mode "evil-visualstar" "Turns off visual star selection." t nil)(autoload 'evil-quick-diff "evil-quick-diff" "Ediff two regions with evil motion." t)(autoload 'evil-quick-diff-cancel "evil-quick-diff-cancel" "Cancel evil-quick-diff and remove selections." t)(autoload 'evil-quick-diff-install "evil-quick-diff" "Setting evil-quick-diff key bindings." nil nil)(autoload 'evil-collection-translate-key "evil-collection" "Translate keys in the keymap(s) corresponding to STATES and KEYMAPS.
STATES should be the name of an evil state, a list of states, or nil. KEYMAPS
should be a symbol corresponding to the keymap to make the translations in or a
list of keymap symbols. Like `evil-define-key', when a keymap does not exist,
the keybindings will be deferred until the keymap is defined, so
`with-eval-after-load' is not necessary. TRANSLATIONS corresponds to a list of
key replacement pairs. For example, specifying \"a\" \"b\" will bind \"a\" to
\"b\"'s definition in the keymap. Specifying nil as a replacement will unbind a
key. If DESTRUCTIVE is nil, a backup of the keymap will be stored on the initial
invocation, and future invocations will always look up keys in the backup
keymap. When no TRANSLATIONS are given, this function will only create the
backup keymap without making any translations. On the other hand, if DESTRUCTIVE
is non-nil, the keymap will be destructively altered without creating a backup.
For example, calling this function multiple times with \"a\" \"b\" \"b\" \"a\"
would continue to swap and unswap the definitions of these keys. This means that
when DESTRUCTIVE is non-nil, all related swaps/cycles should be done in the same
invocation.

(fn STATES KEYMAPS &rest TRANSLATIONS &key DESTRUCTIVE &allow-other-keys)" nil nil)(function-put 'evil-collection-translate-key 'lisp-indent-function 'defun)(autoload 'evil-collection-swap-key "evil-collection" "Wrapper around `evil-collection-translate-key' for swapping keys.
STATES, KEYMAPS, and ARGS are passed to `evil-collection-translate-key'. ARGS
should consist of key swaps (e.g. \"a\" \"b\" is equivalent to \"a\" \"b\" \"b\"
\"a\" with `evil-collection-translate-key') and optionally keyword arguments for
`evil-collection-translate-key'.

(fn STATES KEYMAPS &rest ARGS)" nil t)(function-put 'evil-collection-swap-key 'lisp-indent-function 'defun)(autoload 'evil-collection-require "evil-collection" "Require the evil-collection-MODE file, but do not activate it.

MODE should be a symbol. This requires the evil-collection-MODE
feature without needing to manipulate `load-path'. NOERROR is
forwarded to `require'.

(fn MODE &optional NOERROR)" nil nil)(autoload 'evil-collection-init "evil-collection" "Register the Evil bindings for all modes in `evil-collection-mode-list'.

Alternatively, you may register select bindings manually, for
instance:

  (with-eval-after-load 'calendar
    (evil-collection-calendar-setup))

If MODES is specified (as either one mode or a list of modes), use those modes
instead of the modes in `evil-collection-mode-list'.

(fn &optional MODES)" t nil)(autoload 'annalist-record "annalist" "In the store for ANNALIST, TYPE, and LOCAL, record RECORD.
ANNALIST should correspond to the package/user recording this information (e.g.
'general, 'me, etc.). TYPE is the type of information being recorded (e.g.
'keybindings). LOCAL corresponds to whether to store RECORD only for the current
buffer. This information together is used to select where RECORD should be
stored in and later retrieved from with `annalist-describe'. RECORD should be a
list of items to record and later print as org headings and column entries in a
single row. If PLIST is non-nil, RECORD should be a plist instead of an ordered
list (e.g. '(keymap org-mode-map key \"C-c a\" ...)). The plist keys should be
the symbols used for the definition of TYPE.

(fn ANNALIST TYPE RECORD &key LOCAL PLIST)" nil nil)(autoload 'annalist-describe "annalist" "Describe information recorded by ANNALIST for TYPE.
For example: (annalist-describe 'general 'keybindings) If VIEW is non-nil, use
those settings for displaying recorded information instead of the defaults.

(fn ANNALIST TYPE &optional VIEW)" nil nil)(autoload 'yas-minor-mode "yasnippet" "Toggle YASnippet mode.

If called interactively, enable Yas minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

When YASnippet mode is enabled, `yas-expand', normally bound to
the TAB key, expands snippets of code depending on the major
mode.

With no argument, this command toggles the mode.
positive prefix argument turns on the mode.
Negative prefix argument turns off the mode.

Key bindings:
\\{yas-minor-mode-map}

(fn &optional ARG)" t nil)(put 'yas-global-mode 'globalized-minor-mode t)(defvar yas-global-mode nil "Non-nil if Yas-Global mode is enabled.
See the `yas-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `yas-global-mode'.")(autoload 'yas-global-mode "yasnippet" "Toggle Yas minor mode in all buffers.
With prefix ARG, enable Yas-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Yas minor mode is enabled in all buffers where
`yas-minor-mode-on' would do it.
See `yas-minor-mode' for more information on Yas minor mode.

(fn &optional ARG)" t nil)(autoload 'snippet-mode "yasnippet" "A mode for editing yasnippets" t nil)(autoload 'vimish-fold "vimish-fold" "Fold active region staring at BEG, ending at END.

(fn BEG END)" t nil)(autoload 'vimish-fold-unfold "vimish-fold" "Delete all `vimish-fold--folded' overlays at point." t nil)(autoload 'vimish-fold-refold "vimish-fold" "Refold unfolded fold at point." t nil)(autoload 'vimish-fold-delete "vimish-fold" "Delete fold at point." t nil)(autoload 'vimish-fold-unfold-all "vimish-fold" "Unfold all folds in current buffer." t nil)(autoload 'vimish-fold-refold-all "vimish-fold" "Refold all closed folds in current buffer." t nil)(autoload 'vimish-fold-delete-all "vimish-fold" "Delete all folds in current buffer." t nil)(autoload 'vimish-fold-toggle "vimish-fold" "Toggle fold at point." t nil)(autoload 'vimish-fold-toggle-all "vimish-fold" "Toggle all folds in current buffer." t nil)(autoload 'vimish-fold-avy "vimish-fold" "Fold region of text between point and line selected with avy.

This feature needs `avy' package." t nil)(autoload 'vimish-fold-next-fold "vimish-fold" "Jump to next folded region in current buffer." t nil)(autoload 'vimish-fold-previous-fold "vimish-fold" "Jump to previous folded region in current buffer." t nil)(autoload 'vimish-fold-from-marks "vimish-fold" "Create folds from folding symbols.

Mark strings are controlled by `vimish-fold-marks' customize variable." t nil)(autoload 'vimish-fold-mode "vimish-fold" "Toggle `vimish-fold-mode' minor mode.

With a prefix argument ARG, enable `vimish-fold-mode' mode if ARG
is positive, and disable it otherwise.  If called from Lisp,
enable the mode if ARG is omitted or NIL, and toggle it if ARG is
`toggle'.

This minor mode sets hooks so when you `find-file' it calls
`vimish-fold--restore-folds' and when you kill a file it calls
`vimish-fold--save-folds'.

For globalized version of this mode see `vimish-fold-global-mode'.

(fn &optional ARG)" t nil)(put 'vimish-fold-global-mode 'globalized-minor-mode t)(defvar vimish-fold-global-mode nil "Non-nil if Vimish-Fold-Global mode is enabled.
See the `vimish-fold-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vimish-fold-global-mode'.")(autoload 'vimish-fold-global-mode "vimish-fold" "Toggle Vimish-Fold mode in all buffers.
With prefix ARG, enable Vimish-Fold-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Vimish-Fold mode is enabled in all buffers where
`vimish-fold-mode' would do it.
See `vimish-fold-mode' for more information on Vimish-Fold mode.

(fn &optional ARG)" t nil)(autoload 'evil-vimish-fold-mode "evil-vimish-fold" "Evil-vimish-fold-mode.

If called interactively, enable Evil-Vimish-Fold mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-evil-vimish-fold-mode 'globalized-minor-mode t)(defvar global-evil-vimish-fold-mode nil "Non-nil if Global Evil-Vimish-Fold mode is enabled.
See the `global-evil-vimish-fold-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-evil-vimish-fold-mode'.")(autoload 'global-evil-vimish-fold-mode "evil-vimish-fold" "Toggle Evil-Vimish-Fold mode in all buffers.
With prefix ARG, enable Global Evil-Vimish-Fold mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Evil-Vimish-Fold mode is enabled in all buffers where
`turn-on-evil-vimish-fold-mode' would do it.
See `evil-vimish-fold-mode' for more information on Evil-Vimish-Fold mode.

(fn &optional ARG)" t nil)(autoload 'turn-on-evil-vimish-fold-mode "evil-vimish-fold" nil nil nil)(autoload 'turn-off-evil-vimish-fold-mode "evil-vimish-fold" "Turn off `evil-vimish-fold-mode'." t nil)(autoload 'aya-create-one-line "auto-yasnippet" "A simplistic `aya-create' to create only one mirror.
You can still have as many instances of this mirror as you want.
It's less flexible than `aya-create', but faster.
It uses a different marker, which is `aya-marker-one-line'.
You can use it to quickly generate one-liners such as
menu.add_item(spamspamspam, \"spamspamspam\")" t nil)(autoload 'aya-create "auto-yasnippet" "Create a snippet from the text between BEG and END.
When the bounds are not given, use either the current region or line.

Remove `aya-marker' prefixes, write the corresponding snippet to
`aya-current', with words prefixed by `aya-marker' as fields, and
mirrors properly set up.

(fn &optional BEG END)" t nil)(autoload 'aya-expand "auto-yasnippet" "Insert the last yasnippet created by `aya-create'." t nil)(autoload 'aya-open-line "auto-yasnippet" "Call `open-line', unless there are abbrevs or snippets at point.
In that case expand them.  If there's a snippet expansion in progress,
move to the next field.  Call `open-line' if nothing else applies." t nil)(autoload 'aya-yank-snippet "auto-yasnippet" "Insert current snippet at point.
To save a snippet permanently, create an empty file and call this." t nil)(autoload 'doom-snippets-remove-compiled-snippets "doom-snippets" "Delete all .yas-compiled-snippets.el files." t nil)(autoload 'doom-snippets-initialize "doom-snippets" "Add `doom-snippets-dir' to `yas-snippet-dirs', replacing the default
yasnippet directory." nil nil)(eval-after-load 'yasnippet (lambda nil (doom-snippets-initialize)))(autoload 'diredfl-mode "diredfl" "Enable additional font locking in `dired-mode'.

If called interactively, enable Diredfl mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'diredfl-global-mode 'globalized-minor-mode t)(defvar diredfl-global-mode nil "Non-nil if Diredfl-Global mode is enabled.
See the `diredfl-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `diredfl-global-mode'.")(autoload 'diredfl-global-mode "diredfl" "Toggle Diredfl mode in all buffers.
With prefix ARG, enable Diredfl-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Diredfl mode is enabled in all buffers where
`(lambda nil (when (derived-mode-p 'dired-mode) (diredfl-mode)))' would do it.
See `diredfl-mode' for more information on Diredfl mode.

(fn &optional ARG)" t nil)(autoload 'dired-git-info-mode "dired-git-info" "Toggle git message info in current dired buffer.

If called interactively, enable Dired-Git-Info mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'dired-git-info-auto-enable "dired-git-info" "Enable `dired-git-info-mode' if current dired buffer is in a git repo.

Add this function to `dired-after-readin-hook' to enable the mode
automatically inside git repos." nil nil)(autoload 'diff-hl-mode "diff-hl" "Toggle VC diff highlighting.

If called interactively, enable Diff-Hl mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'turn-on-diff-hl-mode "diff-hl" "Turn on `diff-hl-mode' or `diff-hl-dir-mode' in a buffer if appropriate." nil nil)(autoload 'diff-hl--global-turn-on "diff-hl" "Call `turn-on-diff-hl-mode' if the current major mode is applicable." nil nil)(put 'global-diff-hl-mode 'globalized-minor-mode t)(defvar global-diff-hl-mode nil "Non-nil if Global Diff-Hl mode is enabled.
See the `global-diff-hl-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-diff-hl-mode'.")(autoload 'global-diff-hl-mode "diff-hl" "Toggle Diff-Hl mode in all buffers.
With prefix ARG, enable Global Diff-Hl mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Diff-Hl mode is enabled in all buffers where
`diff-hl--global-turn-on' would do it.
See `diff-hl-mode' for more information on Diff-Hl mode.

(fn &optional ARG)" t nil)(autoload 'diff-hl-amend-mode "diff-hl-amend" "Show changes against the second-last revision in `diff-hl-mode'.
Most useful with backends that support rewriting local commits,
and most importantly, 'amending' the most recent one.
Currently only supports Git, Mercurial and Bazaar.

If called interactively, enable Diff-Hl-Amend mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-diff-hl-amend-mode 'globalized-minor-mode t)(defvar global-diff-hl-amend-mode nil "Non-nil if Global Diff-Hl-Amend mode is enabled.
See the `global-diff-hl-amend-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-diff-hl-amend-mode'.")(autoload 'global-diff-hl-amend-mode "diff-hl-amend" "Toggle Diff-Hl-Amend mode in all buffers.
With prefix ARG, enable Global Diff-Hl-Amend mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Diff-Hl-Amend mode is enabled in all buffers where
`turn-on-diff-hl-amend-mode' would do it.
See `diff-hl-amend-mode' for more information on Diff-Hl-Amend mode.

(fn &optional ARG)" t nil)(autoload 'diff-hl-dired-mode "diff-hl-dired" "Toggle VC diff highlighting on the side of a Dired window.

If called interactively, enable Diff-Hl-Dired mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'diff-hl-dired-mode-unless-remote "diff-hl-dired" nil nil nil)(defvar diff-hl-flydiff-mode nil "Non-nil if Diff-Hl-Flydiff mode is enabled.
See the `diff-hl-flydiff-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `diff-hl-flydiff-mode'.")(autoload 'diff-hl-flydiff-mode "diff-hl-flydiff" "Perform highlighting on-the-fly.
This is a global minor mode.  It alters how `diff-hl-mode' works.

If called interactively, enable Diff-Hl-Flydiff mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(defvar diff-hl-margin-mode nil "Non-nil if Diff-Hl-Margin mode is enabled.
See the `diff-hl-margin-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `diff-hl-margin-mode'.")(autoload 'diff-hl-margin-mode "diff-hl-margin" "Toggle displaying `diff-hl-mode' highlights on the margin.

If called interactively, enable Diff-Hl-Margin mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'dired-rsync "dired-rsync" "Asynchronously copy files in dired to `DEST' using rsync.

`DEST' can be a relative filename and will be processed by
`expand-file-name' before being passed to the rsync command.

This function runs the copy asynchronously so Emacs won't block whilst
the copy is running.  It also handles both source and destinations on
ssh/scp tramp connections.

(fn DEST)" t nil)(autoload 'fd-dired "fd-dired" "Run `fd' and go into Dired mode on a buffer of the output.
The command run (after changing into DIR) is essentially

    fd . ARGS -ls

except that the car of the variable `fd-dired-ls-option' specifies what to
use in place of \"-ls\" as the final argument.

(fn DIR ARGS)" t nil)(autoload 'undo-fu-disable-checkpoint "undo-fu" "Remove the undo-fu checkpoint, making all future actions unconstrained.

This command is needed when `undo-fu-ignore-keyboard-quit' is t,
since in this case `keyboard-quit' cannot be used
to perform unconstrained undo/redo actions." t nil)(autoload 'undo-fu-only-redo-all "undo-fu" "Redo all actions until the initial undo step.

wraps the `undo' function." t nil)(autoload 'undo-fu-only-redo "undo-fu" "Redo an action until the initial undo action.

wraps the `undo' function.

Optional argument ARG The number of steps to redo.

(fn &optional ARG)" t nil)(autoload 'undo-fu-only-undo "undo-fu" "Undo the last action.

wraps the `undo-only' function.

Optional argument ARG the number of steps to undo.

(fn &optional ARG)" t nil)(autoload 'undo-fu-session-mode "undo-fu-session" "Toggle saving the undo data in the current buffer (Undo-Fu Session Mode).

If called interactively, enable Undo-Fu-Session mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-undo-fu-session-mode 'globalized-minor-mode t)(defvar global-undo-fu-session-mode nil "Non-nil if Global Undo-Fu-Session mode is enabled.
See the `global-undo-fu-session-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-undo-fu-session-mode'.")(autoload 'global-undo-fu-session-mode "undo-fu-session" "Toggle Undo-Fu-Session mode in all buffers.
With prefix ARG, enable Global Undo-Fu-Session mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Undo-Fu-Session mode is enabled in all buffers where
`undo-fu-session-mode-turn-on' would do it.
See `undo-fu-session-mode' for more information on Undo-Fu-Session mode.

(fn &optional ARG)" t nil)(autoload 'browse-at-remote "browse-at-remote" "Browse the current file with `browse-url'." t nil)(autoload 'browse-at-remote-kill "browse-at-remote" "Add the URL of the current file to the kill ring.

Works like `browse-at-remote', but puts the address in the
kill ring instead of opening it with `browse-url'." t nil)(defalias 'bar-browse 'browse-at-remote "Browse the current file with `browse-url'.")(defalias 'bar-to-clipboard 'browse-at-remote-kill "Add the URL of the current file to the kill ring.

Works like `browse-at-remote', but puts the address in the
kill ring instead of opening it with `browse-url'.")(defvar global-git-commit-mode t "Non-nil if Global Git-Commit mode is enabled.
See the `global-git-commit-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-git-commit-mode'.")(autoload 'global-git-commit-mode "git-commit" "Edit Git commit messages.
This global mode arranges for `git-commit-setup' to be called
when a Git commit message file is opened.  That usually happens
when Git uses the Emacsclient as $GIT_EDITOR to have the user
provide such a commit message.

If called interactively, enable Global Git-Commit mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(defconst git-commit-filename-regexp "/\\(\\(\\(COMMIT\\|NOTES\\|PULLREQ\\|MERGEREQ\\|TAG\\)_EDIT\\|MERGE_\\|\\)MSG\\|\\(BRANCH\\|EDIT\\)_DESCRIPTION\\)\\'")(autoload 'git-commit-setup-check-buffer "git-commit" nil nil nil)(autoload 'git-commit-setup "git-commit" nil nil nil)(autoload 'transient-insert-suffix "transient" "Insert a SUFFIX into PREFIX before LOC.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

(fn PREFIX LOC SUFFIX)" nil nil)(function-put 'transient-insert-suffix 'lisp-indent-function 'defun)(autoload 'transient-append-suffix "transient" "Insert a SUFFIX into PREFIX after LOC.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

(fn PREFIX LOC SUFFIX)" nil nil)(function-put 'transient-append-suffix 'lisp-indent-function 'defun)(autoload 'transient-replace-suffix "transient" "Replace the suffix at LOC in PREFIX with SUFFIX.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

(fn PREFIX LOC SUFFIX)" nil nil)(function-put 'transient-replace-suffix 'lisp-indent-function 'defun)(autoload 'transient-remove-suffix "transient" "Remove the suffix or group at LOC in PREFIX.
PREFIX is a prefix command, a symbol.
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

(fn PREFIX LOC)" nil nil)(function-put 'transient-remove-suffix 'lisp-indent-function 'defun)(autoload 'with-editor-export-editor "with-editor" "Teach subsequent commands to use current Emacs instance as editor.

Set and export the environment variable ENVVAR, by default
\"EDITOR\".  The value is automatically generated to teach
commands to use the current Emacs instance as \"the editor\".

This works in `shell-mode', `term-mode' and `eshell-mode'.

(fn &optional (ENVVAR \"EDITOR\"))" t nil)(autoload 'with-editor-export-git-editor "with-editor" "Like `with-editor-export-editor' but always set `$GIT_EDITOR'." t nil)(autoload 'with-editor-export-hg-editor "with-editor" "Like `with-editor-export-editor' but always set `$HG_EDITOR'." t nil)(defvar shell-command-with-editor-mode nil "Non-nil if Shell-Command-With-Editor mode is enabled.
See the `shell-command-with-editor-mode' command
for a description of this minor mode.")(autoload 'shell-command-with-editor-mode "with-editor" "Teach `shell-command' to use current Emacs instance as editor.

If called interactively, enable Shell-Command-With-Editor mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

Teach `shell-command', and all commands that ultimately call that
command, to use the current Emacs instance as editor by executing
\"EDITOR=CLIENT COMMAND&\" instead of just \"COMMAND&\".

CLIENT is automatically generated; EDITOR=CLIENT instructs
COMMAND to use to the current Emacs instance as \"the editor\",
assuming no other variable overrides the effect of \"$EDITOR\".
CLIENT may be the path to an appropriate emacsclient executable
with arguments, or a script which also works over Tramp.

Alternatively you can use the `with-editor-async-shell-command',
which also allows the use of another variable instead of
\"EDITOR\".

(fn &optional ARG)" t nil)(autoload 'with-editor-async-shell-command "with-editor" "Like `async-shell-command' but with `$EDITOR' set.

Execute string \"ENVVAR=CLIENT COMMAND\" in an inferior shell;
display output, if any.  With a prefix argument prompt for an
environment variable, otherwise the default \"EDITOR\" variable
is used.  With a negative prefix argument additionally insert
the COMMAND's output at point.

CLIENT is automatically generated; ENVVAR=CLIENT instructs
COMMAND to use to the current Emacs instance as \"the editor\",
assuming it respects ENVVAR as an \"EDITOR\"-like variable.
CLIENT may be the path to an appropriate emacsclient executable
with arguments, or a script which also works over Tramp.

Also see `async-shell-command' and `shell-command'.

(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER ENVVAR)" t nil)(autoload 'with-editor-shell-command "with-editor" "Like `shell-command' or `with-editor-async-shell-command'.
If COMMAND ends with \"&\" behave like the latter,
else like the former.

(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER ENVVAR)" t nil)(autoload 'async-start-process "async" "Start the executable PROGRAM asynchronously named NAME.  See `async-start'.
PROGRAM is passed PROGRAM-ARGS, calling FINISH-FUNC with the
process object when done.  If FINISH-FUNC is nil, the future
object will return the process object when the program is
finished.  Set DEFAULT-DIRECTORY to change PROGRAM's current
working directory.

(fn NAME PROGRAM FINISH-FUNC &rest PROGRAM-ARGS)" nil nil)(autoload 'async-start "async" "Execute START-FUNC (often a lambda) in a subordinate Emacs process.
When done, the return value is passed to FINISH-FUNC.  Example:

    (async-start
       ;; What to do in the child process
       (lambda ()
         (message \"This is a test\")
         (sleep-for 3)
         222)

       ;; What to do when it finishes
       (lambda (result)
         (message \"Async process done, result should be 222: %s\"
                  result)))

If FINISH-FUNC is nil or missing, a future is returned that can
be inspected using `async-get', blocking until the value is
ready.  Example:

    (let ((proc (async-start
                   ;; What to do in the child process
                   (lambda ()
                     (message \"This is a test\")
                     (sleep-for 3)
                     222))))

        (message \"I'm going to do some work here\") ;; ....

        (message \"Waiting on async process, result should be 222: %s\"
                 (async-get proc)))

If you don't want to use a callback, and you don't care about any
return value from the child process, pass the `ignore' symbol as
the second argument (if you don't, and never call `async-get', it
will leave *emacs* process buffers hanging around):

    (async-start
     (lambda ()
       (delete-file \"a remote file on a slow link\" nil))
     'ignore)

Note: Even when FINISH-FUNC is present, a future is still
returned except that it yields no value (since the value is
passed to FINISH-FUNC).  Call `async-get' on such a future always
returns nil.  It can still be useful, however, as an argument to
`async-ready' or `async-wait'.

(fn START-FUNC &optional FINISH-FUNC)" nil nil)(autoload 'async-byte-recompile-directory "async-bytecomp" "Compile all *.el files in DIRECTORY asynchronously.
All *.elc files are systematically deleted before proceeding.

(fn DIRECTORY &optional QUIET)" nil nil)(defvar async-bytecomp-package-mode nil "Non-nil if Async-Bytecomp-Package mode is enabled.
See the `async-bytecomp-package-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `async-bytecomp-package-mode'.")(autoload 'async-bytecomp-package-mode "async-bytecomp" "Byte compile asynchronously packages installed with package.el.
Async compilation of packages can be controlled by
`async-bytecomp-allowed-packages'.

If called interactively, enable Async-Bytecomp-Package mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'async-byte-compile-file "async-bytecomp" "Byte compile Lisp code FILE asynchronously.

Same as `byte-compile-file' but asynchronous.

(fn FILE)" t nil)(defvar dired-async-mode nil "Non-nil if Dired-Async mode is enabled.
See the `dired-async-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dired-async-mode'.")(autoload 'dired-async-mode "dired-async" "Do dired actions asynchronously.

If called interactively, enable Dired-Async mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'dired-async-do-copy "dired-async" "Run ‘dired-do-copy’ asynchronously.

(fn &optional ARG)" t nil)(autoload 'dired-async-do-symlink "dired-async" "Run ‘dired-do-symlink’ asynchronously.

(fn &optional ARG)" t nil)(autoload 'dired-async-do-hardlink "dired-async" "Run ‘dired-do-hardlink’ asynchronously.

(fn &optional ARG)" t nil)(autoload 'dired-async-do-rename "dired-async" "Run ‘dired-do-rename’ asynchronously.

(fn &optional ARG)" t nil)(autoload 'git-timemachine-toggle "git-timemachine" "Toggle git timemachine mode." t nil)(autoload 'git-timemachine "git-timemachine" "Enable git timemachine for file of current buffer." t nil)(autoload 'git-timemachine-switch-branch "git-timemachine" "Enable git timemachine for current buffer, switching to GIT-BRANCH.

(fn GIT-BRANCH)" t nil)(autoload 'gitconfig-mode "gitconfig-mode" "A major mode for editing .gitconfig files.

(fn)" t nil)(dolist (pattern '("/\\.gitconfig\\'" "/\\.git/config\\'" "/modules/.*/config\\'" "/git/config\\'" "/\\.gitmodules\\'" "/etc/gitconfig\\'")) (add-to-list 'auto-mode-alist (cons pattern 'gitconfig-mode)))(autoload 'gitignore-mode "gitignore-mode" "A major mode for editing .gitignore files.

(fn)" t nil)(dolist (pattern (list "/\\.gitignore\\'" "/info/exclude\\'" "/git/ignore\\'")) (add-to-list 'auto-mode-alist (cons pattern 'gitignore-mode)))(autoload 'flycheck-manual "flycheck" "Open the Flycheck manual." t nil)(autoload 'flycheck-mode "flycheck" "Flycheck is a minor mode for on-the-fly syntax checking.

In `flycheck-mode' the buffer is automatically syntax-checked
using the first suitable syntax checker from `flycheck-checkers'.
Use `flycheck-select-checker' to select a checker for the current
buffer manually.

If you run into issues, use `\\[flycheck-verify-setup]' to get help.

Flycheck supports many languages out of the box, and many
additional ones are available on MELPA.  Adding new ones is very
easy.  Complete documentation is available online at URL
`https://www.flycheck.org/en/latest/'.  Please report issues and
request features at URL `https://github.com/flycheck/flycheck'.

Flycheck displays its status in the mode line.  In the default
configuration, it looks like this:

`FlyC'     This buffer has not been checked yet.
`FlyC-'    Flycheck doesn't have a checker for this buffer.
`FlyC*'    Flycheck is running.  Expect results soon!
`FlyC:3|2' This buffer contains three warnings and two errors.
           Use `\\[flycheck-list-errors]' to see the list.

You may also see the following icons:
`FlyC!'    The checker crashed.
`FlyC.'    The last syntax check was manually interrupted.
`FlyC?'    The checker did something unexpected, like exiting with 1
           but returning no errors.

The following keybindings are available in `flycheck-mode':

\\{flycheck-mode-map}
(you can change the prefix by customizing
`flycheck-keymap-prefix')

If called interactively, enable Flycheck mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is ‘toggle’; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-flycheck-mode 'globalized-minor-mode t)(defvar global-flycheck-mode nil "Non-nil if Global Flycheck mode is enabled.
See the `global-flycheck-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-flycheck-mode'.")(autoload 'global-flycheck-mode "flycheck" "Toggle Flycheck mode in all buffers.
With prefix ARG, enable Global Flycheck mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Flycheck mode is enabled in all buffers where
`flycheck-mode-on-safe' would do it.
See `flycheck-mode' for more information on Flycheck mode.

(fn &optional ARG)" t nil)(autoload 'flycheck-define-error-level "flycheck" "Define a new error LEVEL with PROPERTIES.

The following PROPERTIES constitute an error level:

`:severity SEVERITY'
     A number denoting the severity of this level.  The higher
     the number, the more severe is this level compared to other
     levels.  Defaults to 0; info is -10, warning is 10, and
     error is 100.

     The severity is used by `flycheck-error-level-<' to
     determine the ordering of errors according to their levels.

`:compilation-level LEVEL'

     A number indicating the broad class of messages that errors
     at this level belong to: one of 0 (info), 1 (warning), or
     2 or nil (error).  Defaults to nil.

     This is used by `flycheck-checker-pattern-to-error-regexp'
     to map error levels into `compilation-mode''s hierarchy and
     to get proper highlighting of errors in `compilation-mode'.

`:overlay-category CATEGORY'
     A symbol denoting the overlay category to use for error
     highlight overlays for this level.  See Info
     node `(elisp)Overlay Properties' for more information about
     overlay categories.

     A category for an error level overlay should at least define
     the `face' property, for error highlighting.  Another useful
     property for error level categories is `priority', to
     influence the stacking of multiple error level overlays.

`:fringe-bitmap BITMAPS'
     A fringe bitmap symbol denoting the bitmap to use for fringe
     indicators for this level, or a cons of two bitmaps (one for
     narrow fringes and one for wide fringes).  See Info node
     `(elisp)Fringe Bitmaps' for more information about fringe
     bitmaps, including a list of built-in fringe bitmaps.

`:fringe-face FACE'
     A face symbol denoting the face to use for fringe indicators
     for this level.

`:margin-spec SPEC'
     A display specification indicating what to display in the
     margin when `flycheck-indication-mode' is `left-margin' or
     `right-margin'.  See Info node `(elisp)Displaying in the
     Margins'.  If omitted, Flycheck generates an image spec from
     the fringe bitmap.

`:error-list-face FACE'
     A face symbol denoting the face to use for messages of this
     level in the error list.  See `flycheck-list-errors'.

(fn LEVEL &rest PROPERTIES)" nil nil)(function-put 'flycheck-define-error-level 'lisp-indent-function '1)(autoload 'flycheck-define-command-checker "flycheck" "Define SYMBOL as syntax checker to run a command.

Define SYMBOL as generic syntax checker via
`flycheck-define-generic-checker', which uses an external command
to check the buffer.  SYMBOL and DOCSTRING are the same as for
`flycheck-define-generic-checker'.

In addition to the properties understood by
`flycheck-define-generic-checker', the following PROPERTIES
constitute a command syntax checker.  Unless otherwise noted, all
properties are mandatory.  Note that the default `:error-filter'
of command checkers is `flycheck-sanitize-errors'.

`:command COMMAND'
     The command to run for syntax checking.

     COMMAND is a list of the form `(EXECUTABLE [ARG ...])'.

     EXECUTABLE is a string with the executable of this syntax
     checker.  It can be overridden with the variable
     `flycheck-SYMBOL-executable'.  Note that this variable is
     NOT implicitly defined by this function.  Use
     `flycheck-def-executable-var' to define this variable.

     Each ARG is an argument to the executable, either as string,
     or as special symbol or form for
     `flycheck-substitute-argument', which see.

`:error-patterns PATTERNS'
     A list of patterns to parse the output of the `:command'.

     Each ITEM in PATTERNS is a list `(LEVEL SEXP ...)', where
     LEVEL is a Flycheck error level (see
     `flycheck-define-error-level'), followed by one or more RX
     `SEXP's which parse an error of that level and extract line,
     column, file name and the message.

     See `rx' for general information about RX, and
     `flycheck-rx-to-string' for some special RX forms provided
     by Flycheck.

     All patterns are applied in the order of declaration to the
     whole output of the syntax checker.  Output already matched
     by a pattern will not be matched by subsequent patterns.  In
     other words, the first pattern wins.

     This property is optional.  If omitted, however, an
     `:error-parser' is mandatory.

`:error-parser FUNCTION'
     A function to parse errors with.

     The function shall accept three arguments OUTPUT CHECKER
     BUFFER.  OUTPUT is the syntax checker output as string,
     CHECKER the syntax checker that was used, and BUFFER a
     buffer object representing the checked buffer.  The function
     must return a list of `flycheck-error' objects parsed from
     OUTPUT.

     This property is optional.  If omitted, it defaults to
     `flycheck-parse-with-patterns'.  In this case,
     `:error-patterns' is mandatory.

`:standard-input t'
     Whether to send the buffer contents on standard input.

     If this property is given and has a non-nil value, send the
     contents of the buffer on standard input.

     Defaults to nil.

Note that you may not give `:start', `:interrupt', and
`:print-doc' for a command checker.  You can give a custom
`:verify' function, though, whose results will be appended to the
default `:verify' function of command checkers.

(fn SYMBOL DOCSTRING &rest PROPERTIES)" nil nil)(function-put 'flycheck-define-command-checker 'lisp-indent-function '1)(function-put 'flycheck-define-command-checker 'doc-string-elt '2)(autoload 'flycheck-def-config-file-var "flycheck" "Define SYMBOL as config file variable for CHECKER, with default FILE-NAME.

SYMBOL is declared as customizable variable using `defcustom', to
provide configuration files for the given syntax CHECKER.
CUSTOM-ARGS are forwarded to `defcustom'.

FILE-NAME is the initial value of the new variable.  If omitted,
the default value is nil.  It can be either a string or a list of
strings.

Use this together with the `config-file' form in the `:command'
argument to `flycheck-define-checker'.

(fn SYMBOL CHECKER &optional FILE-NAME &rest CUSTOM-ARGS)" nil t)(function-put 'flycheck-def-config-file-var 'lisp-indent-function '3)(autoload 'flycheck-def-option-var "flycheck" "Define SYMBOL as option variable with INIT-VALUE for CHECKER.

SYMBOL is declared as customizable variable using `defcustom', to
provide an option for the given syntax CHECKERS (a checker or a
list of checkers).  INIT-VALUE is the initial value of the
variable, and DOCSTRING is its docstring.  CUSTOM-ARGS are
forwarded to `defcustom'.

Use this together with the `option', `option-list' and
`option-flag' forms in the `:command' argument to
`flycheck-define-checker'.

(fn SYMBOL INIT-VALUE CHECKERS DOCSTRING &rest CUSTOM-ARGS)" nil t)(function-put 'flycheck-def-option-var 'lisp-indent-function '3)(function-put 'flycheck-def-option-var 'doc-string-elt '4)(autoload 'flycheck-define-checker "flycheck" "Define SYMBOL as command syntax checker with DOCSTRING and PROPERTIES.

Like `flycheck-define-command-checker', but PROPERTIES must not
be quoted.  Also, implicitly define the executable variable for
SYMBOL with `flycheck-def-executable-var'.

(fn SYMBOL DOCSTRING &rest PROPERTIES)" nil t)(function-put 'flycheck-define-checker 'lisp-indent-function '1)(function-put 'flycheck-define-checker 'doc-string-elt '2)(autoload 'flycheck-popup-tip-mode "flycheck-popup-tip" "A minor mode to show Flycheck error messages in a popup.

If called interactively, enable Flycheck-Popup-Tip mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'quickrun-set-default "quickrun" "Set `key' as default key in programing language `lang'.

(fn LANG KEY)" nil nil)(autoload 'quickrun-add-command "quickrun" "Not documented.

(fn KEY ALIST &key DEFAULT MODE OVERRIDE)" nil nil)(function-put 'quickrun-add-command 'lisp-indent-function 'defun)(autoload 'quickrun "quickrun" "Run commands quickly for current buffer
   With universal prefix argument(C-u), select command-key,
   With double prefix argument(C-u C-u), run in compile-only-mode.

(fn &rest PLIST)" t nil)(autoload 'quickrun-with-arg "quickrun" "Run commands quickly for current buffer with arguments.

(fn ARG)" t nil)(autoload 'quickrun-region "quickrun" "Run commands with specified region.

(fn START END)" t nil)(autoload 'quickrun-replace-region "quickrun" "Run commands with specified region and replace.

(fn START END)" t nil)(autoload 'quickrun-eval-print "quickrun" "Run commands with specified region and replace.

(fn START END)" t nil)(autoload 'quickrun-compile-only "quickrun" "Exec only compilation." t nil)(autoload 'quickrun-shell "quickrun" "Run commands in shell for interactive programs." t nil)(autoload 'quickrun-autorun-mode "quickrun" "`quickrun' after saving buffer.

If called interactively, enable Quickrun-Autorun mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'anything-quickrun "quickrun" "Run quickrun with `anything'." t nil)(autoload 'helm-quickrun "quickrun" "Run quickrun with `helm'." t nil)(defvar eros-mode nil "Non-nil if Eros mode is enabled.
See the `eros-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `eros-mode'.")(autoload 'eros-mode "eros" "Display Emacs Lisp evaluation results overlays.

If called interactively, enable Eros mode if ARG is positive, and
disable it if ARG is zero or negative.  If called from Lisp, also
enable the mode if ARG is omitted or nil, and toggle it if ARG is
`toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(defvar dumb-jump-mode-map (let ((map (make-sparse-keymap))) (define-key map (kbd "C-M-g") 'dumb-jump-go) (define-key map (kbd "C-M-p") 'dumb-jump-back) (define-key map (kbd "C-M-q") 'dumb-jump-quick-look) map))(autoload 'dumb-jump-back "dumb-jump" "Jump back to where the last jump was done." t nil)(autoload 'dumb-jump-quick-look "dumb-jump" "Run dumb-jump-go in quick look mode.  That is, show a tooltip of where it would jump instead." t nil)(autoload 'dumb-jump-go-other-window "dumb-jump" "Like 'dumb-jump-go' but use 'find-file-other-window' instead of 'find-file'." t nil)(autoload 'dumb-jump-go-current-window "dumb-jump" "Like dumb-jump-go but always use 'find-file'." t nil)(autoload 'dumb-jump-go-prefer-external "dumb-jump" "Like dumb-jump-go but prefer external matches from the current file." t nil)(autoload 'dumb-jump-go-prompt "dumb-jump" "Like dumb-jump-go but prompts for function instead of using under point" t nil)(autoload 'dumb-jump-go-prefer-external-other-window "dumb-jump" "Like dumb-jump-go-prefer-external but use 'find-file-other-window' instead of 'find-file'." t nil)(autoload 'dumb-jump-go "dumb-jump" "Go to the function/variable declaration for thing at point.
When USE-TOOLTIP is t a tooltip jump preview will show instead.
When PREFER-EXTERNAL is t it will sort external matches before
current file.

(fn &optional USE-TOOLTIP PREFER-EXTERNAL PROMPT)" t nil)(defvar dumb-jump-mode nil "Non-nil if Dumb-Jump mode is enabled.
See the `dumb-jump-mode' command
for a description of this minor mode.")(autoload 'dumb-jump-mode "dumb-jump" "Minor mode for jumping to variable and function definitions

If called interactively, enable Dumb-Jump mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'dumb-jump-xref-activate "dumb-jump" "Function to activate xref backend.
Add this function to `xref-backend-functions' to dumb jump to be
activiated, whenever it finds a project. It is recommended to add
it to the end, so that it only gets activated when no better
option is found." nil nil)(autoload 'ivy-xref-show-xrefs "ivy-xref" "Show the list of xrefs returned by FETCHER and ALIST via ivy.

(fn FETCHER ALIST)" nil nil)(autoload 'ivy-xref-show-defs "ivy-xref" "Show the list of definitions returned by FETCHER and ALIST via ivy.
Will jump to the definition if only one is found.

(fn FETCHER ALIST)" nil nil)(autoload 'git-rebase-current-line "git-rebase" "Parse current line into a `git-rebase-action' instance.
If the current line isn't recognized as a rebase line, an
instance with all nil values is returned." nil nil)(autoload 'git-rebase-mode "git-rebase" "Major mode for editing of a Git rebase file.

Rebase files are generated when you run 'git rebase -i' or run
`magit-interactive-rebase'.  They describe how Git should perform
the rebase.  See the documentation for git-rebase (e.g., by
running 'man git-rebase' at the command line) for details.

(fn)" t nil)(defconst git-rebase-filename-regexp "/git-rebase-todo\\'")(autoload 'magit-dispatch "magit" nil t)(autoload 'magit-run "magit" nil t)(autoload 'magit-git-command "magit" "Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer. \"git \" is
used as initial input, but can be deleted to run another command.

With a prefix argument COMMAND is run in the top-level directory
of the current working tree, otherwise in `default-directory'.

(fn COMMAND)" t nil)(autoload 'magit-git-command-topdir "magit" "Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer. \"git \" is
used as initial input, but can be deleted to run another command.

COMMAND is run in the top-level directory of the current
working tree.

(fn COMMAND)" t nil)(autoload 'magit-shell-command "magit" "Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer.  With a
prefix argument COMMAND is run in the top-level directory of
the current working tree, otherwise in `default-directory'.

(fn COMMAND)" t nil)(autoload 'magit-shell-command-topdir "magit" "Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer.  COMMAND
is run in the top-level directory of the current working tree.

(fn COMMAND)" t nil)(autoload 'magit-version "magit" "Return the version of Magit currently in use.
If optional argument PRINT-DEST is non-nil, output
stream (interactively, the echo area, or the current buffer with
a prefix argument), also print the used versions of Magit, Git,
and Emacs to it.

(fn &optional PRINT-DEST)" t nil)(autoload 'magit-stage-file "magit-apply" "Stage all changes to FILE.
With a prefix argument or when there is no file at point ask for
the file to be staged.  Otherwise stage the file at point without
requiring confirmation.

(fn FILE)" t nil)(autoload 'magit-stage-modified "magit-apply" "Stage all changes to files modified in the worktree.
Stage all new content of tracked files and remove tracked files
that no longer exist in the working tree from the index also.
With a prefix argument also stage previously untracked (but not
ignored) files.

(fn &optional ALL)" t nil)(autoload 'magit-unstage-file "magit-apply" "Unstage all changes to FILE.
With a prefix argument or when there is no file at point ask for
the file to be unstaged.  Otherwise unstage the file at point
without requiring confirmation.

(fn FILE)" t nil)(autoload 'magit-unstage-all "magit-apply" "Remove all changes from the staging area." t nil)(put 'magit-auto-revert-mode 'globalized-minor-mode t)(defvar magit-auto-revert-mode (not (or global-auto-revert-mode noninteractive)) "Non-nil if Magit-Auto-Revert mode is enabled.
See the `magit-auto-revert-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-auto-revert-mode'.")(autoload 'magit-auto-revert-mode "magit-autorevert" "Toggle Auto-Revert mode in all buffers.
With prefix ARG, enable Magit-Auto-Revert mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Auto-Revert mode is enabled in all buffers where
`magit-turn-on-auto-revert-mode-if-desired' would do it.
See `auto-revert-mode' for more information on Auto-Revert mode.

(fn &optional ARG)" t nil)(autoload 'magit-bisect "magit-bisect" nil t)(autoload 'magit-bisect-start "magit-bisect" "Start a bisect session.

Bisecting a bug means to find the commit that introduced it.
This command starts such a bisect session by asking for a know
good and a bad commit.  To move the session forward use the
other actions from the bisect transient command (\\<magit-status-mode-map>\\[magit-bisect]).

(fn BAD GOOD)" t nil)(autoload 'magit-bisect-reset "magit-bisect" "After bisecting, cleanup bisection state and return to original `HEAD'." t nil)(autoload 'magit-bisect-good "magit-bisect" "While bisecting, mark the current commit as good.
Use this after you have asserted that the commit does not contain
the bug in question." t nil)(autoload 'magit-bisect-bad "magit-bisect" "While bisecting, mark the current commit as bad.
Use this after you have asserted that the commit does contain the
bug in question." t nil)(autoload 'magit-bisect-skip "magit-bisect" "While bisecting, skip the current commit.
Use this if for some reason the current commit is not a good one
to test.  This command lets Git choose a different one." t nil)(autoload 'magit-bisect-run "magit-bisect" "Bisect automatically by running commands after each step.

Unlike `git bisect run' this can be used before bisecting has
begun.  In that case it behaves like `git bisect start; git
bisect run'.

(fn CMDLINE &optional BAD GOOD)" t nil)(autoload 'magit-blame-echo "magit-blame" nil t)(autoload 'magit-blame-addition "magit-blame" nil t)(autoload 'magit-blame-removal "magit-blame" nil t)(autoload 'magit-blame-reverse "magit-blame" nil t)(autoload 'magit-blame "magit-blame" nil t)(autoload 'magit--handle-bookmark "magit-bookmark" "Open a bookmark created by `magit--make-bookmark'.
Call the `magit-*-setup-buffer' function of the the major-mode
with the variables' values as arguments, which were recorded by
`magit--make-bookmark'.  Ignore `magit-display-buffer-function'.

(fn BOOKMARK)" nil nil)(autoload 'magit-branch "magit" nil t)(autoload 'magit-checkout "magit-branch" "Checkout REVISION, updating the index and the working tree.
If REVISION is a local branch, then that becomes the current
branch.  If it is something else, then `HEAD' becomes detached.
Checkout fails if the working tree or the staging area contain
changes.

(git checkout REVISION).

(fn REVISION)" t nil)(autoload 'magit-branch-create "magit-branch" "Create BRANCH at branch or revision START-POINT.

(fn BRANCH START-POINT)" t nil)(autoload 'magit-branch-and-checkout "magit-branch" "Create and checkout BRANCH at branch or revision START-POINT.

(fn BRANCH START-POINT)" t nil)(autoload 'magit-branch-or-checkout "magit-branch" "Hybrid between `magit-checkout' and `magit-branch-and-checkout'.

Ask the user for an existing branch or revision.  If the user
input actually can be resolved as a branch or revision, then
check that out, just like `magit-checkout' would.

Otherwise create and checkout a new branch using the input as
its name.  Before doing so read the starting-point for the new
branch.  This is similar to what `magit-branch-and-checkout'
does.

(fn ARG &optional START-POINT)" t nil)(autoload 'magit-branch-checkout "magit-branch" "Checkout an existing or new local branch.

Read a branch name from the user offering all local branches and
a subset of remote branches as candidates.  Omit remote branches
for which a local branch by the same name exists from the list
of candidates.  The user can also enter a completely new branch
name.

- If the user selects an existing local branch, then check that
  out.

- If the user selects a remote branch, then create and checkout
  a new local branch with the same name.  Configure the selected
  remote branch as push target.

- If the user enters a new branch name, then create and check
  that out, after also reading the starting-point from the user.

In the latter two cases the upstream is also set.  Whether it is
set to the chosen START-POINT or something else depends on the
value of `magit-branch-adjust-remote-upstream-alist', just like
when using `magit-branch-and-checkout'.

(fn BRANCH &optional START-POINT)" t nil)(autoload 'magit-branch-orphan "magit-branch" "Create and checkout an orphan BRANCH with contents from revision START-POINT.

(fn BRANCH START-POINT)" t nil)(autoload 'magit-branch-spinout "magit-branch" "Create new branch from the unpushed commits.
Like `magit-branch-spinoff' but remain on the current branch.
If there are any uncommitted changes, then behave exactly like
`magit-branch-spinoff'.

(fn BRANCH &optional FROM)" t nil)(autoload 'magit-branch-spinoff "magit-branch" "Create new branch from the unpushed commits.

Create and checkout a new branch starting at and tracking the
current branch.  That branch in turn is reset to the last commit
it shares with its upstream.  If the current branch has no
upstream or no unpushed commits, then the new branch is created
anyway and the previously current branch is not touched.

This is useful to create a feature branch after work has already
began on the old branch (likely but not necessarily \"master\").

If the current branch is a member of the value of option
`magit-branch-prefer-remote-upstream' (which see), then the
current branch will be used as the starting point as usual, but
the upstream of the starting-point may be used as the upstream
of the new branch, instead of the starting-point itself.

If optional FROM is non-nil, then the source branch is reset
to `FROM~', instead of to the last commit it shares with its
upstream.  Interactively, FROM is only ever non-nil, if the
region selects some commits, and among those commits, FROM is
the commit that is the fewest commits ahead of the source
branch.

The commit at the other end of the selection actually does not
matter, all commits between FROM and `HEAD' are moved to the new
branch.  If FROM is not reachable from `HEAD' or is reachable
from the source branch's upstream, then an error is raised.

(fn BRANCH &optional FROM)" t nil)(autoload 'magit-branch-reset "magit-branch" "Reset a branch to the tip of another branch or any other commit.

When the branch being reset is the current branch, then do a
hard reset.  If there are any uncommitted changes, then the user
has to confirm the reset because those changes would be lost.

This is useful when you have started work on a feature branch but
realize it's all crap and want to start over.

When resetting to another branch and a prefix argument is used,
then also set the target branch as the upstream of the branch
that is being reset.

(fn BRANCH TO &optional SET-UPSTREAM)" t nil)(autoload 'magit-branch-delete "magit-branch" "Delete one or multiple branches.
If the region marks multiple branches, then offer to delete
those, otherwise prompt for a single branch to be deleted,
defaulting to the branch at point.

(fn BRANCHES &optional FORCE)" t nil)(autoload 'magit-branch-rename "magit-branch" "Rename the branch named OLD to NEW.

With a prefix argument FORCE, rename even if a branch named NEW
already exists.

If `branch.OLD.pushRemote' is set, then unset it.  Depending on
the value of `magit-branch-rename-push-target' (which see) maybe
set `branch.NEW.pushRemote' and maybe rename the push-target on
the remote.

(fn OLD NEW &optional FORCE)" t nil)(autoload 'magit-branch-shelve "magit-branch" "Shelve a BRANCH.
Rename \"refs/heads/BRANCH\" to \"refs/shelved/BRANCH\",
and also rename the respective reflog file.

(fn BRANCH)" t nil)(autoload 'magit-branch-unshelve "magit-branch" "Unshelve a BRANCH
Rename \"refs/shelved/BRANCH\" to \"refs/heads/BRANCH\",
and also rename the respective reflog file.

(fn BRANCH)" t nil)(autoload 'magit-branch-configure "magit-branch" nil t)(autoload 'magit-clone "magit-clone" nil t)(autoload 'magit-clone-regular "magit-clone" "Create a clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.

(fn REPOSITORY DIRECTORY ARGS)" t nil)(autoload 'magit-clone-shallow "magit-clone" "Create a shallow clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.
With a prefix argument read the DEPTH of the clone;
otherwise use 1.

(fn REPOSITORY DIRECTORY ARGS DEPTH)" t nil)(autoload 'magit-clone-shallow-since "magit-clone" "Create a shallow clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.
Exclude commits before DATE, which is read from the
user.

(fn REPOSITORY DIRECTORY ARGS DATE)" t nil)(autoload 'magit-clone-shallow-exclude "magit-clone" "Create a shallow clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.
Exclude commits reachable from EXCLUDE, which is a
branch or tag read from the user.

(fn REPOSITORY DIRECTORY ARGS EXCLUDE)" t nil)(autoload 'magit-clone-bare "magit-clone" "Create a bare clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.

(fn REPOSITORY DIRECTORY ARGS)" t nil)(autoload 'magit-clone-mirror "magit-clone" "Create a mirror of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.

(fn REPOSITORY DIRECTORY ARGS)" t nil)(autoload 'magit-commit "magit-commit" nil t)(autoload 'magit-commit-create "magit-commit" "Create a new commit on `HEAD'.
With a prefix argument, amend to the commit at `HEAD' instead.

(git commit [--amend] ARGS)

(fn &optional ARGS)" t nil)(autoload 'magit-commit-amend "magit-commit" "Amend the last commit.

(git commit --amend ARGS)

(fn &optional ARGS)" t nil)(autoload 'magit-commit-extend "magit-commit" "Amend the last commit, without editing the message.

With a prefix argument keep the committer date, otherwise change
it.  The option `magit-commit-extend-override-date' can be used
to inverse the meaning of the prefix argument.  
(git commit
--amend --no-edit)

(fn &optional ARGS OVERRIDE-DATE)" t nil)(autoload 'magit-commit-reword "magit-commit" "Reword the last commit, ignoring staged changes.

With a prefix argument keep the committer date, otherwise change
it.  The option `magit-commit-reword-override-date' can be used
to inverse the meaning of the prefix argument.

Non-interactively respect the optional OVERRIDE-DATE argument
and ignore the option.

(git commit --amend --only)

(fn &optional ARGS OVERRIDE-DATE)" t nil)(autoload 'magit-commit-fixup "magit-commit" "Create a fixup commit.

With a prefix argument the target COMMIT has to be confirmed.
Otherwise the commit at point may be used without confirmation
depending on the value of option `magit-commit-squash-confirm'.

(fn &optional COMMIT ARGS)" t nil)(autoload 'magit-commit-squash "magit-commit" "Create a squash commit, without editing the squash message.

With a prefix argument the target COMMIT has to be confirmed.
Otherwise the commit at point may be used without confirmation
depending on the value of option `magit-commit-squash-confirm'.

(fn &optional COMMIT ARGS)" t nil)(autoload 'magit-commit-augment "magit-commit" "Create a squash commit, editing the squash message.

With a prefix argument the target COMMIT has to be confirmed.
Otherwise the commit at point may be used without confirmation
depending on the value of option `magit-commit-squash-confirm'.

(fn &optional COMMIT ARGS)" t nil)(autoload 'magit-commit-instant-fixup "magit-commit" "Create a fixup commit targeting COMMIT and instantly rebase.

(fn &optional COMMIT ARGS)" t nil)(autoload 'magit-commit-instant-squash "magit-commit" "Create a squash commit targeting COMMIT and instantly rebase.

(fn &optional COMMIT ARGS)" t nil)(autoload 'magit-commit-reshelve "magit-commit" "Change the committer date and possibly the author date of `HEAD'.

If you are the author of `HEAD', then both dates are changed,
otherwise only the committer date.  The current time is used
as the initial minibuffer input and the original author (if
that is you) or committer date is available as the previous
history element.

(fn DATE)" t nil)(autoload 'magit-commit-absorb "magit-commit" nil t)(autoload 'magit-commit-autofixup "magit-commit" nil t)(autoload 'magit-diff "magit-diff" nil t)(autoload 'magit-diff-refresh "magit-diff" nil t)(autoload 'magit-diff-dwim "magit-diff" "Show changes for the thing at point.

(fn &optional ARGS FILES)" t nil)(autoload 'magit-diff-range "magit-diff" "Show differences between two commits.

REV-OR-RANGE should be a range or a single revision.  If it is a
revision, then show changes in the working tree relative to that
revision.  If it is a range, but one side is omitted, then show
changes relative to `HEAD'.

If the region is active, use the revisions on the first and last
line of the region as the two sides of the range.  With a prefix
argument, instead of diffing the revisions, choose a revision to
view changes along, starting at the common ancestor of both
revisions (i.e., use a \"...\" range).

(fn REV-OR-RANGE &optional ARGS FILES)" t nil)(autoload 'magit-diff-working-tree "magit-diff" "Show changes between the current working tree and the `HEAD' commit.
With a prefix argument show changes between the working tree and
a commit read from the minibuffer.

(fn &optional REV ARGS FILES)" t nil)(autoload 'magit-diff-staged "magit-diff" "Show changes between the index and the `HEAD' commit.
With a prefix argument show changes between the index and
a commit read from the minibuffer.

(fn &optional REV ARGS FILES)" t nil)(autoload 'magit-diff-unstaged "magit-diff" "Show changes between the working tree and the index.

(fn &optional ARGS FILES)" t nil)(autoload 'magit-diff-unmerged "magit-diff" "Show changes that are being merged.

(fn &optional ARGS FILES)" t nil)(autoload 'magit-diff-while-committing "magit-diff" "While committing, show the changes that are about to be committed.
While amending, invoking the command again toggles between
showing just the new changes or all the changes that will
be committed.

(fn &optional ARGS)" t nil)(autoload 'magit-diff-buffer-file "magit-diff" "Show diff for the blob or file visited in the current buffer.

When the buffer visits a blob, then show the respective commit.
When the buffer visits a file, then show the differenced between
`HEAD' and the working tree.  In both cases limit the diff to
the file or blob." t nil)(autoload 'magit-diff-paths "magit-diff" "Show changes between any two files on disk.

(fn A B)" t nil)(autoload 'magit-show-commit "magit-diff" "Visit the revision at point in another buffer.
If there is no revision at point or with a prefix argument prompt
for a revision.

(fn REV &optional ARGS FILES MODULE)" t nil)(autoload 'magit-ediff "magit-ediff" nil)(autoload 'magit-ediff-resolve "magit-ediff" "Resolve outstanding conflicts in FILE using Ediff.
FILE has to be relative to the top directory of the repository.

In the rare event that you want to manually resolve all
conflicts, including those already resolved by Git, use
`ediff-merge-revisions-with-ancestor'.

(fn FILE)" t nil)(autoload 'magit-ediff-stage "magit-ediff" "Stage and unstage changes to FILE using Ediff.
FILE has to be relative to the top directory of the repository.

(fn FILE)" t nil)(autoload 'magit-ediff-compare "magit-ediff" "Compare REVA:FILEA with REVB:FILEB using Ediff.

FILEA and FILEB have to be relative to the top directory of the
repository.  If REVA or REVB is nil, then this stands for the
working tree state.

If the region is active, use the revisions on the first and last
line of the region.  With a prefix argument, instead of diffing
the revisions, choose a revision to view changes along, starting
at the common ancestor of both revisions (i.e., use a \"...\"
range).

(fn REVA REVB FILEA FILEB)" t nil)(autoload 'magit-ediff-dwim "magit-ediff" "Compare, stage, or resolve using Ediff.
This command tries to guess what file, and what commit or range
the user wants to compare, stage, or resolve using Ediff.  It
might only be able to guess either the file, or range or commit,
in which case the user is asked about the other.  It might not
always guess right, in which case the appropriate `magit-ediff-*'
command has to be used explicitly.  If it cannot read the user's
mind at all, then it asks the user for a command to run." t nil)(autoload 'magit-ediff-show-staged "magit-ediff" "Show staged changes using Ediff.

This only allows looking at the changes; to stage, unstage,
and discard changes using Ediff, use `magit-ediff-stage'.

FILE must be relative to the top directory of the repository.

(fn FILE)" t nil)(autoload 'magit-ediff-show-unstaged "magit-ediff" "Show unstaged changes using Ediff.

This only allows looking at the changes; to stage, unstage,
and discard changes using Ediff, use `magit-ediff-stage'.

FILE must be relative to the top directory of the repository.

(fn FILE)" t nil)(autoload 'magit-ediff-show-working-tree "magit-ediff" "Show changes between `HEAD' and working tree using Ediff.
FILE must be relative to the top directory of the repository.

(fn FILE)" t nil)(autoload 'magit-ediff-show-commit "magit-ediff" "Show changes introduced by COMMIT using Ediff.

(fn COMMIT)" t nil)(autoload 'magit-ediff-show-stash "magit-ediff" "Show changes introduced by STASH using Ediff.
`magit-ediff-show-stash-with-index' controls whether a
three-buffer Ediff is used in order to distinguish changes in the
stash that were staged.

(fn STASH)" t nil)(autoload 'magit-run-git-gui "magit-extras" "Run `git gui' for the current git repository." t nil)(autoload 'magit-run-git-gui-blame "magit-extras" "Run `git gui blame' on the given FILENAME and COMMIT.
Interactively run it for the current file and the `HEAD', with a
prefix or when the current file cannot be determined let the user
choose.  When the current buffer is visiting FILENAME instruct
blame to center around the line point is on.

(fn COMMIT FILENAME &optional LINENUM)" t nil)(autoload 'magit-run-gitk "magit-extras" "Run `gitk' in the current repository." t nil)(autoload 'magit-run-gitk-branches "magit-extras" "Run `gitk --branches' in the current repository." t nil)(autoload 'magit-run-gitk-all "magit-extras" "Run `gitk --all' in the current repository." t nil)(autoload 'ido-enter-magit-status "magit-extras" "Drop into `magit-status' from file switching.

This command does not work in Emacs 26.1.
See https://github.com/magit/magit/issues/3634
and https://debbugs.gnu.org/cgi/bugreport.cgi?bug=31707.

To make this command available use something like:

  (add-hook \\='ido-setup-hook
            (lambda ()
              (define-key ido-completion-map
                (kbd \"C-x g\") \\='ido-enter-magit-status)))

Starting with Emacs 25.1 the Ido keymaps are defined just once
instead of every time Ido is invoked, so now you can modify it
like pretty much every other keymap:

  (define-key ido-common-completion-map
    (kbd \"C-x g\") \\='ido-enter-magit-status)" t nil)(autoload 'magit-project-status "magit-extras" "Run `magit-status' in the current project's root." t nil)(autoload 'magit-dired-jump "magit-extras" "Visit file at point using Dired.
With a prefix argument, visit in another window.  If there
is no file at point, then instead visit `default-directory'.

(fn &optional OTHER-WINDOW)" t nil)(autoload 'magit-dired-log "magit-extras" "Show log for all marked files, or the current file.

(fn &optional FOLLOW)" t nil)(autoload 'magit-do-async-shell-command "magit-extras" "Open FILE with `dired-do-async-shell-command'.
Interactively, open the file at point.

(fn FILE)" t nil)(autoload 'magit-previous-line "magit-extras" "Like `previous-line' but with Magit-specific shift-selection.

Magit's selection mechanism is based on the region but selects an
area that is larger than the region.  This causes `previous-line'
when invoked while holding the shift key to move up one line and
thereby select two lines.  When invoked inside a hunk body this
command does not move point on the first invocation and thereby
it only selects a single line.  Which inconsistency you prefer
is a matter of preference.

(fn &optional ARG TRY-VSCROLL)" t nil)(function-put 'magit-previous-line 'interactive-only '"use `forward-line' with negative argument instead.")(autoload 'magit-next-line "magit-extras" "Like `next-line' but with Magit-specific shift-selection.

Magit's selection mechanism is based on the region but selects
an area that is larger than the region.  This causes `next-line'
when invoked while holding the shift key to move down one line
and thereby select two lines.  When invoked inside a hunk body
this command does not move point on the first invocation and
thereby it only selects a single line.  Which inconsistency you
prefer is a matter of preference.

(fn &optional ARG TRY-VSCROLL)" t nil)(function-put 'magit-next-line 'interactive-only 'forward-line)(autoload 'magit-clean "magit-extras" "Remove untracked files from the working tree.
With a prefix argument also remove ignored files,
with two prefix arguments remove ignored files only.

(git clean -f -d [-x|-X])

(fn &optional ARG)" t nil)(autoload 'magit-add-change-log-entry "magit-extras" "Find change log file and add date entry and item for current change.
This differs from `add-change-log-entry' (which see) in that
it acts on the current hunk in a Magit buffer instead of on
a position in a file-visiting buffer.

(fn &optional WHOAMI FILE-NAME OTHER-WINDOW)" t nil)(autoload 'magit-add-change-log-entry-other-window "magit-extras" "Find change log file in other window and add entry and item.
This differs from `add-change-log-entry-other-window' (which see)
in that it acts on the current hunk in a Magit buffer instead of
on a position in a file-visiting buffer.

(fn &optional WHOAMI FILE-NAME)" t nil)(autoload 'magit-edit-line-commit "magit-extras" "Edit the commit that added the current line.

With a prefix argument edit the commit that removes the line,
if any.  The commit is determined using `git blame' and made
editable using `git rebase --interactive' if it is reachable
from `HEAD', or by checking out the commit (or a branch that
points at it) otherwise.

(fn &optional TYPE)" t nil)(autoload 'magit-diff-edit-hunk-commit "magit-extras" "From a hunk, edit the respective commit and visit the file.

First visit the file being modified by the hunk at the correct
location using `magit-diff-visit-file'.  This actually visits a
blob.  When point is on a diff header, not within an individual
hunk, then this visits the blob the first hunk is about.

Then invoke `magit-edit-line-commit', which uses an interactive
rebase to make the commit editable, or if that is not possible
because the commit is not reachable from `HEAD' by checking out
that commit directly.  This also causes the actual worktree file
to be visited.

Neither the blob nor the file buffer are killed when finishing
the rebase.  If that is undesirable, then it might be better to
use `magit-rebase-edit-command' instead of this command.

(fn FILE)" t nil)(autoload 'magit-reshelve-since "magit-extras" "Change the author and committer dates of the commits since REV.

Ask the user for the first reachable commit whose dates should
be changed.  Then read the new date for that commit.  The initial
minibuffer input and the previous history element offer good
values.  The next commit will be created one minute later and so
on.

This command is only intended for interactive use and should only
be used on highly rearranged and unpublished history.

(fn REV)" t nil)(autoload 'magit-pop-revision-stack "magit-extras" "Insert a representation of a revision into the current buffer.

Pop a revision from the `magit-revision-stack' and insert it into
the current buffer according to `magit-pop-revision-stack-format'.
Revisions can be put on the stack using `magit-copy-section-value'
and `magit-copy-buffer-revision'.

If the stack is empty or with a prefix argument, instead read a
revision in the minibuffer.  By using the minibuffer history this
allows selecting an item which was popped earlier or to insert an
arbitrary reference or revision without first pushing it onto the
stack.

When reading the revision from the minibuffer, then it might not
be possible to guess the correct repository.  When this command
is called inside a repository (e.g. while composing a commit
message), then that repository is used.  Otherwise (e.g. while
composing an email) then the repository recorded for the top
element of the stack is used (even though we insert another
revision).  If not called inside a repository and with an empty
stack, or with two prefix arguments, then read the repository in
the minibuffer too.

(fn REV TOPLEVEL)" t nil)(autoload 'magit-copy-section-value "magit-extras" "Save the value of the current section for later use.

Save the section value to the `kill-ring', and, provided that
the current section is a commit, branch, or tag section, push
the (referenced) revision to the `magit-revision-stack' for use
with `magit-pop-revision-stack'.

When `magit-copy-revision-abbreviated' is non-nil, save the
abbreviated revision to the `kill-ring' and the
`magit-revision-stack'.

When the current section is a branch or a tag, and a prefix
argument is used, then save the revision at its tip to the
`kill-ring' instead of the reference name.

When the region is active, then save that to the `kill-ring',
like `kill-ring-save' would, instead of behaving as described
above.  If a prefix argument is used and the region is within a
hunk, strip the outer diff marker column." t nil)(autoload 'magit-copy-buffer-revision "magit-extras" "Save the revision of the current buffer for later use.

Save the revision shown in the current buffer to the `kill-ring'
and push it to the `magit-revision-stack'.

This command is mainly intended for use in `magit-revision-mode'
buffers, the only buffers where it is always unambiguous exactly
which revision should be saved.

Most other Magit buffers usually show more than one revision, in
some way or another, so this command has to select one of them,
and that choice might not always be the one you think would have
been the best pick.

In such buffers it is often more useful to save the value of
the current section instead, using `magit-copy-section-value'.

When the region is active, then save that to the `kill-ring',
like `kill-ring-save' would, instead of behaving as described
above.

When `magit-copy-revision-abbreviated' is non-nil, save the
abbreviated revision to the `kill-ring' and the
`magit-revision-stack'." t nil)(autoload 'magit-abort-dwim "magit-extras" "Abort current operation.
Depending on the context, this will abort a merge, a rebase, a
patch application, a cherry-pick, a revert, or a bisect." t nil)(autoload 'magit-fetch "magit-fetch" nil t)(autoload 'magit-fetch-from-pushremote "magit-fetch" nil t)(autoload 'magit-fetch-from-upstream "magit-fetch" nil t)(autoload 'magit-fetch-other "magit-fetch" "Fetch from another repository.

(fn REMOTE ARGS)" t nil)(autoload 'magit-fetch-branch "magit-fetch" "Fetch a BRANCH from a REMOTE.

(fn REMOTE BRANCH ARGS)" t nil)(autoload 'magit-fetch-refspec "magit-fetch" "Fetch a REFSPEC from a REMOTE.

(fn REMOTE REFSPEC ARGS)" t nil)(autoload 'magit-fetch-all "magit-fetch" "Fetch from all remotes.

(fn ARGS)" t nil)(autoload 'magit-fetch-all-prune "magit-fetch" "Fetch from all remotes, and prune.
Prune remote tracking branches for branches that have been
removed on the respective remote." t nil)(autoload 'magit-fetch-all-no-prune "magit-fetch" "Fetch from all remotes." t nil)(autoload 'magit-fetch-modules "magit-fetch" "Fetch all submodules.

Option `magit-fetch-modules-jobs' controls how many submodules
are being fetched in parallel.  Also fetch the super-repository,
because `git-fetch' does not support not doing that.  With a
prefix argument fetch all remotes.

(fn &optional ALL)" t nil)(autoload 'magit-find-file "magit-files" "View FILE from REV.
Switch to a buffer visiting blob REV:FILE, creating one if none
already exists.  If prior to calling this command the current
buffer and/or cursor position is about the same file, then go
to the line and column corresponding to that location.

(fn REV FILE)" t nil)(autoload 'magit-find-file-other-window "magit-files" "View FILE from REV, in another window.
Switch to a buffer visiting blob REV:FILE, creating one if none
already exists.  If prior to calling this command the current
buffer and/or cursor position is about the same file, then go to
the line and column corresponding to that location.

(fn REV FILE)" t nil)(autoload 'magit-find-file-other-frame "magit-files" "View FILE from REV, in another frame.
Switch to a buffer visiting blob REV:FILE, creating one if none
already exists.  If prior to calling this command the current
buffer and/or cursor position is about the same file, then go to
the line and column corresponding to that location.

(fn REV FILE)" t nil)(autoload 'magit-file-dispatch "magit" nil t)(put 'global-magit-file-mode 'globalized-minor-mode t)(defvar global-magit-file-mode t "Non-nil if Global Magit-File mode is enabled.
See the `global-magit-file-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-magit-file-mode'.")(autoload 'global-magit-file-mode "magit-files" "Toggle Magit-File mode in all buffers.
With prefix ARG, enable Global Magit-File mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Magit-File mode is enabled in all buffers where
`magit-file-mode-turn-on' would do it.
See `magit-file-mode' for more information on Magit-File mode.

(fn &optional ARG)" t nil)(autoload 'magit-blob-visit-file "magit-files" "View the file from the worktree corresponding to the current blob.
When visiting a blob or the version from the index, then go to
the same location in the respective file in the working tree." t nil)(autoload 'magit-file-checkout "magit-files" "Checkout FILE from REV.

(fn REV FILE)" t nil)(autoload 'magit-gitignore "magit-gitignore" nil t)(autoload 'magit-gitignore-in-topdir "magit-gitignore" "Add the Git ignore RULE to the top-level \".gitignore\" file.
Since this file is tracked, it is shared with other clones of the
repository.  Also stage the file.

(fn RULE)" t nil)(autoload 'magit-gitignore-in-subdir "magit-gitignore" "Add the Git ignore RULE to a \".gitignore\" file.
Prompted the user for a directory and add the rule to the
\".gitignore\" file in that directory.  Since such files are
tracked, they are shared with other clones of the repository.
Also stage the file.

(fn RULE DIRECTORY)" t nil)(autoload 'magit-gitignore-in-gitdir "magit-gitignore" "Add the Git ignore RULE to \"$GIT_DIR/info/exclude\".
Rules in that file only affects this clone of the repository.

(fn RULE)" t nil)(autoload 'magit-gitignore-on-system "magit-gitignore" "Add the Git ignore RULE to the file specified by `core.excludesFile'.
Rules that are defined in that file affect all local repositories.

(fn RULE)" t nil)(autoload 'magit-skip-worktree "magit-gitignore" "Call \"git update-index --skip-worktree -- FILE\".

(fn FILE)" t nil)(autoload 'magit-no-skip-worktree "magit-gitignore" "Call \"git update-index --no-skip-worktree -- FILE\".

(fn FILE)" t nil)(autoload 'magit-assume-unchanged "magit-gitignore" "Call \"git update-index --assume-unchanged -- FILE\".

(fn FILE)" t nil)(autoload 'magit-no-assume-unchanged "magit-gitignore" "Call \"git update-index --no-assume-unchanged -- FILE\".

(fn FILE)" t nil)(autoload 'magit-imenu--log-prev-index-position-function "magit-imenu" "Move point to previous line in current buffer.
This function is used as a value for
`imenu-prev-index-position-function'." nil nil)(autoload 'magit-imenu--log-extract-index-name-function "magit-imenu" "Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line." nil nil)(autoload 'magit-imenu--diff-prev-index-position-function "magit-imenu" "Move point to previous file line in current buffer.
This function is used as a value for
`imenu-prev-index-position-function'." nil nil)(autoload 'magit-imenu--diff-extract-index-name-function "magit-imenu" "Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line." nil nil)(autoload 'magit-imenu--status-create-index-function "magit-imenu" "Return an alist of all imenu entries in current buffer.
This function is used as a value for
`imenu-create-index-function'." nil nil)(autoload 'magit-imenu--refs-create-index-function "magit-imenu" "Return an alist of all imenu entries in current buffer.
This function is used as a value for
`imenu-create-index-function'." nil nil)(autoload 'magit-imenu--cherry-create-index-function "magit-imenu" "Return an alist of all imenu entries in current buffer.
This function is used as a value for
`imenu-create-index-function'." nil nil)(autoload 'magit-imenu--submodule-prev-index-position-function "magit-imenu" "Move point to previous line in magit-submodule-list buffer.
This function is used as a value for
`imenu-prev-index-position-function'." nil nil)(autoload 'magit-imenu--submodule-extract-index-name-function "magit-imenu" "Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line." nil nil)(autoload 'magit-imenu--repolist-prev-index-position-function "magit-imenu" "Move point to previous line in magit-repolist buffer.
This function is used as a value for
`imenu-prev-index-position-function'." nil nil)(autoload 'magit-imenu--repolist-extract-index-name-function "magit-imenu" "Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line." nil nil)(autoload 'magit-imenu--process-prev-index-position-function "magit-imenu" "Move point to previous process in magit-process buffer.
This function is used as a value for
`imenu-prev-index-position-function'." nil nil)(autoload 'magit-imenu--process-extract-index-name-function "magit-imenu" "Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line." nil nil)(autoload 'magit-imenu--rebase-prev-index-position-function "magit-imenu" "Move point to previous commit in git-rebase buffer.
This function is used as a value for
`imenu-prev-index-position-function'." nil nil)(autoload 'magit-imenu--rebase-extract-index-name-function "magit-imenu" "Return imenu name for line at point.
This function is used as a value for
`imenu-extract-index-name-function'.  Point should be at the
beginning of the line." nil nil)(autoload 'magit-log "magit-log" nil t)(autoload 'magit-log-refresh "magit-log" nil t)(autoload 'magit-log-current "magit-log" "Show log for the current branch.
When `HEAD' is detached or with a prefix argument show log for
one or more revs read from the minibuffer.

(fn REVS &optional ARGS FILES)" t nil)(autoload 'magit-log-other "magit-log" "Show log for one or more revs read from the minibuffer.
The user can input any revision or revisions separated by a
space, or even ranges, but only branches and tags, and a
representation of the commit at point, are available as
completion candidates.

(fn REVS &optional ARGS FILES)" t nil)(autoload 'magit-log-head "magit-log" "Show log for `HEAD'.

(fn &optional ARGS FILES)" t nil)(autoload 'magit-log-branches "magit-log" "Show log for all local branches and `HEAD'.

(fn &optional ARGS FILES)" t nil)(autoload 'magit-log-matching-branches "magit-log" "Show log for all branches matching PATTERN and `HEAD'.

(fn PATTERN &optional ARGS FILES)" t nil)(autoload 'magit-log-matching-tags "magit-log" "Show log for all tags matching PATTERN and `HEAD'.

(fn PATTERN &optional ARGS FILES)" t nil)(autoload 'magit-log-all-branches "magit-log" "Show log for all local and remote branches and `HEAD'.

(fn &optional ARGS FILES)" t nil)(autoload 'magit-log-all "magit-log" "Show log for all references and `HEAD'.

(fn &optional ARGS FILES)" t nil)(autoload 'magit-log-buffer-file "magit-log" "Show log for the blob or file visited in the current buffer.
With a prefix argument or when `--follow' is an active log
argument, then follow renames.  When the region is active,
restrict the log to the lines that the region touches.

(fn &optional FOLLOW BEG END)" t nil)(autoload 'magit-log-trace-definition "magit-log" "Show log for the definition at point.

(fn FILE FN REV)" t nil)(autoload 'magit-log-merged "magit-log" "Show log for the merge of COMMIT into BRANCH.

More precisely, find merge commit M that brought COMMIT into
BRANCH, and show the log of the range \"M^1..M\".  If COMMIT is
directly on BRANCH, then show approximately twenty surrounding
commits instead.

This command requires git-when-merged, which is available from
https://github.com/mhagger/git-when-merged.

(fn COMMIT BRANCH &optional ARGS FILES)" t nil)(autoload 'magit-log-move-to-parent "magit-log" "Move to the Nth parent of the current commit.

(fn &optional N)" t nil)(autoload 'magit-cherry "magit-log" "Show commits in a branch that are not merged in the upstream branch.

(fn HEAD UPSTREAM)" t nil)(autoload 'magit-merge "magit" nil t)(autoload 'magit-merge-plain "magit-merge" "Merge commit REV into the current branch; using default message.

Unless there are conflicts or a prefix argument is used create a
merge commit using a generic commit message and without letting
the user inspect the result.  With a prefix argument pretend the
merge failed to give the user the opportunity to inspect the
merge.

(git merge --no-edit|--no-commit [ARGS] REV)

(fn REV &optional ARGS NOCOMMIT)" t nil)(autoload 'magit-merge-editmsg "magit-merge" "Merge commit REV into the current branch; and edit message.
Perform the merge and prepare a commit message but let the user
edit it.

(git merge --edit --no-ff [ARGS] REV)

(fn REV &optional ARGS)" t nil)(autoload 'magit-merge-nocommit "magit-merge" "Merge commit REV into the current branch; pretending it failed.
Pretend the merge failed to give the user the opportunity to
inspect the merge and change the commit message.

(git merge --no-commit --no-ff [ARGS] REV)

(fn REV &optional ARGS)" t nil)(autoload 'magit-merge-into "magit-merge" "Merge the current branch into BRANCH and remove the former.

Before merging, force push the source branch to its push-remote,
provided the respective remote branch already exists, ensuring
that the respective pull-request (if any) won't get stuck on some
obsolete version of the commits that are being merged.  Finally
if `forge-branch-pullreq' was used to create the merged branch,
branch, then also remove the respective remote branch.

(fn BRANCH &optional ARGS)" t nil)(autoload 'magit-merge-absorb "magit-merge" "Merge BRANCH into the current branch and remove the former.

Before merging, force push the source branch to its push-remote,
provided the respective remote branch already exists, ensuring
that the respective pull-request (if any) won't get stuck on some
obsolete version of the commits that are being merged.  Finally
if `forge-branch-pullreq' was used to create the merged branch,
then also remove the respective remote branch.

(fn BRANCH &optional ARGS)" t nil)(autoload 'magit-merge-squash "magit-merge" "Squash commit REV into the current branch; don't create a commit.

(git merge --squash REV)

(fn REV)" t nil)(autoload 'magit-merge-preview "magit-merge" "Preview result of merging REV into the current branch.

(fn REV)" t nil)(autoload 'magit-merge-abort "magit-merge" "Abort the current merge operation.

(git merge --abort)" t nil)(autoload 'magit-notes "magit" nil t)(autoload 'magit-patch "magit-patch" nil t)(autoload 'magit-patch-create "magit-patch" nil t)(autoload 'magit-patch-apply "magit-patch" nil t)(autoload 'magit-patch-save "magit-patch" "Write current diff into patch FILE.

What arguments are used to create the patch depends on the value
of `magit-patch-save-arguments' and whether a prefix argument is
used.

If the value is the symbol `buffer', then use the same arguments
as the buffer.  With a prefix argument use no arguments.

If the value is a list beginning with the symbol `exclude', then
use the same arguments as the buffer except for those matched by
entries in the cdr of the list.  The comparison is done using
`string-prefix-p'.  With a prefix argument use the same arguments
as the buffer.

If the value is a list of strings (including the empty list),
then use those arguments.  With a prefix argument use the same
arguments as the buffer.

Of course the arguments that are required to actually show the
same differences as those shown in the buffer are always used.

(fn FILE &optional ARG)" t nil)(autoload 'magit-request-pull "magit-patch" "Request upstream to pull from you public repository.

URL is the url of your publicly accessible repository.
START is a commit that already is in the upstream repository.
END is the last commit, usually a branch name, which upstream
is asked to pull.  START has to be reachable from that commit.

(fn URL START END)" t nil)(autoload 'magit-pull "magit-pull" nil t)(autoload 'magit-pull-from-pushremote "magit-pull" nil t)(autoload 'magit-pull-from-upstream "magit-pull" nil t)(autoload 'magit-pull-branch "magit-pull" "Pull from a branch read in the minibuffer.

(fn SOURCE ARGS)" t nil)(autoload 'magit-push "magit-push" nil t)(autoload 'magit-push-current-to-pushremote "magit-push" nil t)(autoload 'magit-push-current-to-upstream "magit-push" nil t)(autoload 'magit-push-current "magit-push" "Push the current branch to a branch read in the minibuffer.

(fn TARGET ARGS)" t nil)(autoload 'magit-push-other "magit-push" "Push an arbitrary branch or commit somewhere.
Both the source and the target are read in the minibuffer.

(fn SOURCE TARGET ARGS)" t nil)(autoload 'magit-push-refspecs "magit-push" "Push one or multiple REFSPECS to a REMOTE.
Both the REMOTE and the REFSPECS are read in the minibuffer.  To
use multiple REFSPECS, separate them with commas.  Completion is
only available for the part before the colon, or when no colon
is used.

(fn REMOTE REFSPECS ARGS)" t nil)(autoload 'magit-push-matching "magit-push" "Push all matching branches to another repository.
If multiple remotes exist, then read one from the user.
If just one exists, use that without requiring confirmation.

(fn REMOTE &optional ARGS)" t nil)(autoload 'magit-push-tags "magit-push" "Push all tags to another repository.
If only one remote exists, then push to that.  Otherwise prompt
for a remote, offering the remote configured for the current
branch as default.

(fn REMOTE &optional ARGS)" t nil)(autoload 'magit-push-tag "magit-push" "Push a tag to another repository.

(fn TAG REMOTE &optional ARGS)" t nil)(autoload 'magit-push-notes-ref "magit-push" "Push a notes ref to another repository.

(fn REF REMOTE &optional ARGS)" t nil)(autoload 'magit-push-implicitly "magit-push" "Push somewhere without using an explicit refspec.

This command simply runs \"git push -v [ARGS]\".  ARGS are the
arguments specified in the popup buffer.  No explicit refspec
arguments are used.  Instead the behavior depends on at least
these Git variables: `push.default', `remote.pushDefault',
`branch.<branch>.pushRemote', `branch.<branch>.remote',
`branch.<branch>.merge', and `remote.<remote>.push'.

The function `magit-push-implicitly--desc' attempts to predict
what this command will do.  The value it returns is displayed in
the popup buffer.

(fn ARGS)" t nil)(autoload 'magit-push-to-remote "magit-push" "Push to REMOTE without using an explicit refspec.
The REMOTE is read in the minibuffer.

This command simply runs \"git push -v [ARGS] REMOTE\".  ARGS
are the arguments specified in the popup buffer.  No refspec
arguments are used.  Instead the behavior depends on at least
these Git variables: `push.default', `remote.pushDefault',
`branch.<branch>.pushRemote', `branch.<branch>.remote',
`branch.<branch>.merge', and `remote.<remote>.push'.

(fn REMOTE ARGS)" t nil)(autoload 'magit-reflog-current "magit-reflog" "Display the reflog of the current branch.
If `HEAD' is detached, then show the reflog for that instead." t nil)(autoload 'magit-reflog-other "magit-reflog" "Display the reflog of a branch or another ref.

(fn REF)" t nil)(autoload 'magit-reflog-head "magit-reflog" "Display the `HEAD' reflog." t nil)(autoload 'magit-show-refs "magit-refs" nil t)(autoload 'magit-show-refs-head "magit-refs" "List and compare references in a dedicated buffer.
Compared with `HEAD'.

(fn &optional ARGS)" t nil)(autoload 'magit-show-refs-current "magit-refs" "List and compare references in a dedicated buffer.
Compare with the current branch or `HEAD' if it is detached.

(fn &optional ARGS)" t nil)(autoload 'magit-show-refs-other "magit-refs" "List and compare references in a dedicated buffer.
Compared with a branch read from the user.

(fn &optional REF ARGS)" t nil)(autoload 'magit-remote "magit-remote" nil t)(autoload 'magit-remote-add "magit-remote" "Add a remote named REMOTE and fetch it.

(fn REMOTE URL &optional ARGS)" t nil)(autoload 'magit-remote-rename "magit-remote" "Rename the remote named OLD to NEW.

(fn OLD NEW)" t nil)(autoload 'magit-remote-remove "magit-remote" "Delete the remote named REMOTE.

(fn REMOTE)" t nil)(autoload 'magit-remote-prune "magit-remote" "Remove stale remote-tracking branches for REMOTE.

(fn REMOTE)" t nil)(autoload 'magit-remote-prune-refspecs "magit-remote" "Remove stale refspecs for REMOTE.

A refspec is stale if there no longer exists at least one branch
on the remote that would be fetched due to that refspec.  A stale
refspec is problematic because its existence causes Git to refuse
to fetch according to the remaining non-stale refspecs.

If only stale refspecs remain, then offer to either delete the
remote or to replace the stale refspecs with the default refspec.

Also remove the remote-tracking branches that were created due to
the now stale refspecs.  Other stale branches are not removed.

(fn REMOTE)" t nil)(autoload 'magit-remote-set-head "magit-remote" "Set the local representation of REMOTE's default branch.
Query REMOTE and set the symbolic-ref refs/remotes/<remote>/HEAD
accordingly.  With a prefix argument query for the branch to be
used, which allows you to select an incorrect value if you fancy
doing that.

(fn REMOTE &optional BRANCH)" t nil)(autoload 'magit-remote-unset-head "magit-remote" "Unset the local representation of REMOTE's default branch.
Delete the symbolic-ref \"refs/remotes/<remote>/HEAD\".

(fn REMOTE)" t nil)(autoload 'magit-remote-configure "magit-remote" nil t)(autoload 'magit-list-repositories "magit-repos" "Display a list of repositories.

Use the options `magit-repository-directories' to control which
repositories are displayed." t nil)(autoload 'magit-reset "magit" nil t)(autoload 'magit-reset-mixed "magit-reset" "Reset the `HEAD' and index to COMMIT, but not the working tree.

(git reset --mixed COMMIT)

(fn COMMIT)" t nil)(autoload 'magit-reset-soft "magit-reset" "Reset the `HEAD' to COMMIT, but not the index and working tree.

(git reset --soft REVISION)

(fn COMMIT)" t nil)(autoload 'magit-reset-hard "magit-reset" "Reset the `HEAD', index, and working tree to COMMIT.

(git reset --hard REVISION)

(fn COMMIT)" t nil)(autoload 'magit-reset-keep "magit-reset" "Reset the `HEAD' and index to COMMIT, while keeping uncommitted changes.

(git reset --keep REVISION)

(fn COMMIT)" t nil)(autoload 'magit-reset-index "magit-reset" "Reset the index to COMMIT.
Keep the `HEAD' and working tree as-is, so if COMMIT refers to the
head this effectively unstages all changes.

(git reset COMMIT .)

(fn COMMIT)" t nil)(autoload 'magit-reset-worktree "magit-reset" "Reset the worktree to COMMIT.
Keep the `HEAD' and index as-is.

(fn COMMIT)" t nil)(autoload 'magit-reset-quickly "magit-reset" "Reset the `HEAD' and index to COMMIT, and possibly the working tree.
With a prefix argument reset the working tree otherwise don't.

(git reset --mixed|--hard COMMIT)

(fn COMMIT &optional HARD)" t nil)(autoload 'magit-sequencer-continue "magit-sequence" "Resume the current cherry-pick or revert sequence." t nil)(autoload 'magit-sequencer-skip "magit-sequence" "Skip the stopped at commit during a cherry-pick or revert sequence." t nil)(autoload 'magit-sequencer-abort "magit-sequence" "Abort the current cherry-pick or revert sequence.
This discards all changes made since the sequence started." t nil)(autoload 'magit-cherry-pick "magit-sequence" nil t)(autoload 'magit-cherry-copy "magit-sequence" "Copy COMMITS from another branch onto the current branch.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then pick all of them,
without prompting.

(fn COMMITS &optional ARGS)" t nil)(autoload 'magit-cherry-apply "magit-sequence" "Apply the changes in COMMITS but do not commit them.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then apply all of them,
without prompting.

(fn COMMITS &optional ARGS)" t nil)(autoload 'magit-cherry-harvest "magit-sequence" "Move COMMITS from another BRANCH onto the current branch.
Remove the COMMITS from BRANCH and stay on the current branch.
If a conflict occurs, then you have to fix that and finish the
process manually.

(fn COMMITS BRANCH &optional ARGS)" t nil)(autoload 'magit-cherry-donate "magit-sequence" "Move COMMITS from the current branch onto another existing BRANCH.
Remove COMMITS from the current branch and stay on that branch.
If a conflict occurs, then you have to fix that and finish the
process manually.

(fn COMMITS BRANCH &optional ARGS)" t nil)(autoload 'magit-cherry-spinout "magit-sequence" "Move COMMITS from the current branch onto a new BRANCH.
Remove COMMITS from the current branch and stay on that branch.
If a conflict occurs, then you have to fix that and finish the
process manually.

(fn COMMITS BRANCH START-POINT &optional ARGS)" t nil)(autoload 'magit-cherry-spinoff "magit-sequence" "Move COMMITS from the current branch onto a new BRANCH.
Remove COMMITS from the current branch and checkout BRANCH.
If a conflict occurs, then you have to fix that and finish
the process manually.

(fn COMMITS BRANCH START-POINT &optional ARGS)" t nil)(autoload 'magit-revert "magit-sequence" nil t)(autoload 'magit-revert-and-commit "magit-sequence" "Revert COMMIT by creating a new commit.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then revert all of them,
without prompting.

(fn COMMIT &optional ARGS)" t nil)(autoload 'magit-revert-no-commit "magit-sequence" "Revert COMMIT by applying it in reverse to the worktree.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then revert all of them,
without prompting.

(fn COMMIT &optional ARGS)" t nil)(autoload 'magit-am "magit-sequence" nil t)(autoload 'magit-am-apply-patches "magit-sequence" "Apply the patches FILES.

(fn &optional FILES ARGS)" t nil)(autoload 'magit-am-apply-maildir "magit-sequence" "Apply the patches from MAILDIR.

(fn &optional MAILDIR ARGS)" t nil)(autoload 'magit-am-continue "magit-sequence" "Resume the current patch applying sequence." t nil)(autoload 'magit-am-skip "magit-sequence" "Skip the stopped at patch during a patch applying sequence." t nil)(autoload 'magit-am-abort "magit-sequence" "Abort the current patch applying sequence.
This discards all changes made since the sequence started." t nil)(autoload 'magit-rebase "magit-sequence" nil t)(autoload 'magit-rebase-onto-pushremote "magit-sequence" nil t)(autoload 'magit-rebase-onto-upstream "magit-sequence" nil t)(autoload 'magit-rebase-branch "magit-sequence" "Rebase the current branch onto a branch read in the minibuffer.
All commits that are reachable from `HEAD' but not from the
selected branch TARGET are being rebased.

(fn TARGET ARGS)" t nil)(autoload 'magit-rebase-subset "magit-sequence" "Rebase a subset of the current branch's history onto a new base.
Rebase commits from START to `HEAD' onto NEWBASE.
START has to be selected from a list of recent commits.

(fn NEWBASE START ARGS)" t nil)(autoload 'magit-rebase-interactive "magit-sequence" "Start an interactive rebase sequence.

(fn COMMIT ARGS)" t nil)(autoload 'magit-rebase-autosquash "magit-sequence" "Combine squash and fixup commits with their intended targets.

(fn ARGS)" t nil)(autoload 'magit-rebase-edit-commit "magit-sequence" "Edit a single older commit using rebase.

(fn COMMIT ARGS)" t nil)(autoload 'magit-rebase-reword-commit "magit-sequence" "Reword a single older commit using rebase.

(fn COMMIT ARGS)" t nil)(autoload 'magit-rebase-remove-commit "magit-sequence" "Remove a single older commit using rebase.

(fn COMMIT ARGS)" t nil)(autoload 'magit-rebase-continue "magit-sequence" "Restart the current rebasing operation.
In some cases this pops up a commit message buffer for you do
edit.  With a prefix argument the old message is reused as-is.

(fn &optional NOEDIT)" t nil)(autoload 'magit-rebase-skip "magit-sequence" "Skip the current commit and restart the current rebase operation." t nil)(autoload 'magit-rebase-edit "magit-sequence" "Edit the todo list of the current rebase operation." t nil)(autoload 'magit-rebase-abort "magit-sequence" "Abort the current rebase operation, restoring the original branch." t nil)(autoload 'magit-stash "magit-stash" nil t)(autoload 'magit-stash-both "magit-stash" "Create a stash of the index and working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn MESSAGE &optional INCLUDE-UNTRACKED)" t nil)(autoload 'magit-stash-index "magit-stash" "Create a stash of the index only.
Unstaged and untracked changes are not stashed.  The stashed
changes are applied in reverse to both the index and the
worktree.  This command can fail when the worktree is not clean.
Applying the resulting stash has the inverse effect.

(fn MESSAGE)" t nil)(autoload 'magit-stash-worktree "magit-stash" "Create a stash of unstaged changes in the working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn MESSAGE &optional INCLUDE-UNTRACKED)" t nil)(autoload 'magit-stash-keep-index "magit-stash" "Create a stash of the index and working tree, keeping index intact.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn MESSAGE &optional INCLUDE-UNTRACKED)" t nil)(autoload 'magit-snapshot-both "magit-stash" "Create a snapshot of the index and working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn &optional INCLUDE-UNTRACKED)" t nil)(autoload 'magit-snapshot-index "magit-stash" "Create a snapshot of the index only.
Unstaged and untracked changes are not stashed." t nil)(autoload 'magit-snapshot-worktree "magit-stash" "Create a snapshot of unstaged changes in the working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn &optional INCLUDE-UNTRACKED)" t nil)(autoload 'magit-stash-apply "magit-stash" "Apply a stash to the working tree.
Try to preserve the stash index.  If that fails because there
are staged changes, apply without preserving the stash index.

(fn STASH)" t nil)(autoload 'magit-stash-drop "magit-stash" "Remove a stash from the stash list.
When the region is active offer to drop all contained stashes.

(fn STASH)" t nil)(autoload 'magit-stash-clear "magit-stash" "Remove all stashes saved in REF's reflog by deleting REF.

(fn REF)" t nil)(autoload 'magit-stash-branch "magit-stash" "Create and checkout a new BRANCH from STASH.

(fn STASH BRANCH)" t nil)(autoload 'magit-stash-branch-here "magit-stash" "Create and checkout a new BRANCH and apply STASH.
The branch is created using `magit-branch-and-checkout', using the
current branch or `HEAD' as the start-point.

(fn STASH BRANCH)" t nil)(autoload 'magit-stash-format-patch "magit-stash" "Create a patch from STASH

(fn STASH)" t nil)(autoload 'magit-stash-list "magit-stash" "List all stashes in a buffer." t nil)(autoload 'magit-stash-show "magit-stash" "Show all diffs of a stash in a buffer.

(fn STASH &optional ARGS FILES)" t nil)(autoload 'magit-init "magit-status" "Initialize a Git repository, then show its status.

If the directory is below an existing repository, then the user
has to confirm that a new one should be created inside.  If the
directory is the root of the existing repository, then the user
has to confirm that it should be reinitialized.

Non-interactively DIRECTORY is (re-)initialized unconditionally.

(fn DIRECTORY)" t nil)(autoload 'magit-status "magit-status" "Show the status of the current Git repository in a buffer.

If the current directory isn't located within a Git repository,
then prompt for an existing repository or an arbitrary directory,
depending on option `magit-repository-directories', and show the
status of the selected repository instead.

* If that option specifies any existing repositories, then offer
  those for completion and show the status buffer for the
  selected one.

* Otherwise read an arbitrary directory using regular file-name
  completion.  If the selected directory is the top-level of an
  existing working tree, then show the status buffer for that.

* Otherwise offer to initialize the selected directory as a new
  repository.  After creating the repository show its status
  buffer.

These fallback behaviors can also be forced using one or more
prefix arguments:

* With two prefix arguments (or more precisely a numeric prefix
  value of 16 or greater) read an arbitrary directory and act on
  it as described above.  The same could be accomplished using
  the command `magit-init'.

* With a single prefix argument read an existing repository, or
  if none can be found based on `magit-repository-directories',
  then fall back to the same behavior as with two prefix
  arguments.

(fn &optional DIRECTORY CACHE)" t nil)(defalias 'magit 'magit-status "An alias for `magit-status' for better discoverability.

Instead of invoking this alias for `magit-status' using
\"M-x magit RET\", you should bind a key to `magit-status'
and read the info node `(magit)Getting Started', which
also contains other useful hints.")(autoload 'magit-status-here "magit-status" "Like `magit-status' but with non-nil `magit-status-goto-file-position'." t nil)(autoload 'magit-status-setup-buffer "magit-status" "

(fn &optional DIRECTORY)" nil nil)(autoload 'magit-submodule "magit-submodule" nil t)(autoload 'magit-submodule-add "magit-submodule" nil t)(autoload 'magit-submodule-read-name-for-path "magit-submodule" "

(fn PATH &optional PREFER-SHORT)" nil nil)(autoload 'magit-submodule-register "magit-submodule" nil t)(autoload 'magit-submodule-populate "magit-submodule" nil t)(autoload 'magit-submodule-update "magit-submodule" nil t)(autoload 'magit-submodule-synchronize "magit-submodule" nil t)(autoload 'magit-submodule-unpopulate "magit-submodule" nil t)(autoload 'magit-submodule-remove "magit-submodule" "Unregister MODULES and remove their working directories.

For safety reasons, do not remove the gitdirs and if a module has
uncommitted changes, then do not remove it at all.  If a module's
gitdir is located inside the working directory, then move it into
the gitdir of the superproject first.

With the \"--force\" argument offer to remove dirty working
directories and with a prefix argument offer to delete gitdirs.
Both actions are very dangerous and have to be confirmed.  There
are additional safety precautions in place, so you might be able
to recover from making a mistake here, but don't count on it.

(fn MODULES ARGS TRASH-GITDIRS)" t nil)(autoload 'magit-insert-modules "magit-submodule" "Insert submodule sections.
Hook `magit-module-sections-hook' controls which module sections
are inserted, and option `magit-module-sections-nested' controls
whether they are wrapped in an additional section." nil nil)(autoload 'magit-insert-modules-overview "magit-submodule" "Insert sections for all modules.
For each section insert the path and the output of `git describe --tags',
or, failing that, the abbreviated HEAD commit hash." nil nil)(autoload 'magit-insert-modules-unpulled-from-upstream "magit-submodule" "Insert sections for modules that haven't been pulled from the upstream.
These sections can be expanded to show the respective commits." nil nil)(autoload 'magit-insert-modules-unpulled-from-pushremote "magit-submodule" "Insert sections for modules that haven't been pulled from the push-remote.
These sections can be expanded to show the respective commits." nil nil)(autoload 'magit-insert-modules-unpushed-to-upstream "magit-submodule" "Insert sections for modules that haven't been pushed to the upstream.
These sections can be expanded to show the respective commits." nil nil)(autoload 'magit-insert-modules-unpushed-to-pushremote "magit-submodule" "Insert sections for modules that haven't been pushed to the push-remote.
These sections can be expanded to show the respective commits." nil nil)(autoload 'magit-list-submodules "magit-submodule" "Display a list of the current repository's submodules." t nil)(autoload 'magit-subtree "magit-subtree" nil t)(autoload 'magit-subtree-import "magit-subtree" nil t)(autoload 'magit-subtree-export "magit-subtree" nil t)(autoload 'magit-subtree-add "magit-subtree" "Add REF from REPOSITORY as a new subtree at PREFIX.

(fn PREFIX REPOSITORY REF ARGS)" t nil)(autoload 'magit-subtree-add-commit "magit-subtree" "Add COMMIT as a new subtree at PREFIX.

(fn PREFIX COMMIT ARGS)" t nil)(autoload 'magit-subtree-merge "magit-subtree" "Merge COMMIT into the PREFIX subtree.

(fn PREFIX COMMIT ARGS)" t nil)(autoload 'magit-subtree-pull "magit-subtree" "Pull REF from REPOSITORY into the PREFIX subtree.

(fn PREFIX REPOSITORY REF ARGS)" t nil)(autoload 'magit-subtree-push "magit-subtree" "Extract the history of the subtree PREFIX and push it to REF on REPOSITORY.

(fn PREFIX REPOSITORY REF ARGS)" t nil)(autoload 'magit-subtree-split "magit-subtree" "Extract the history of the subtree PREFIX.

(fn PREFIX COMMIT ARGS)" t nil)(autoload 'magit-tag "magit" nil t)(autoload 'magit-tag-create "magit-tag" "Create a new tag with the given NAME at REV.
With a prefix argument annotate the tag.

(git tag [--annotate] NAME REV)

(fn NAME REV &optional ARGS)" t nil)(autoload 'magit-tag-delete "magit-tag" "Delete one or more tags.
If the region marks multiple tags (and nothing else), then offer
to delete those, otherwise prompt for a single tag to be deleted,
defaulting to the tag at point.

(git tag -d TAGS)

(fn TAGS)" t nil)(autoload 'magit-tag-prune "magit-tag" "Offer to delete tags missing locally from REMOTE, and vice versa.

(fn TAGS REMOTE-TAGS REMOTE)" t nil)(autoload 'magit-tag-release "magit-tag" "Create a release tag.

Assume that release tags match `magit-release-tag-regexp'.

First prompt for the name of the new tag using the highest
existing tag as initial input and leaving it to the user to
increment the desired part of the version string.

If `--annotate' is enabled, then prompt for the message of the
new tag.  Base the proposed tag message on the message of the
highest tag, provided that that contains the corresponding
version string and substituting the new version string for that.
Otherwise propose something like \"Foo-Bar 1.2.3\", given, for
example, a TAG \"v1.2.3\" and a repository located at something
like \"/path/to/foo-bar\".

(fn TAG MSG &optional ARGS)" t nil)(autoload 'magit-emacs-Q-command "magit-utils" "Show a shell command that runs an uncustomized Emacs with only Magit loaded.
See info node `(magit)Debugging Tools' for more information." t nil)(autoload 'Info-follow-nearest-node--magit-gitman "magit-utils" "

(fn FN &optional FORK)" nil nil)(advice-add 'Info-follow-nearest-node :around 'Info-follow-nearest-node--magit-gitman)(autoload 'org-man-export--magit-gitman "magit-utils" "

(fn FN LINK DESCRIPTION FORMAT)" nil nil)(advice-add 'org-man-export :around 'org-man-export--magit-gitman)(put 'magit-wip-after-save-mode 'globalized-minor-mode t)(defvar magit-wip-after-save-mode nil "Non-nil if Magit-Wip-After-Save mode is enabled.
See the `magit-wip-after-save-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-wip-after-save-mode'.")(autoload 'magit-wip-after-save-mode "magit-wip" "Toggle Magit-Wip-After-Save-Local mode in all buffers.
With prefix ARG, enable Magit-Wip-After-Save mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Magit-Wip-After-Save-Local mode is enabled in all buffers where
`magit-wip-after-save-local-mode-turn-on' would do it.
See `magit-wip-after-save-local-mode' for more information on Magit-Wip-After-Save-Local mode.

(fn &optional ARG)" t nil)(defvar magit-wip-after-apply-mode nil "Non-nil if Magit-Wip-After-Apply mode is enabled.
See the `magit-wip-after-apply-mode' command
for a description of this minor mode.")(autoload 'magit-wip-after-apply-mode "magit-wip" "Commit to work-in-progress refs.

If called interactively, enable Magit-Wip-After-Apply mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

After applying a change using any \"apply variant\"
command (apply, stage, unstage, discard, and reverse) commit the
affected files to the current wip refs.  For each branch there
may be two wip refs; one contains snapshots of the files as found
in the worktree and the other contains snapshots of the entries
in the index.

(fn &optional ARG)" t nil)(defvar magit-wip-before-change-mode nil "Non-nil if Magit-Wip-Before-Change mode is enabled.
See the `magit-wip-before-change-mode' command
for a description of this minor mode.")(autoload 'magit-wip-before-change-mode "magit-wip" "Commit to work-in-progress refs before certain destructive changes.

If called interactively, enable Magit-Wip-Before-Change mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

Before invoking a revert command or an \"apply variant\"
command (apply, stage, unstage, discard, and reverse) commit the
affected tracked files to the current wip refs.  For each branch
there may be two wip refs; one contains snapshots of the files
as found in the worktree and the other contains snapshots of the
entries in the index.

Only changes to files which could potentially be affected by the
command which is about to be called are committed.

(fn &optional ARG)" t nil)(autoload 'magit-wip-commit-initial-backup "magit-wip" "Before saving, commit current file to a worktree wip ref.

The user has to add this function to `before-save-hook'.

Commit the current state of the visited file before saving the
current buffer to that file.  This backs up the same version of
the file as `backup-buffer' would, but stores the backup in the
worktree wip ref, which is also used by the various Magit Wip
modes, instead of in a backup file as `backup-buffer' would.

This function ignores the variables that affect `backup-buffer'
and can be used along-side that function, which is recommended
because this function only backs up files that are tracked in
a Git repository." nil nil)(autoload 'magit-worktree "magit-worktree" nil t)(autoload 'magit-worktree-checkout "magit-worktree" "Checkout BRANCH in a new worktree at PATH.

(fn PATH BRANCH)" t nil)(autoload 'magit-worktree-branch "magit-worktree" "Create a new BRANCH and check it out in a new worktree at PATH.

(fn PATH BRANCH START-POINT &optional FORCE)" t nil)(autoload 'magit-worktree-move "magit-worktree" "Move WORKTREE to PATH.

(fn WORKTREE PATH)" t nil)(autoload 'turn-on-magit-gitflow "magit-gitflow" "Unconditionally turn on `magit-gitflow-mode'." nil nil)(defvar magit-todos-mode nil "Non-nil if Magit-Todos mode is enabled.
See the `magit-todos-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-todos-mode'.")(autoload 'magit-todos-mode "magit-todos" "Show list of to-do items in Magit status buffer for tracked files in repo.

If called interactively, enable Magit-Todos mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'magit-todos-list "magit-todos" "Show to-do list of the current Git repository in a buffer.
With prefix, prompt for repository.

(fn &optional DIRECTORY)" t nil)(autoload 'magit-todos-list-internal "magit-todos" "Open buffer showing to-do list of repository at DIRECTORY.

(fn DIRECTORY)" nil nil)(autoload 'github-review-forge-pr-at-point "github-review" "Review the forge pull request at point." t nil)(autoload 'github-review-start "github-review" "Start review given PR URL.

(fn URL)" t nil)(autoload 'github-review-approve "github-review" "Approve a PR (to be run from a buffer corresponding to a review)." t nil)(autoload 'github-review-reject "github-review" "Reject a PR (to be run from a buffer corresponding to a review)." t nil)(autoload 'github-review-comment "github-review" "Comment on a PR (to be run from a buffer corresponding to a review)." t nil)(autoload 'ghub-clear-caches "ghub" "Clear all caches that might negatively affect Ghub.

If a library that is used by Ghub caches incorrect information
such as a mistyped password, then that can prevent Ghub from
asking the user for the correct information again.

Set `url-http-real-basic-auth-storage' to nil
and call `auth-source-forget+'." t nil)(autoload 'evil-magit-init "evil-magit" "This function completes the setup of evil-magit. It is called
automatically when evil-magit is loaded. The only reason to use
this function is if you've called `evil-magit-revert' and wish to
go back to evil-magit behavior." t nil)(autoload 'evil-magit-revert "evil-magit" "Revert changes by evil-magit that affect default evil+magit behavior." t nil)(autoload 'osx-trash-setup "osx-trash" "Provide trash support for OS X.

Provide `system-move-file-to-trash' as an alias for
`osx-trash-move-file-to-trash'.

Note that you still need to set `delete-by-moving-to-trash' to a
non-nil value to enable trashing for file operations." nil nil)(defvar ns-auto-titlebar-mode nil "Non-nil if Ns-Auto-Titlebar mode is enabled.
See the `ns-auto-titlebar-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ns-auto-titlebar-mode'.")(autoload 'ns-auto-titlebar-mode "ns-auto-titlebar" "Set the MacOS transparent titlebar background automatically.

If called interactively, enable Ns-Auto-Titlebar mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'highlight-quoted-mode "highlight-quoted" "Highlight Lisp quotes and quoted symbols.

Toggle Highlight-Quoted mode on or off.
With a prefix argument ARG, enable Highlight-Quoted mode if ARG is positive, and
disable it otherwise.  If called from Lisp, enable the mode if ARG is omitted or
nil, and toggle it if ARG is `toggle'.
\\{highlight-quoted-mode-map}

(fn &optional ARG)" t nil)(autoload 'macrostep-mode "macrostep" "Minor mode for inline expansion of macros in Emacs Lisp source buffers.

If called interactively, enable Macrostep mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\\<macrostep-keymap>Progressively expand macro forms with \\[macrostep-expand], collapse them with \\[macrostep-collapse],
and move back and forth with \\[macrostep-next-macro] and \\[macrostep-prev-macro].
Use \\[macrostep-collapse-all] or collapse all visible expansions to
quit and return to normal editing.

\\{macrostep-keymap}

(fn &optional ARG)" t nil)(autoload 'macrostep-expand "macrostep" "Expand the macro form following point by one step.

Enters `macrostep-mode' if it is not already active, making the
buffer temporarily read-only. If macrostep-mode is active and the
form following point is not a macro form, search forward in the
buffer and expand the next macro form found, if any.

With a prefix argument, the expansion is displayed in a separate
buffer instead of inline in the current buffer.  Setting
`macrostep-expand-in-separate-buffer' to non-nil swaps these two
behaviors.

(fn &optional TOGGLE-SEPARATE-BUFFER)" t nil)(autoload 'macrostep-c-mode-hook "macrostep-c" nil nil nil)(add-hook 'c-mode-hook #'macrostep-c-mode-hook)(autoload 'overseer-version "overseer" "Get the Overseer version as string.

If called interactively or if SHOW-VERSION is non-nil, show the
version in the echo area and the messages buffer.

The returned string includes both, the version from package.el
and the library version, if both a present and different.

If the version number could not be determined, signal an error,
if called interactively, or if SHOW-VERSION is non-nil, otherwise
just return nil.

(fn &optional SHOW-VERSION)" t nil)(autoload 'overseer-mode "overseer" "Minor mode for emacs lisp files to test through ert-runner.

If called interactively, enable overseer mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

Key bindings:
\\{overseer-mode-map}

(fn &optional ARG)" t nil)(autoload 'overseer-enable-mode "overseer" nil nil nil)(dolist (hook '(emacs-lisp-mode-hook)) (add-hook hook 'overseer-enable-mode))(autoload 'elisp-def "elisp-def" "Go to the definition of the symbol at point." t nil)(autoload 'elisp-def-mode "elisp-def" "Minor mode for finding definitions with `elisp-def'.

If called interactively, enable Elisp-Def mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\\{elisp-def-mode-map}

(fn &optional ARG)" t nil)(autoload 'elisp-demos-advice-describe-function-1 "elisp-demos" "

(fn FUNCTION)" nil nil)(autoload 'elisp-demos-advice-helpful-update "elisp-demos" nil nil nil)(autoload 'flycheck-cask-setup "flycheck-cask" "Setup Cask integration for Flycheck.

If the current file is part of a Cask project, as denoted by the
existence of a Cask file in the file's directory or any ancestor
thereof, configure Flycheck to initialze Cask packages while
syntax checking.

Set `flycheck-emacs-lisp-initialize-packages' and
`flycheck-emacs-lisp-package-user-dir' accordingly." nil nil)(autoload 'buttercup-run-at-point "buttercup" "Run the buttercup suite at point." t nil)(autoload 'buttercup-run-discover "buttercup" "Discover and load test files, then run all defined suites.

Takes directories as command line arguments, defaulting to the
current directory." nil nil)(autoload 'buttercup-run-markdown-buffer "buttercup" "Run all test suites defined in MARKDOWN-BUFFERS.
A suite must be defined within a Markdown \"lisp\" code block.
If MARKDOWN-BUFFERS is empty (nil), use the current buffer.

(fn &rest MARKDOWN-BUFFERS)" t nil)(autoload 'buttercup-run-markdown "buttercup" "Run all test suites defined in Markdown files passed as arguments.
A suite must be defined within a Markdown \"lisp\" code block." nil nil)(autoload 'buttercup-run-markdown-file "buttercup" "Run all test suites defined in Markdown FILE.
A suite must be defined within a Markdown \"lisp\" code block.

(fn FILE)" t nil)(autoload 'buttercup-minor-mode "buttercup" "Activate buttercup minor mode.

If called interactively, enable Buttercup minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

With buttercup minor mode active the following is activated:

- `describe' and `it' forms are fontified with
  `font-lock-keyword-face'.
- `describe' and `it' forms are available from `imenu' for
  quicker access.

(fn &optional ARG)" t nil)(autoload 'markdown-mode "markdown-mode" "Major mode for editing Markdown files.

(fn)" t nil)(autoload 'gfm-mode "markdown-mode" "Major mode for editing GitHub Flavored Markdown files.

(fn)" t nil)(autoload 'markdown-view-mode "markdown-mode" "Major mode for viewing Markdown content.

(fn)" t nil)(autoload 'gfm-view-mode "markdown-mode" "Major mode for viewing GitHub Flavored Markdown content.

(fn)" t nil)(autoload 'markdown-live-preview-mode "markdown-mode" "Toggle native previewing on save for a specific markdown file.

If called interactively, enable Markdown-Live-Preview mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'markdown-toc-version "markdown-toc" "Markdown-toc version." t nil)(autoload 'markdown-toc-generate-toc "markdown-toc" "Generate a TOC for markdown file at current point.
Deletes any previous TOC.
If called interactively with prefix arg REPLACE-TOC-P, replaces previous TOC.

(fn &optional REPLACE-TOC-P)" t nil)(autoload 'markdown-toc-generate-or-refresh-toc "markdown-toc" "Generate a TOC for markdown file at current point or refreshes an already generated TOC." t nil)(autoload 'markdown-toc-refresh-toc "markdown-toc" "Refreshes an already generated TOC." t nil)(autoload 'markdown-toc-delete-toc "markdown-toc" "Deletes a previously generated TOC." t nil)(autoload 'markdown-toc-follow-link-at-point "markdown-toc" "On a given toc link, navigate to the current markdown header.
If the toc is misindented (according to markdown-toc-indentation-space`)
or if not on a toc link, this does nothing.
" t nil)(autoload 'markdown-toc-mode "markdown-toc" "Functionality for generating toc in markdown file.
With no argument, the mode is toggled on/off.
Non-nil argument turns mode on.
Nil argument turns mode off.

If called interactively, enable Markdown-Toc mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Commands:
\\{markdown-toc-mode-map}

(fn &optional ARG)" t nil)(autoload 'edit-indirect-region "edit-indirect" "Edit the region BEG..END in a separate buffer.
The region is copied, without text properties, to a separate
buffer, called edit-indirect buffer, and
`edit-indirect-guess-mode-function' is called to set the major
mode.
When done, exit with `edit-indirect-commit', which will remove the
original region and replace it with the edited version; or with
`edit-indirect-abort', which will drop the modifications.

This differs from `clone-indirect-buffer' with narrowing in that
the text properties are not shared, so the parent buffer major mode
and the edit-indirect buffer major mode will not be able to tread
on each other's toes by setting up potentially conflicting text
properties, which happens surprisingly often when the font-lock
mode is used.

Edit-indirect buffers use the `edit-indirect-mode-map' keymap.

If there's already an edit-indirect buffer for BEG..END, use that.
If there's already an edit-indirect buffer active overlapping any
portion of BEG..END, an `edit-indirect-overlapping' error is
signaled.

When DISPLAY-BUFFER is non-nil or when called interactively,
display the edit-indirect buffer in some window and select it.

In any case, return the edit-indirect buffer.

(fn BEG END &optional DISPLAY-BUFFER)" t nil)(autoload 'evil-markdown-mode "evil-markdown" "Buffer local minor mode for evil-markdown

If called interactively, enable Evil-Markdown mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'evil-markdown-set-key-theme "evil-markdown" "Select what key THEMEs to enable.

(fn THEME)" nil nil)(autoload 'org-babel-execute:arduino "ob-arduino" "org-babel arduino hook.

(fn BODY PARAMS)" nil nil)(eval-after-load 'org '(add-to-list 'org-src-lang-modes '("arduino" . arduino)))(defvar ob-clojure-literate-auto-jackin-p nil "Auto jack in ob-clojure project.
Don't auto jack in by default for not rude.")(autoload 'ob-clojure-literate-specify-session "ob-clojure-literate" "Specify ob-clojure header argument :session with value selected from a list of available sessions." t nil)(autoload 'ob-clojure-literate-auto-jackin "ob-clojure-literate" "Auto setup ob-clojure-literate scaffold and jack-in Clojure project." t nil)(autoload 'ob-clojure-literate-enable "ob-clojure-literate" "Enable Org-mode buffer locally for `ob-clojure-literate'." nil nil)(autoload 'ob-clojure-literate-disable "ob-clojure-literate" "Disable Org-mode buffer locally for `ob-clojure-literate'." nil nil)(if ob-clojure-literate-auto-jackin-p (ob-clojure-literate-auto-jackin))(autoload 'ob-clojure-literate-mode "ob-clojure-literate" "A minor mode to toggle `ob-clojure-literate'.

If called interactively, enable Ob-Clojure-Literate mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'org-babel-execute:php "ob-php" "Orgmode Babel PHP evaluate function for `BODY' with `PARAMS'.

(fn BODY PARAMS)" nil nil)(eval-after-load "org" '(add-to-list 'org-src-lang-modes '("php" . php)))(autoload 'org-babel-execute:redis "ob-redis" "org-babel redis hook.

(fn BODY PARAMS)" nil nil)(eval-after-load "org" '(add-to-list 'org-src-lang-modes '("redis" . redis)))(autoload 'org-babel-execute:sclang "ob-sclang" "Org-mode Babel sclang hook for evaluate `BODY' with `PARAMS'.

(fn BODY PARAMS)" nil nil)(autoload 'org-babel-execute:spice "ob-spice" "Execute a block of Spice code `BODY' with org-babel and `PARAMS'.

(fn BODY PARAMS)" nil nil)(autoload 'org-annotate-file "org-annotate-file" "Visit `org-annotate-file-storage-file` and add a new annotation section.
The annotation is opened at the new section which will be referencing
the point in the current file." t nil)(autoload 'org-annotate-file-show-section "org-annotate-file" "Add or show annotation entry in STORAGE-FILE and return the buffer.
The annotation will link to ANNOTATED-BUFFER if specified,
  otherwise the current buffer is used.

(fn STORAGE-FILE &optional ANNOTATED-BUFFER)" nil nil)(autoload 'org-attach-embedded-images-in-subtree "org-attach-embedded-images" "Save the displayed images as attachments and insert links to them." t nil)(autoload 'org-contacts "org-contacts" "Create agenda view for contacts matching NAME.

(fn NAME)" t nil)(autoload 'org-encrypt-entry "org-crypt" "Encrypt the content of the current headline." t nil)(autoload 'org-decrypt-entry "org-crypt" "Decrypt the content of the current headline." t nil)(autoload 'org-encrypt-entries "org-crypt" "Encrypt all top-level entries in the current buffer." t nil)(autoload 'org-decrypt-entries "org-crypt" "Decrypt all entries in the current buffer." t nil)(autoload 'org-crypt-use-before-save-magic "org-crypt" "Add a hook to automatically encrypt entries before a file is saved to disk." nil nil)(autoload 'org-eldoc-load "org-eldoc" "Set up org-eldoc documentation function." t nil)(add-hook 'org-mode-hook #'org-eldoc-load)(autoload 'org-link-edit-forward-slurp "org-link-edit" "Slurp N trailing blobs into link's description.

  The [[https://orgmode.org/][Org mode]] site

                        |
                        v

  The [[https://orgmode.org/][Org mode site]]

A blob is a block of non-whitespace characters.  When slurping
forward, trailing punctuation characters are not considered part
of a blob.

After slurping, return the slurped text and move point to the
beginning of the link.

If N is negative, slurp leading blobs instead of trailing blobs.

(fn &optional N)" t nil)(autoload 'org-link-edit-backward-slurp "org-link-edit" "Slurp N leading blobs into link's description.

  The [[https://orgmode.org/][Org mode]] site

                        |
                        v

  [[https://orgmode.org/][The Org mode]] site

A blob is a block of non-whitespace characters.

After slurping, return the slurped text and move point to the
beginning of the link.

If N is negative, slurp trailing blobs instead of leading blobs.

(fn &optional N)" t nil)(autoload 'org-link-edit-forward-barf "org-link-edit" "Barf N trailing blobs from link's description.

  The [[https://orgmode.org/][Org mode]] site

                        |
                        v

  The [[https://orgmode.org/][Org]] mode site

A blob is a block of non-whitespace characters.

After barfing, return the barfed text and move point to the
beginning of the link.

If N is negative, barf leading blobs instead of trailing blobs.

(fn &optional N)" t nil)(autoload 'org-link-edit-backward-barf "org-link-edit" "Barf N leading blobs from link's description.

  The [[https://orgmode.org/][Org mode]] site

                        |
                        v

  The Org [[https://orgmode.org/][mode]] site

A blob is a block of non-whitespace characters.

After barfing, return the barfed text and move point to the
beginning of the link.

If N is negative, barf trailing blobs instead of leading blobs.

(fn &optional N)" t nil)(autoload 'org-link-edit-transport-next-link "org-link-edit" "Move the next link to point.

If the region is active, use the selected text as the link's
description.  Otherwise, use the word at point.

With prefix argument PREVIOUS, move the previous link instead of
the next link.

Non-interactively, use the text between BEG and END as the
description, moving the next (or previous) link relative to BEG
and END.  By default, refuse to overwrite an existing
description.  If OVERWRITE is `ask', prompt for confirmation
before overwriting; for any other non-nil value, overwrite
without asking.

(fn &optional PREVIOUS BEG END OVERWRITE)" t nil)(autoload 'org-mac-grab-link "org-mac-link" "Prompt for an application to grab a link from.
When done, go grab the link, and insert it at point." t nil)(autoload 'org-mac-firefox-get-frontmost-url "org-mac-link" nil t nil)(autoload 'org-mac-firefox-insert-frontmost-url "org-mac-link" nil t nil)(autoload 'org-mac-vimperator-get-frontmost-url "org-mac-link" nil t nil)(autoload 'org-mac-vimperator-insert-frontmost-url "org-mac-link" nil t nil)(autoload 'org-mac-chrome-get-frontmost-url "org-mac-link" nil t nil)(autoload 'org-mac-chrome-insert-frontmost-url "org-mac-link" nil t nil)(autoload 'org-mac-brave-get-frontmost-url "org-mac-link" nil t nil)(autoload 'org-mac-brave-insert-frontmost-url "org-mac-link" nil t nil)(autoload 'org-mac-safari-get-frontmost-url "org-mac-link" nil t nil)(autoload 'org-mac-safari-insert-frontmost-url "org-mac-link" nil t nil)(autoload 'org-mac-together-get-selected "org-mac-link" nil t nil)(autoload 'org-mac-together-insert-selected "org-mac-link" nil t nil)(autoload 'org-mac-finder-item-get-selected "org-mac-link" nil t nil)(autoload 'org-mac-finder-insert-selected "org-mac-link" nil t nil)(autoload 'org-mac-addressbook-item-get-selected "org-mac-link" nil t nil)(autoload 'org-mac-addressbook-insert-selected "org-mac-link" nil t nil)(autoload 'org-mac-skim-get-page "org-mac-link" nil t nil)(autoload 'org-mac-skim-insert-page "org-mac-link" nil t nil)(autoload 'org-mac-acrobat-get-page "org-mac-link" nil t nil)(autoload 'org-mac-acrobat-insert-page "org-mac-link" nil t nil)(autoload 'org-mac-outlook-message-get-links "org-mac-link" "Create links to the messages currently selected or flagged in Microsoft Outlook.app.
This will use AppleScript to get the message-id and the subject of the
messages in Microsoft Outlook.app and make a link out of it.
When SELECT-OR-FLAG is \"s\", get the selected messages (this is also
the default).  When SELECT-OR-FLAG is \"f\", get the flagged messages.
The Org-syntax text will be pushed to the kill ring, and also returned.

(fn &optional SELECT-OR-FLAG)" t nil)(autoload 'org-mac-outlook-message-insert-selected "org-mac-link" "Insert a link to the messages currently selected in Microsoft Outlook.app.
This will use AppleScript to get the message-id and the subject
of the active mail in Microsoft Outlook.app and make a link out
of it." t nil)(autoload 'org-mac-outlook-message-insert-flagged "org-mac-link" "Asks for an org buffer and a heading within it, and replace message links.
If heading exists, delete all mac-outlook:// links within
heading's first level.  If heading doesn't exist, create it at
point-max.  Insert list of mac-outlook:// links to flagged mail
after heading.

(fn ORG-BUFFER ORG-HEADING)" t nil)(autoload 'org-mac-evernote-note-insert-selected "org-mac-link" "Insert a link to the notes currently selected in Evernote.app.
This will use AppleScript to get the note id and the title of the
note(s) in Evernote.app and make a link out of it/them." t nil)(autoload 'org-mac-devonthink-item-insert-selected "org-mac-link" "Insert a link to the item(s) currently selected in DEVONthink Pro Office.
This will use AppleScript to get the `uuid'(s) and the name(s) of the
selected items in DEVONthink Pro Office and make link(s) out of it/them." t nil)(autoload 'org-mac-message-get-links "org-mac-link" "Create links to the messages currently selected or flagged in Mail.app.
This will use AppleScript to get the message-id and the subject of the
messages in Mail.app and make a link out of it.
When SELECT-OR-FLAG is \"s\", get the selected messages (this is also
the default).  When SELECT-OR-FLAG is \"f\", get the flagged messages.
The Org-syntax text will be pushed to the kill ring, and also returned.

(fn &optional SELECT-OR-FLAG)" t nil)(autoload 'org-mac-message-insert-selected "org-mac-link" "Insert a link to the messages currently selected in Mail.app.
This will use AppleScript to get the message-id and the subject of the
active mail in Mail.app and make a link out of it." t nil)(autoload 'org-mac-message-insert-flagged "org-mac-link" "Asks for an org buffer and a heading within it, and replace message links.
If heading exists, delete all message:// links within heading's first
level.  If heading doesn't exist, create it at point-max.  Insert
list of message:// links to flagged mail after heading.

(fn ORG-BUFFER ORG-HEADING)" t nil)(autoload 'org-passwords-mode "org-passwords" "Mode for storing passwords

(fn)" t nil)(autoload 'org-passwords "org-passwords" "Open the password file. Open the password file defined by the
variable `org-password-file' in read-only mode and kill that
buffer later according to the value of the variable
`org-passwords-time-opened'. It also adds the `org-password-file'
to the auto-mode-alist so that it is opened with its mode being
`org-passwords-mode'.

With prefix arg ARG, the command does not set up a timer to kill the buffer.

With a double prefix arg \\[universal-argument] \\[universal-argument], open the file for editing.

(fn &optional ARG)" t nil)(autoload 'org-registry-show "org-registry" "Show Org files where there are links pointing to the current
buffer.

(fn &optional VISIT)" t nil)(autoload 'org-registry-visit "org-registry" "If an Org file contains a link to the current location, visit
this file." t nil)(autoload 'org-registry-initialize "org-registry" "Initialize `org-registry-alist'.
If FROM-SCRATCH is non-nil or the registry does not exist yet,
create a new registry from scratch and eval it. If the registry
exists, eval `org-registry-file' and make it the new value for
`org-registry-alist'.

(fn &optional FROM-SCRATCH)" t nil)(autoload 'org-registry-insinuate "org-registry" "Call `org-registry-update' after saving in Org-mode.
Use with caution.  This could slow down things a bit." t nil)(autoload 'org-registry-update "org-registry" "Update the registry for the current Org file." t nil)(autoload 'org-screenshot-take "org-screenshot" "Take a screenshot and insert link to it at point, if image
display is already on (see \\[org-toggle-inline-images])
screenshot will be displayed as an image

Screen area for the screenshot is selected with the mouse, left
click on a window screenshots that window, while left click and
drag selects a region. Pressing any key cancels the screen shot

With `C-u' universal argument waits one second after target is
selected before taking the screenshot. With double `C-u' wait two
seconds.

With triple `C-u' wait 3 seconds, and also rings the bell when
screenshot is done, any more `C-u' after that increases delay by
2 seconds

(fn &optional DELAY)" t nil)(autoload 'org-screenshot-rotate-prev "org-screenshot" "Rotate last screenshot with one of the previously taken
screenshots from the same directory. If DIR is negative, rotate
in the other direction

(fn DIR)" t nil)(autoload 'org-screenshot-rotate-next "org-screenshot" "Rotate last screenshot with one of the previously taken
screenshots from the same directory. If DIR is negative, rotate
in the other direction

(fn DIR)" t nil)(autoload 'org-screenshot-show-unused "org-screenshot" "Open A Dired buffer with unused screenshots marked" t nil)(autoload 'org-toc-show "org-toc" "Show the table of contents of the current Org-mode buffer.

(fn &optional DEPTH POSITION)" t nil)(autoload 'org-track-fetch-package "org-track" "Fetch Org package depending on `org-track-fetch-package-extension'.
If DIRECTORY is defined, unpack the package there, i.e. add the
subdirectory org-mode/ to DIRECTORY.

(fn &optional DIRECTORY)" t nil)(autoload 'org-track-compile-org "org-track" "Compile all *.el files that come with org-mode.
Generate the autoloads file `org-loaddefs.el'.

DIRECTORY is where the directory org-mode/ lives (i.e. the
          parent directory of your local repo.

(fn &optional DIRECTORY)" t nil)(autoload 'org-freemind-export-to-freemind "ox-freemind" "Export current buffer to a Freemind Mindmap file.

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

A non-nil optional argument ASYNC means the process should happen
asynchronously.  The resulting file should be accessible through
the `org-export-stack' interface.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

When optional argument BODY-ONLY is non-nil, only write code
between \"<body>\" and \"</body>\" tags.

EXT-PLIST, when provided, is a property list with external
parameters overriding Org default settings, but still inferior to
file-local settings.

Return output file's name.

(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t nil)(autoload 'org-koma-letter-export-as-latex "ox-koma-letter" "Export current buffer as a KOMA Scrlttr2 letter.

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

A non-nil optional argument ASYNC means the process should happen
asynchronously.  The resulting buffer should be accessible
through the `org-export-stack' interface.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

When optional argument BODY-ONLY is non-nil, only write code
between \"\\begin{letter}\" and \"\\end{letter}\".

EXT-PLIST, when provided, is a property list with external
parameters overriding Org default settings, but still inferior to
file-local settings.

Export is done in a buffer named \"*Org KOMA-LETTER Export*\".  It
will be displayed if `org-export-show-temporary-export-buffer' is
non-nil.

(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t nil)(autoload 'org-koma-letter-export-to-latex "ox-koma-letter" "Export current buffer as a KOMA Scrlttr2 letter (tex).

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

A non-nil optional argument ASYNC means the process should happen
asynchronously.  The resulting file should be accessible through
the `org-export-stack' interface.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

When optional argument BODY-ONLY is non-nil, only write code
between \"\\begin{letter}\" and \"\\end{letter}\".

EXT-PLIST, when provided, is a property list with external
parameters overriding Org default settings, but still inferior to
file-local settings.

When optional argument PUB-DIR is set, use it as the publishing
directory.

Return output file's name.

(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t nil)(autoload 'org-koma-letter-export-to-pdf "ox-koma-letter" "Export current buffer as a KOMA Scrlttr2 letter (pdf).

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

A non-nil optional argument ASYNC means the process should happen
asynchronously.  The resulting file should be accessible through
the `org-export-stack' interface.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

When optional argument BODY-ONLY is non-nil, only write code
between \"\\begin{letter}\" and \"\\end{letter}\".

EXT-PLIST, when provided, is a property list with external
parameters overriding Org default settings, but still inferior to
file-local settings.

Return PDF file's name.

(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t nil)(autoload 'org-rss-export-as-rss "ox-rss" "Export current buffer to an RSS buffer.

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

A non-nil optional argument ASYNC means the process should happen
asynchronously.  The resulting buffer should be accessible
through the `org-export-stack' interface.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

Export is done in a buffer named \"*Org RSS Export*\", which will
be displayed when `org-export-show-temporary-export-buffer' is
non-nil.

(fn &optional ASYNC SUBTREEP VISIBLE-ONLY)" t nil)(autoload 'org-rss-export-to-rss "ox-rss" "Export current buffer to an RSS file.

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

A non-nil optional argument ASYNC means the process should happen
asynchronously.  The resulting file should be accessible through
the `org-export-stack' interface.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

Return output file's name.

(fn &optional ASYNC SUBTREEP VISIBLE-ONLY)" t nil)(autoload 'org-rss-publish-to-rss "ox-rss" "Publish an org file to RSS.

FILENAME is the filename of the Org file to be published.  PLIST
is the property list for the given project.  PUB-DIR is the
publishing directory.

Return output file name.

(fn PLIST FILENAME PUB-DIR)" nil nil)(autoload 'org-taskjuggler-export "ox-taskjuggler" "Export current buffer to a TaskJuggler file.

The exporter looks for a tree with tag that matches
`org-taskjuggler-project-tag' and takes this as the tasks for
this project.  The first node of this tree defines the project
properties such as project name and project period.

If there is a tree with tag that matches
`org-taskjuggler-resource-tag' this tree is taken as resources
for the project.  If no resources are specified, a default
resource is created and allocated to the project.

Also the TaskJuggler project will be created with default reports
as defined in `org-taskjuggler-default-reports'.

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

A non-nil optional argument ASYNC means the process should happen
asynchronously.  The resulting file should be accessible through
the `org-export-stack' interface.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

Return output file's name.

(fn &optional ASYNC SUBTREEP VISIBLE-ONLY)" t nil)(autoload 'org-taskjuggler-export-and-process "ox-taskjuggler" "Export current buffer to a TaskJuggler file and process it.

The exporter looks for a tree with tag that matches
`org-taskjuggler-project-tag' and takes this as the tasks for
this project.  The first node of this tree defines the project
properties such as project name and project period.

If there is a tree with tag that matches
`org-taskjuggler-resource-tag' this tree is taken as resources
for the project.  If no resources are specified, a default
resource is created and allocated to the project.

Also the TaskJuggler project will be created with default reports
as defined in `org-taskjuggler-default-reports'.

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

Return a list of reports.

(fn &optional SUBTREEP VISIBLE-ONLY)" t nil)(autoload 'org-taskjuggler-export-process-and-open "ox-taskjuggler" "Export current buffer to a TaskJuggler file, process and open it.

Export and process the file using
`org-taskjuggler-export-and-process' and open the generated
reports with a browser.

If you are targeting TaskJuggler 2.4 (see
`org-taskjuggler-target-version') the processing and display of
the reports is done using the TaskJuggler GUI.

(fn &optional SUBTREEP VISIBLE-ONLY)" t nil)(autoload 'htmlize-buffer "htmlize" "Convert BUFFER to HTML, preserving colors and decorations.

The generated HTML is available in a new buffer, which is returned.
When invoked interactively, the new buffer is selected in the current
window.  The title of the generated document will be set to the buffer's
file name or, if that's not available, to the buffer's name.

Note that htmlize doesn't fontify your buffers, it only uses the
decorations that are already present.  If you don't set up font-lock or
something else to fontify your buffers, the resulting HTML will be
plain.  Likewise, if you don't like the choice of colors, fix the mode
that created them, or simply alter the faces it uses.

(fn &optional BUFFER)" t nil)(autoload 'htmlize-region "htmlize" "Convert the region to HTML, preserving colors and decorations.
See `htmlize-buffer' for details.

(fn BEG END)" t nil)(autoload 'htmlize-file "htmlize" "Load FILE, fontify it, convert it to HTML, and save the result.

Contents of FILE are inserted into a temporary buffer, whose major mode
is set with `normal-mode' as appropriate for the file type.  The buffer
is subsequently fontified with `font-lock' and converted to HTML.  Note
that, unlike `htmlize-buffer', this function explicitly turns on
font-lock.  If a form of highlighting other than font-lock is desired,
please use `htmlize-buffer' directly on buffers so highlighted.

Buffers currently visiting FILE are unaffected by this function.  The
function does not change current buffer or move the point.

If TARGET is specified and names a directory, the resulting file will be
saved there instead of to FILE's directory.  If TARGET is specified and
does not name a directory, it will be used as output file name.

(fn FILE &optional TARGET)" t nil)(autoload 'htmlize-many-files "htmlize" "Convert FILES to HTML and save the corresponding HTML versions.

FILES should be a list of file names to convert.  This function calls
`htmlize-file' on each file; see that function for details.  When
invoked interactively, you are prompted for a list of files to convert,
terminated with RET.

If TARGET-DIRECTORY is specified, the HTML files will be saved to that
directory.  Normally, each HTML file is saved to the directory of the
corresponding source file.

(fn FILES &optional TARGET-DIRECTORY)" t nil)(autoload 'htmlize-many-files-dired "htmlize" "HTMLize dired-marked files.

(fn ARG &optional TARGET-DIRECTORY)" t nil)(autoload 'ox-clip-formatted-copy "ox-clip" "Export the selected region to HTML and copy it to the clipboard.
R1 and R2 define the selected region.

(fn R1 R2)" t nil)(autoload 'ox-clip-image-to-clipboard "ox-clip" "Copy the image file or latex fragment at point to the clipboard as an image.
SCALE is a numerical
prefix (default=`ox-clip-default-latex-scale') that determines
the size of the latex image. It has no effect on other kinds of
images. Currently only works on Linux.

(fn &optional SCALE)" t nil)(autoload 'toc-org-enable "toc-org" "Enable toc-org in this buffer." nil nil)(autoload 'toc-org-mode "toc-org" "Toggle `toc-org' in this buffer.

If called interactively, enable Toc-Org mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'org-cliplink-retrieve-title "org-cliplink" "

(fn URL TITLE-CALLBACK)" nil nil)(autoload 'org-cliplink-insert-transformed-title "org-cliplink" "Takes the URL, asynchronously retrieves the title and applies
a custom TRANSFORMER which transforms the url and title and insert
the required text to the current buffer.

(fn URL TRANSFORMER)" nil nil)(autoload 'org-cliplink-retrieve-title-synchronously "org-cliplink" "

(fn URL)" nil nil)(autoload 'org-cliplink "org-cliplink" "Takes a URL from the clipboard and inserts an org-mode link
with the title of a page found by the URL into the current
buffer" t nil)(autoload 'org-cliplink-capture "org-cliplink" "org-cliplink version for org-capture templates.
Makes synchronous request. Returns the link instead of inserting
it to the current buffer. Doesn't support Basic Auth. Doesn't
support cURL transport." t nil)(autoload 'evil-org-mode "evil-org" "Buffer local minor mode for evil-org

If called interactively, enable Evil-Org mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'evil-org-agenda-mode "evil-org-agenda" "Buffer local minor mode for evil-org-agenda

If called interactively, enable Evil-Org-Agenda mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'orgit-link-set-parameters "orgit" "

(fn TYPE &rest PARAMETERS)" nil nil)(eval-after-load 'magit '(define-key magit-mode-map [remap org-store-link] 'orgit-store-link))(autoload 'orgit-store-link "orgit" "Like `org-store-link' but store links to all selected commits, if any.

(fn ARG)" t nil)(eval-after-load 'org '(orgit-link-set-parameters "orgit" :store 'orgit-status-store :follow 'orgit-status-open :export 'orgit-status-export :complete 'orgit-status-complete-link))(autoload 'orgit-status-store "orgit" "Store a link to a Magit-Status mode buffer.
When the region selects one or more commits, then do nothing.
In that case `orgit-rev-store' stores one or more links instead." nil nil)(autoload 'orgit-status-open "orgit" "

(fn REPO)" nil nil)(autoload 'orgit-status-export "orgit" "

(fn PATH DESC FORMAT)" nil nil)(autoload 'orgit-status-complete-link "orgit" "

(fn &optional ARG)" nil nil)(eval-after-load 'org '(orgit-link-set-parameters "orgit-log" :store 'orgit-log-store :follow 'orgit-log-open :export 'orgit-log-export :complete 'orgit-log-complete-link))(autoload 'orgit-log-store "orgit" "Store a link to a Magit-Log mode buffer.
When the region selects one or more commits, then do nothing.
In that case `orgit-rev-store' stores one or more links instead." nil nil)(autoload 'orgit-log-open "orgit" "

(fn PATH)" nil nil)(autoload 'orgit-log-export "orgit" "

(fn PATH DESC FORMAT)" nil nil)(autoload 'orgit-log-complete-link "orgit" "

(fn &optional ARG)" nil nil)(eval-after-load 'org '(orgit-link-set-parameters "orgit-rev" :store 'orgit-rev-store :follow 'orgit-rev-open :export 'orgit-rev-export :complete 'orgit-rev-complete-link))(autoload 'orgit-rev-store "orgit" "Store a link to a Magit-Revision mode buffer.
With a prefix argument instead store the name of a tag or branch
that points at the revision, if any.

If `orgit-store-reference' is non-nil, then the meaning of the
prefix argument is reversed.

When the region selects one or more commits, e.g. in a log, then
store links to the Magit-Revision mode buffers for these commits." nil nil)(autoload 'orgit-rev-open "orgit" "

(fn PATH)" nil nil)(autoload 'orgit-rev-export "orgit" "

(fn PATH DESC FORMAT)" nil nil)(autoload 'orgit-rev-complete-link "orgit" "

(fn &optional ARG)" nil nil)(defalias 'org-babel-execute-src-block:async 'ob-async-org-babel-execute-src-block)(autoload 'ob-async-org-babel-execute-src-block "ob-async" "Like org-babel-execute-src-block, but run asynchronously.

Original docstring for org-babel-execute-src-block:

Execute the current source code block.  Insert the results of
execution into the buffer.  Source code execution and the
collection and formatting of results can be controlled through a
variety of header arguments.

With prefix argument ARG, force re-execution even if an existing
result cached in the buffer would otherwise have been returned.

Optionally supply a value for INFO in the form returned by
`org-babel-get-src-block-info'.

Optionally supply a value for PARAMS which will be merged with
the header arguments specified at the front of the source code
block.

(fn &optional ORIG-FUN ARG INFO PARAMS)" t nil)(autoload 'company-shell-rebuild-cache "company-shell" "Builds the cache of all completions found on the $PATH and all fish functions." t nil)(autoload 'company-fish-shell "company-shell" "Company backend for fish shell functions.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-shell "company-shell" "Company mode backend for binaries found on the $PATH.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'company-shell-env "company-shell" "Company backend for environment variables.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'drag-stuff-up "drag-stuff" "Drag stuff ARG lines up.

(fn ARG)" t nil)(autoload 'drag-stuff-down "drag-stuff" "Drag stuff ARG lines down.

(fn ARG)" t nil)(autoload 'drag-stuff-right "drag-stuff" "Drag stuff ARG lines to the right.

(fn ARG)" t nil)(autoload 'drag-stuff-left "drag-stuff" "Drag stuff ARG lines to the left.

(fn ARG)" t nil)(autoload 'drag-stuff-mode "drag-stuff" "Drag stuff around.

If called interactively, enable Drag-Stuff mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'turn-on-drag-stuff-mode "drag-stuff" "Turn on `drag-stuff-mode'." t nil)(autoload 'turn-off-drag-stuff-mode "drag-stuff" "Turn off `drag-stuff-mode'." t nil)(put 'drag-stuff-global-mode 'globalized-minor-mode t)(defvar drag-stuff-global-mode nil "Non-nil if Drag-Stuff-Global mode is enabled.
See the `drag-stuff-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `drag-stuff-global-mode'.")(autoload 'drag-stuff-global-mode "drag-stuff" "Toggle Drag-Stuff mode in all buffers.
With prefix ARG, enable Drag-Stuff-Global mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Drag-Stuff mode is enabled in all buffers where
`turn-on-drag-stuff-mode' would do it.
See `drag-stuff-mode' for more information on Drag-Stuff mode.

(fn &optional ARG)" t nil)(autoload 'link-hint-define-type "link-hint" "Add a new type of link called NAME to link-hint.el.
PROPERTIES should be property value pairs to add to the symbol plist of
link-hint-NAME.

(fn NAME &rest PROPERTIES)" nil nil)(function-put 'link-hint-define-type 'lisp-indent-function 'defun)(autoload 'link-hint-open-link "link-hint" "Use avy to open a visible link." t nil)(autoload 'link-hint-copy-link "link-hint" "Copy a visible link of a supported type to the kill ring with avy.
`select-enable-clipboard' and `select-enable-primary' can be set to non-nil
values to copy the link to the clipboard and/or primary as well." t nil)(autoload 'link-hint-open-multiple-links "link-hint" "Use avy to open multiple visible links at once." t nil)(autoload 'link-hint-copy-multiple-links "link-hint" "Use avy to copy multiple visible links at once to the kill ring." t nil)(autoload 'link-hint-open-all-links "link-hint" "Open all visible links." t nil)(autoload 'link-hint-copy-all-links "link-hint" "Copy all visible links." t nil)(autoload 'link-hint-open-link-at-point "link-hint" "Open the link with the highest priority at the point." t nil)(defvar ansible-key-map (make-sparse-keymap) "Keymap for Ansible.")(autoload 'ansible "ansible" "Ansible minor mode.

If called interactively, enable Ansible mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'ansible-dict-initialize "ansible" "Initialize Ansible auto-complete." nil nil)(autoload 'ansible-doc "ansible-doc" "Show ansible documentation for MODULE.

(fn MODULE)" t nil)(autoload 'ansible-doc-mode "ansible-doc" "Minor mode for Ansible documentation.

When called interactively, toggle `ansible-doc-mode'.  With
prefix ARG, enable `ansible-doc-mode' if ARG is positive,
otherwise disable it.

When called from Lisp, enable `ansible-doc-mode' if ARG is
omitted, nil or positive.  If ARG is `toggle', toggle
`ansible-doc-mode'.  Otherwise behave as if called interactively.

In `ansible-doc-mode' provide the following keybindings for
Ansible documentation lookup:

\\{ansible-doc-mode-map}

(fn &optional ARG)" t nil)(autoload 'jinja2-mode "jinja2-mode" "Major mode for editing jinja2 files

(fn)" t nil)(let ((loads (get 'yaml 'custom-loads))) (if (member '"yaml-mode" loads) nil (put 'yaml 'custom-loads (cons '"yaml-mode" loads))))(autoload 'yaml-mode "yaml-mode" "Simple mode to edit YAML.

\\{yaml-mode-map}

(fn)" t nil)(autoload 'company-ansible "company-ansible" "Company backend for ansible yaml files.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'docker "docker" nil t)(autoload 'docker-compose "docker-compose" nil t)(autoload 'docker-container-eshell "docker-container" "Open `eshell' in CONTAINER.

(fn CONTAINER)" t nil)(autoload 'docker-container-find-directory "docker-container" "Inside CONTAINER open DIRECTORY.

(fn CONTAINER DIRECTORY)" t nil)(autoload 'docker-container-find-file "docker-container" "Open FILE inside CONTAINER.

(fn CONTAINER FILE)" t nil)(autoload 'docker-container-shell "docker-container" "Open `shell' in CONTAINER.  When READ-SHELL is not nil, ask the user for it.

(fn CONTAINER &optional READ-SHELL)" t nil)(autoload 'docker-containers "docker-container" "List docker containers." t nil)(autoload 'docker-image-pull-one "docker-image" "Pull the image named NAME.  If ALL is set, use \"-a\".

(fn NAME &optional ALL)" t nil)(autoload 'docker-images "docker-image" "List docker images." t nil)(autoload 'docker-machine-create "docker-machine" "Create a machine NAME using DRIVER.

(fn NAME DRIVER)" t nil)(autoload 'docker-machine-env-one "docker-machine" "Parse and set environment variables from \"docker-machine env NAME\" output.

(fn NAME)" t nil)(autoload 'docker-machines "docker-machine" "List docker machines." t nil)(autoload 'docker-networks "docker-network" "List docker networks." t nil)(autoload 'docker-volume-dired "docker-volume" "Enter `dired' in the volume named NAME.

(fn NAME)" t nil)(autoload 'docker-volumes "docker-volume" "List docker volumes." t nil)(defvar docker-tramp-docker-options nil "List of docker options.")(defconst docker-tramp-completion-function-alist '((docker-tramp--parse-running-containers "")) "Default list of (FUNCTION FILE) pairs to be examined for docker method.")(defconst docker-tramp-method "docker" "Method to connect docker containers.")(autoload 'docker-tramp-cleanup "docker-tramp" "Cleanup TRAMP cache for docker method." t nil)(autoload 'docker-tramp-add-method "docker-tramp" "Add docker tramp method." nil nil)(eval-after-load 'tramp '(progn (docker-tramp-add-method) (tramp-set-completion-function docker-tramp-method docker-tramp-completion-function-alist)))(defconst json-mode-standard-file-ext '(".json" ".jsonld") "List of JSON file extensions.")(defsubst json-mode--update-auto-mode (filenames) "Update the `json-mode' entry of `auto-mode-alist'.

FILENAMES should be a list of file as string.
Return the new `auto-mode-alist' entry" (let* ((new-regexp (rx-to-string `(seq (eval (cons 'or (append json-mode-standard-file-ext ',filenames))) eot))) (new-entry (cons new-regexp 'json-mode)) (old-entry (when (boundp 'json-mode--auto-mode-entry) json-mode--auto-mode-entry))) (setq auto-mode-alist (delete old-entry auto-mode-alist)) (add-to-list 'auto-mode-alist new-entry) new-entry))(defvar json-mode-auto-mode-list '(".babelrc" ".bowerrc" "composer.lock") "List of filename as string to pass for the JSON entry of
`auto-mode-alist'.

Note however that custom `json-mode' entries in `auto-mode-alist'
won’t be affected.")(defvar json-mode--auto-mode-entry (json-mode--update-auto-mode json-mode-auto-mode-list) "Regexp generated from the `json-mode-auto-mode-list'.")(autoload 'json-mode "json-mode" "Major mode for editing JSON files

(fn)" t nil)(add-to-list 'magic-fallback-mode-alist '("^[{[]$" . json-mode))(autoload 'json-mode-show-path "json-mode" "Print the path to the node at point to the minibuffer, and yank to the kill ring." t nil)(autoload 'json-mode-kill-path "json-mode" nil t nil)(autoload 'json-mode-beautify "json-mode" "Beautify / pretty-print the active region (or the entire buffer if no active region)." t nil)(autoload 'json-reformat-region "json-reformat" "Reformat the JSON in the specified region.

If you want to customize the reformat style,
please see the documentation of `json-reformat:indent-width'
and `json-reformat:pretty-string?'.

(fn BEGIN END)" t nil)(autoload 'jsons-print-path "json-snatcher" "Print the path to the JSON value under point, and save it in the kill ring." t nil)(autoload 'tablist-minor-mode "tablist" "Toggle Tablist minor mode on or off.

If called interactively, enable Tablist minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\\{tablist-minor-mode-map}

(fn &optional ARG)" t nil)(autoload 'tablist-mode "tablist" "

(fn)" t nil)(autoload 'dockerfile-build-buffer "dockerfile-mode" "Build an image called IMAGE-NAME based upon the buffer.

If prefix arg NO-CACHE is set, don't cache the image.
The build string will be of the format:
`sudo docker build --no-cache --tag IMAGE-NAME --build-args arg1.. -f filename directory`

(fn IMAGE-NAME &optional NO-CACHE)" t nil)(autoload 'dockerfile-build-no-cache-buffer "dockerfile-mode" "Build an image called IMAGE-NAME based upon the buffer without cache.

(fn IMAGE-NAME)" t nil)(autoload 'dockerfile-mode "dockerfile-mode" "A major mode to edit Dockerfiles.
\\{dockerfile-mode-map}

(fn)" t nil)(autoload 'editorconfig-apply "editorconfig" "Get and apply EditorConfig properties to current buffer.

This function does not respect the values of `editorconfig-exclude-modes' and
`editorconfig-exclude-regexps' and always applies available properties.
Use `editorconfig-mode-apply' instead to make use of these variables." t nil)(defvar editorconfig-mode nil "Non-nil if Editorconfig mode is enabled.
See the `editorconfig-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `editorconfig-mode'.")(autoload 'editorconfig-mode "editorconfig" "Toggle EditorConfig feature.

If called interactively, enable Editorconfig mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

To disable EditorConfig in some buffers, modify
`editorconfig-exclude-modes' or `editorconfig-exclude-regexps'.

(fn &optional ARG)" t nil)(autoload 'editorconfig-find-current-editorconfig "editorconfig" "Find the closest .editorconfig file for current file." t nil)(autoload 'editorconfig-display-current-properties "editorconfig" "Display EditorConfig properties extracted for current buffer." t nil)(defalias 'describe-editorconfig-properties 'editorconfig-display-current-properties)(autoload 'editorconfig-format-buffer "editorconfig" "Format buffer according to .editorconfig indent_style and indent_width." t nil)(autoload 'editorconfig-version "editorconfig" "Get EditorConfig version as string.

If called interactively or if SHOW-VERSION is non-nil, show the
version in the echo area and the messages buffer.

(fn &optional SHOW-VERSION)" t nil)(autoload 'editorconfig-conf-mode "editorconfig-conf-mode" "Major mode for editing .editorconfig files.

(fn)" t nil)(autoload 'editorconfig-core-get-nearest-editorconfig "editorconfig-core" "Return path to .editorconfig file that is closest to DIRECTORY.

(fn DIRECTORY)" nil nil)(autoload 'editorconfig-core-get-properties "editorconfig-core" "Get EditorConfig properties for FILE.
If FILE is not given, use currently visiting file.
Give CONFNAME for basename of config file other than .editorconfig.
If need to specify config format version, give CONFVERSION.

This functions returns alist of properties.  Each element will look like
'(KEY . VALUE) .

(fn &optional FILE CONFNAME CONFVERSION)" nil nil)(autoload 'editorconfig-core-get-properties-hash "editorconfig-core" "Get EditorConfig properties for FILE.
If FILE is not given, use currently visiting file.
Give CONFNAME for basename of config file other than .editorconfig.
If need to specify config format version, give CONFVERSION.

This function is almost same as `editorconfig-core-get-properties', but returns
hash object instead.

(fn &optional FILE CONFNAME CONFVERSION)" nil nil)(autoload 'editorconfig-fnmatch-p "editorconfig-fnmatch" "Test whether STRING match PATTERN.

Matching ignores case if `case-fold-search' is non-nil.

PATTERN should be a shell glob pattern, and some zsh-like wildcard matchings can
be used:

*           Matches any string of characters, except path separators (/)
**          Matches any string of characters
?           Matches any single character
[name]      Matches any single character in name
[^name]     Matches any single character not in name
{s1,s2,s3}  Matches any of the strings given (separated by commas)
{min..max}  Matches any number between min and max

(fn STRING PATTERN)" nil nil)(autoload 'makefile-executor-execute-target "makefile-executor" "Execute a Makefile target from FILENAME.

FILENAME defaults to current buffer.

(fn FILENAME &optional TARGET)" t nil)(autoload 'makefile-executor-execute-project-target "makefile-executor" "Choose a Makefile target from all of the Makefiles in the project.

If there are several Makefiles, a prompt to select one of them is shown.
If so, the parent directory of the closest Makefile is added
as initial input for convenience in executing the most relevant Makefile." t nil)(autoload 'makefile-executor-execute-dedicated-buffer "makefile-executor" "Runs a makefile target in a dedicated compile buffer.

The dedicated buffer will be named \"*<target>*\".  If
`projectile' is installed and the makefile is in a project the
project name will be prepended to the dedicated buffer name.

(fn FILENAME &optional TARGET)" t nil)(autoload 'makefile-executor-execute-last "makefile-executor" "Execute the most recently executed Makefile target.

If none is set, prompt for it using
`makefile-executor-execute-project-target'.  If the universal
argument is given, always prompt.

(fn ARG)" t nil)(autoload 'makefile-executor-goto-makefile "makefile-executor" "Interactively choose a Makefile to visit." t nil)(autoload 'go-eldoc-setup "go-eldoc" "Set up eldoc function and enable eldoc-mode." t nil)(autoload 'go-mode "go-mode" "Major mode for editing Go source text.

This mode provides (not just) basic editing capabilities for
working with Go code. It offers almost complete syntax
highlighting, indentation that is almost identical to gofmt and
proper parsing of the buffer content to allow features such as
navigation by function, manipulation of comments or detection of
strings.

In addition to these core features, it offers various features to
help with writing Go code. You can directly run buffer content
through gofmt, read godoc documentation from within Emacs, modify
and clean up the list of package imports or interact with the
Playground (uploading and downloading pastes).

The following extra functions are defined:

- `gofmt'
- `godoc' and `godoc-at-point'
- `go-import-add'
- `go-remove-unused-imports'
- `go-goto-arguments'
- `go-goto-docstring'
- `go-goto-function'
- `go-goto-function-name'
- `go-goto-imports'
- `go-goto-return-values'
- `go-goto-method-receiver'
- `go-play-buffer' and `go-play-region'
- `go-download-play'
- `godef-describe' and `godef-jump'
- `go-coverage'
- `go-set-project'
- `go-reset-gopath'

If you want to automatically run `gofmt' before saving a file,
add the following hook to your emacs configuration:

(add-hook 'before-save-hook #'gofmt-before-save)

If you want to use `godef-jump' instead of etags (or similar),
consider binding godef-jump to `M-.', which is the default key
for `find-tag':

(add-hook 'go-mode-hook (lambda ()
                          (local-set-key (kbd \"M-.\") #'godef-jump)))

Please note that godef is an external dependency. You can install
it with

go get github.com/rogpeppe/godef


If you're looking for even more integration with Go, namely
on-the-fly syntax checking, auto-completion and snippets, it is
recommended that you look at flycheck
(see URL `https://github.com/flycheck/flycheck') or flymake in combination
with goflymake (see URL `https://github.com/dougm/goflymake'), gocode
(see URL `https://github.com/nsf/gocode'), go-eldoc
(see URL `github.com/syohex/emacs-go-eldoc') and yasnippet-go
(see URL `https://github.com/dominikh/yasnippet-go')

(fn)" t nil)(autoload 'gofmt-before-save "go-mode" "Add this to .emacs to run gofmt on the current buffer when saving:
(add-hook 'before-save-hook 'gofmt-before-save).

Note that this will cause ‘go-mode’ to get loaded the first time
you save any file, kind of defeating the point of autoloading." t nil)(autoload 'godoc "go-mode" "Show Go documentation for QUERY, much like \\<go-mode-map>\\[man].

(fn QUERY)" t nil)(autoload 'go-download-play "go-mode" "Download a paste from the playground and insert it in a Go buffer.
Tries to look for a URL at point.

(fn URL)" t nil)(autoload 'go-dot-mod-mode "go-mode" "A major mode for editing go.mod files.

(fn)" t nil)(autoload 'go-guru-set-scope "go-guru" "Set the scope for the Go guru, prompting the user to edit the previous scope.

The scope restricts analysis to the specified packages.
Its value is a comma-separated list of patterns of these forms:
	golang.org/x/tools/cmd/guru     # a single package
	golang.org/x/tools/...          # all packages beneath dir
	...                             # the entire workspace.

A pattern preceded by '-' is negative, so the scope
	encoding/...,-encoding/xml
matches all encoding packages except encoding/xml." t nil)(autoload 'go-guru-callees "go-guru" "Show possible callees of the function call at the current point." t nil)(autoload 'go-guru-callers "go-guru" "Show the set of callers of the function containing the current point." t nil)(autoload 'go-guru-callstack "go-guru" "Show an arbitrary path from a root of the call graph to the
function containing the current point." t nil)(autoload 'go-guru-definition "go-guru" "Jump to the definition of the selected identifier.

(fn &optional OTHER-WINDOW)" t nil)(autoload 'go-guru-definition-other-window "go-guru" "Jump to the defintion of the selected identifier in another window" t nil)(autoload 'go-guru-describe "go-guru" "Describe the selected syntax, its kind, type and methods." t nil)(autoload 'go-guru-pointsto "go-guru" "Show what the selected expression points to." t nil)(autoload 'go-guru-implements "go-guru" "Describe the 'implements' relation for types in the package
containing the current point." t nil)(autoload 'go-guru-freevars "go-guru" "Enumerate the free variables of the current selection." t nil)(autoload 'go-guru-peers "go-guru" "Enumerate the set of possible corresponding sends/receives for
this channel receive/send operation." t nil)(autoload 'go-guru-referrers "go-guru" "Enumerate all references to the object denoted by the selected
identifier." t nil)(autoload 'go-guru-whicherrs "go-guru" "Show globals, constants and types to which the selected
expression (of type 'error') may refer." t nil)(autoload 'go-guru-unhighlight-identifiers "go-guru" "Remove highlights from previously highlighted identifier." nil nil)(autoload 'go-guru-hl-identifier "go-guru" "Highlight all instances of the identifier under point. Removes
highlights from previously highlighted identifier." t nil)(autoload 'go-guru-hl-identifier-mode "go-guru" "Highlight instances of the identifier at point after a short
timeout.

If called interactively, enable Go-Guru-Hl-Identifier mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'gorepl-mode "gorepl-mode" "A minor mode for run a go repl on top of gore

If called interactively, enable Gorepl mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'go-tag-open-github "go-tag" "go-tag open Github page." t nil)(autoload 'go-tag-refresh "go-tag" "Refresh field TAGS for struct fields.

(fn TAGS)" t nil)(autoload 'go-tag-add "go-tag" "Add field TAGS for struct fields.

(fn TAGS)" t nil)(autoload 'go-tag-remove "go-tag" "Remove field TAGS for struct fields.

(fn TAGS)" t nil)(autoload 'go-gen-test-dwim "go-gen-test" "(go-gen-test-dwim &optional START END)
Generate tests for functions you want to.
If you call this function while region is active it extracts
functions defined between START and END and generate tests for it.
Else it generates tests for exported or all functions.
You can customize this behavior with `go-gen-test-default-functions'.

(fn &optional START END)" t nil)(autoload 'go-gen-test-all "go-gen-test" "(go-gen-test-all)
Generate tests for all functions." t nil)(autoload 'go-gen-test-exported "go-gen-test" "(go-gen-test-exported)
Generate tests for all exported functions." t nil)(autoload 'company-go "company-go" "

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'flycheck-golangci-lint-setup "flycheck-golangci-lint" "Setup Flycheck GolangCI-Lint.
Add `golangci-lint' to `flycheck-checkers'." t nil)(autoload 'counsel-jq "counsel-jq" "Counsel interface for dynamically querying jq. Whenever you're happy with the query, hit RET and the results will be displayed to you in the buffer *jq-json*." t nil)(autoload 'android-mode "android-mode" "Android application development minor mode.

If called interactively, enable Android mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'groovy-electric-mode "groovy-electric" "Toggle Groovy Electric minor mode.
With no argument, this command toggles the mode.  Non-null prefix
argument turns on the mode.  Null prefix argument turns off the
mode.

If called interactively, enable Groovy-Electric mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

When Groovy Electric mode is enabled, simple, double and back
quotes as well as braces are paired auto-magically. Expansion
does not occur inside comments and strings. Note that you must
have Font Lock enabled. ${ } is expanded when in a GString

(fn &optional ARG)" t nil)(autoload 'groovy-mode "groovy-mode" "Major mode for editing Groovy code.

The hook `groovy-mode-hook' is run with no args at mode
initialization.

Key bindings:
\\{groovy-mode-map}

(fn)" t nil)(autoload 'inf-groovy-keys "inf-groovy" "Set local key defs for inf-groovy in groovy-mode" nil nil)(autoload 'inferior-groovy-mode "inf-groovy" "Major mode for interacting with an inferior groovy (groovysh) process.

The following commands are available:
\\{inferior-groovy-mode-map}

A groovy process can be fired up with M-x run-groovy.

Customisation: Entry to this mode runs the hooks on comint-mode-hook and
inferior-groovy-mode-hook (in that order).

You can send text to the inferior groovy process from other buffers containing
Groovy source.
    switch-to-groovy switches the current buffer to the groovy process buffer.
    groovy-send-definition sends the current definition to the groovy process.
    groovy-send-region sends the current region to the groovy process.

    groovy-send-definition-and-go, groovy-send-region-and-go,
        switch to the groovy process buffer after sending their text.
For information on running multiple processes in multiple buffers, see
documentation for variable groovy-buffer.

Commands:
Return after the end of the process' output sends the text from the
    end of process to point.
Return before the end of the process' output copies the sexp ending at point
    to the end of the process' output, and sends it.
Delete converts tabs to spaces as it moves back.
Tab indents for groovy; with argument, shifts rest
    of expression rigidly with the current line.
C-M-q does Tab on each line starting within following expression.
Paragraphs are separated only by blank lines.  # start comments.
If you accidentally suspend your process, use \\[comint-continue-subjob]
to continue it." t nil)(autoload 'run-groovy "inf-groovy" "Run an inferior Groovy process, input and output via buffer *groovy*.
If there is a process already running in *groovy*, switch to that buffer.
With a prefix argument, prompt for the groovysh path and arguments
(see variables `groovysh' and `groovysh-args' for the defaults).

Runs the hook `inferior-groovy-mode-hook' (after the
`comint-mode-hook' is run).  Type \\[describe-mode] in the
process buffer for a list of commands.

(fn CMD)" t nil)(eval-after-load 'groovy-mode (lambda nil (add-hook 'groovy-mode-hook 'inf-groovy-keys)))(autoload 'meghanada-company-enable "company-meghanada" "Enable auto completion with company." nil nil)(autoload 'eldoc-meghanada-setup "eldoc-meghanada" "Set up eldoc function and enable 'eldoc-mode'." t nil)(autoload 'meghanada-eldoc-enable "eldoc-meghanada" "Enable eldoc for meghanada-mode." nil nil)(autoload 'meghanada-flycheck-enable "flycheck-meghanada" "Enable flycheck for meghanada-mode." nil nil)(autoload 'meghanada-install-server "meghanada" "Install meghanada-server's jar file from bintray ." t nil)(autoload 'meghanada-update-server "meghanada" "Update meghanada-server's jar file from bintray ." t nil)(autoload 'meghanada-server-start "meghanada" "Start the meghanada server." t nil)(autoload 'meghanada-server-kill "meghanada" "Kill the meghanada server." t nil)(autoload 'meghanada-client-direct-connect "meghanada" "Connect the client to a server that is already running." t nil)(autoload 'meghanada-client-connect "meghanada" "Start the server and connect the client" t nil)(autoload 'meghanada-client-disconnect "meghanada" "Disconnecting the client." t nil)(autoload 'meghanada-restart "meghanada" "Restart meghanada server and client." t nil)(autoload 'meghanada-mode "meghanada" "A better java development mode for Emacs (minor-mode).
\\{meghanada-mode-map}

If called interactively, enable Meghanada mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'org-babel-execute:restclient "ob-restclient" "Execute a block of Restclient code with org-babel.
This function is called by `org-babel-execute-src-block'

(fn BODY PARAMS)" nil nil)(autoload 'restclient-http-send-current "restclient" "Sends current request.
Optional argument RAW don't reformat response if t.
Optional argument STAY-IN-WINDOW do not move focus to response buffer if t.

(fn &optional RAW STAY-IN-WINDOW)" t nil)(autoload 'restclient-http-send-current-raw "restclient" "Sends current request and get raw result (no reformatting or syntax highlight of XML, JSON or images)." t nil)(autoload 'restclient-http-send-current-stay-in-window "restclient" "Send current request and keep focus in request window." t nil)(autoload 'restclient-mode "restclient" "Turn on restclient mode.

(fn)" t nil)(autoload 'pip-requirements-auto-complete-setup "pip-requirements" "Setup Auto-Complete for Pip Requirements.

See URL `https://github.com/auto-complete/auto-complete' for
information about Auto Complete." nil nil)(autoload 'pip-requirements-mode "pip-requirements" "Major mode for editing pip requirements files.

(fn)" t nil)(autoload 'anaconda-mode "anaconda-mode" "Code navigation, documentation lookup and completion for Python.

If called interactively, enable Anaconda mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

\\{anaconda-mode-map}

(fn &optional ARG)" t nil)(autoload 'anaconda-eldoc-mode "anaconda-mode" "Toggle echo area display of Python objects at point.

If called interactively, enable Anaconda-Eldoc mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'pythonic-activate "pythonic" "Activate python VIRTUALENV.

(fn VIRTUALENV)" t nil)(autoload 'pythonic-deactivate "pythonic" "Deactivate python virtual environment." t nil)(autoload 'company-anaconda "company-anaconda" "Anaconda backend for company-mode.
See `company-backends' for more info about COMMAND and ARG.

(fn COMMAND &optional ARG &rest ARGS)" t nil)(autoload 'pipenv-mode "pipenv" "Minor mode for Pipenv.

If called interactively, enable Pipenv mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'pyvenv-activate "pyvenv" "Activate the virtual environment in DIRECTORY.

(fn DIRECTORY)" t nil)(autoload 'pyvenv-deactivate "pyvenv" "Deactivate any current virtual environment." t nil)(autoload 'pyvenv-workon "pyvenv" "Activate a virtual environment from $WORKON_HOME.

If the virtual environment NAME is already active, this function
does not try to reactivate the environment.

(fn NAME)" t nil)(defvar pyvenv-mode nil "Non-nil if Pyvenv mode is enabled.
See the `pyvenv-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pyvenv-mode'.")(autoload 'pyvenv-mode "pyvenv" "Global minor mode for pyvenv.

If called interactively, enable Pyvenv mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

Will show the current virtualenv in the mode line, and respect a
`pyvenv-workon' setting in files.

(fn &optional ARG)" t nil)(defvar pyvenv-tracking-mode nil "Non-nil if Pyvenv-Tracking mode is enabled.
See the `pyvenv-tracking-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pyvenv-tracking-mode'.")(autoload 'pyvenv-tracking-mode "pyvenv" "Global minor mode to track the current virtualenv.

If called interactively, enable Pyvenv-Tracking mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

When this mode is active, pyvenv will activate a buffer-specific
virtualenv whenever the user switches to a buffer with a
buffer-local `pyvenv-workon' or `pyvenv-activate' variable.

(fn &optional ARG)" t nil)(autoload 'pyvenv-restart-python "pyvenv" "Restart Python inferior processes." t nil)(autoload 'python-pytest-dispatch "python-pytest" nil t)(autoload 'python-pytest "python-pytest" "Run pytest with ARGS.

With a prefix argument, allow editing.

(fn &optional ARGS)" t nil)(autoload 'python-pytest-file "python-pytest" "Run pytest on FILE, using ARGS.

Additional ARGS are passed along to pytest.
With a prefix argument, allow editing.

(fn FILE &optional ARGS)" t nil)(autoload 'python-pytest-file-dwim "python-pytest" "Run pytest on FILE, intelligently finding associated test modules.

When run interactively, this tries to work sensibly using
the current file.

Additional ARGS are passed along to pytest.
With a prefix argument, allow editing.

(fn FILE &optional ARGS)" t nil)(autoload 'python-pytest-files "python-pytest" "Run pytest on FILES, using ARGS.

When run interactively, this allows for interactive file selection.

Additional ARGS are passed along to pytest.
With a prefix argument, allow editing.

(fn FILES &optional ARGS)" t nil)(autoload 'python-pytest-directories "python-pytest" "Run pytest on DIRECTORIES, using ARGS.

When run interactively, this allows for interactive directory selection.

Additional ARGS are passed along to pytest.
With a prefix argument, allow editing.

(fn DIRECTORIES &optional ARGS)" t nil)(autoload 'python-pytest-function "python-pytest" "Run pytest on FILE with FUNC (or class).

Additional ARGS are passed along to pytest.
With a prefix argument, allow editing.

(fn FILE FUNC ARGS)" t nil)(autoload 'python-pytest-function-dwim "python-pytest" "Run pytest on FILE with FUNC (or class).

When run interactively, this tries to work sensibly using
the current file and function around point.

Additional ARGS are passed along to pytest.
With a prefix argument, allow editing.

(fn FILE FUNC ARGS)" t nil)(autoload 'python-pytest-last-failed "python-pytest" "Run pytest, only executing previous test failures.

Additional ARGS are passed along to pytest.
With a prefix argument, allow editing.

(fn &optional ARGS)" t nil)(autoload 'python-pytest-repeat "python-pytest" "Run pytest with the same argument as the most recent invocation.

With a prefix ARG, allow editing." t nil)(autoload 'pyimport-insert-missing "pyimport" "Try to insert an import for the symbol at point.
If called with a prefix, choose which import to use.

This is a simple heuristic: we just look for imports in all open Python buffers.

(fn PREFIX)" t nil)(autoload 'pyimport-remove-unused "pyimport" "Remove unused imports in the current Python buffer." t nil)(autoload 'shut-up "shut-up" "Evaluate BODY with silenced output.

While BODY is evaluated, all output is redirected to a buffer,
unless `shut-up-ignore' is non-nil.  This affects:

- `message'
- All functions using `standard-output' (e.g. `print', `princ', etc.)

Inside BODY, the buffer is bound to the lexical variable
`shut-up-sink'.  Additionally provide a lexical function
`shut-up-current-output', which returns the current contents of
`shut-up-sink' when called with no arguments.

Changes to the variable `shut-up-ignore' inside BODY does not
have any affect.

(fn &rest BODY)" nil t)(function-put 'shut-up 'lisp-indent-function '0)(autoload 'shut-up-silence-emacs "shut-up" "Silence Emacs.

Change Emacs settings to reduce the output.

WARNING: This function has GLOBAL SIDE-EFFECTS.  You should only
call this function in `noninteractive' sessions." nil nil)(autoload 'py-isort-region "py-isort" "Uses the \"isort\" tool to reformat the current region." t nil)(autoload 'py-isort-buffer "py-isort" "Uses the \"isort\" tool to reformat the current buffer." t nil)(autoload 'py-isort-before-save "py-isort" nil t nil)(autoload 'company-restclient "company-restclient" "`company-mode' completion back-end for `restclient-mode'.
Provide completion info according to COMMAND and ARG.  IGNORED, not used.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'http-header "http-headers" "Display the meaning of an HTTP header

(fn HEADER)" t nil)(autoload 'http-method "http-methods" "Display the meaning of an HTTP method

(fn METHOD)" t nil)(autoload 'http-relation "http-relations" "Display the meaning of an HTTP relation

(fn RELATION)" t nil)(autoload 'http-status-code "http-status-codes" "Display the meaning of an HTTP status code or phrase

(fn STATUS)" t nil)(autoload 'media-type "media-types" "Display the template of a media-type

(fn MEDIA-TYPE)" t nil)(autoload 'highlight-indent-guides-auto-set-faces "highlight-indent-guides" "Automatically calculate indent guide faces.
If this feature is enabled, calculate reasonable values for the indent guide
colors based on the current theme's colorscheme, and set them appropriately.
This runs whenever a theme is loaded, but it can also be run interactively." t nil)(autoload 'highlight-indent-guides-mode "highlight-indent-guides" "Display indent guides in a buffer.

If called interactively, enable Highlight-Indent-Guides mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'neotree-find "neotree" "Quick select node which specified PATH in NeoTree.
If path is nil and no buffer file name, then use DEFAULT-PATH,

(fn &optional PATH DEFAULT-PATH)" t nil)(autoload 'neotree-projectile-action "neotree" "Integration with `Projectile'.

Usage:
    (setq projectile-switch-project-action 'neotree-projectile-action).

When running `projectile-switch-project' (C-c p p), `neotree' will change root
automatically." t nil)(autoload 'neotree-toggle "neotree" "Toggle show the NeoTree window." t nil)(autoload 'neotree-show "neotree" "Show the NeoTree window." t nil)(autoload 'neotree-hide "neotree" "Close the NeoTree window." t nil)(autoload 'neotree-dir "neotree" "Show the NeoTree window, and change root to PATH.

(fn PATH)" t nil)(defalias 'neotree 'neotree-show "Show the NeoTree window.")(let ((loads (get 'unicode-fonts 'custom-loads))) (if (member '"unicode-fonts" loads) nil (put 'unicode-fonts 'custom-loads (cons '"unicode-fonts" loads))))(let ((loads (get 'unicode-fonts-tweaks 'custom-loads))) (if (member '"unicode-fonts" loads) nil (put 'unicode-fonts-tweaks 'custom-loads (cons '"unicode-fonts" loads))))(let ((loads (get 'unicode-fonts-debug 'custom-loads))) (if (member '"unicode-fonts" loads) nil (put 'unicode-fonts-debug 'custom-loads (cons '"unicode-fonts" loads))))(autoload 'unicode-fonts-first-existing-font "unicode-fonts" "Return the (normalized) first existing font name from FONT-NAMES.

FONT-NAMES is a list, with each element typically in Fontconfig
font-name format.

The font existence-check is lazy; fonts after the first hit are
not checked.

(fn FONT-NAMES)" nil nil)(autoload 'unicode-fonts-font-exists-p "unicode-fonts" "Run `font-utils-exists-p' with a limited scope.

The scope is defined by `unicode-fonts-restrict-to-fonts'.

FONT-NAME, POINT-SIZE, and STRICT are as documented at
`font-utils-exists-p'.

(fn FONT-NAME &optional POINT-SIZE STRICT)" nil nil)(autoload 'unicode-fonts-read-block-name "unicode-fonts" "Read a Unicode block name using `completing-read'.

Spaces are replaced with underscores in completion values, but
are removed from the return value.

Use `ido-completing-read' if IDO is set.

(fn &optional IDO)" nil nil)(autoload 'unicode-fonts-setup "unicode-fonts" "Set up Unicode fonts for FONTSET-NAMES.

Optional FONTSET-NAMES must be a list of strings.  Fontset names
which do not currently exist will be ignored.  The default value
is `unicode-fonts-fontset-names'.

Optional REGENERATE requests that the disk cache be invalidated
and regenerated.

(fn &optional FONTSET-NAMES REGENERATE)" t nil)(let ((loads (get 'font-utils 'custom-loads))) (if (member '"font-utils" loads) nil (put 'font-utils 'custom-loads (cons '"font-utils" loads))))(autoload 'font-utils-client-hostname "font-utils" "Guess the client hostname, respecting $SSH_CONNECTION." nil nil)(autoload 'font-utils-name-from-xlfd "font-utils" "Return the font-family name from XLFD, a string.

This function accounts for the fact that the XLFD
delimiter, \"-\", is a legal character within fields.

(fn XLFD)" nil nil)(autoload 'font-utils-parse-name "font-utils" "Parse FONT-NAME which may contain fontconfig-style specifications.

Returns two-element list.  The car is the font family name as a string.
The cadr is the specifications as a normalized and sorted list.

(fn FONT-NAME)" nil nil)(autoload 'font-utils-normalize-name "font-utils" "Normalize FONT-NAME which may contain fontconfig-style specifications.

(fn FONT-NAME)" nil nil)(autoload 'font-utils-lenient-name-equal "font-utils" "Leniently match two strings, FONT-NAME-A and FONT-NAME-B.

(fn FONT-NAME-A FONT-NAME-B)" nil nil)(autoload 'font-utils-is-qualified-variant "font-utils" "Whether FONT-NAME-1 and FONT-NAME-2 are different variants of the same font.

Qualifications are fontconfig-style specifications added to a
font name, such as \":width=condensed\".

To return t, the font families must be identical, and the
qualifications must differ.  If FONT-NAME-1 and FONT-NAME-2 are
identical, returns nil.

(fn FONT-NAME-1 FONT-NAME-2)" nil nil)(autoload 'font-utils-list-names "font-utils" "Return a list of all font names on the current system." nil nil)(autoload 'font-utils-read-name "font-utils" "Read a font name using `completing-read'.

Underscores are removed from the return value.

Uses `ido-completing-read' if optional IDO is set.

(fn &optional IDO)" nil nil)(autoload 'font-utils-exists-p "font-utils" "Test whether FONT-NAME (a string or font object) exists.

FONT-NAME is a string, typically in Fontconfig font-name format.
A font-spec, font-vector, or font-object are accepted, though
the behavior for the latter two is not well defined.

Returns a matching font vector.

When POINT-SIZE is set, check for a specific font size.  Size may
also be given at the end of a string FONT-NAME, eg \"Monaco-12\".

When optional STRICT is given, FONT-NAME must will not be
leniently modified before passing to `font-info'.

Optional SCOPE is a list of font names, within which FONT-NAME
must (leniently) match.

(fn FONT-NAME &optional POINT-SIZE STRICT SCOPE)" nil nil)(autoload 'font-utils-first-existing-font "font-utils" "Return the (normalized) first existing font name from FONT-NAMES.

FONT-NAMES is a list, with each element typically in Fontconfig
font-name format.

The font existence-check is lazy; fonts after the first hit are
not checked.

If NO-NORMALIZE is given, the return value is exactly as the
member of FONT-NAMES.  Otherwise, the family name is extracted
from the XLFD returned by `font-info'.

(fn FONT-NAMES &optional NO-NORMALIZE)" nil nil)(let ((loads (get 'persistent-soft 'custom-loads))) (if (member '"persistent-soft" loads) nil (put 'persistent-soft 'custom-loads (cons '"persistent-soft" loads))))(autoload 'persistent-soft-location-readable "persistent-soft" "Return non-nil if LOCATION is a readable persistent-soft data store.

(fn LOCATION)" nil nil)(autoload 'persistent-soft-location-destroy "persistent-soft" "Destroy LOCATION (a persistent-soft data store).

Returns non-nil on confirmed success.

(fn LOCATION)" nil nil)(autoload 'persistent-soft-exists-p "persistent-soft" "Return t if SYMBOL exists in the LOCATION persistent data store.

This is a noop unless LOCATION is a string and pcache is loaded.

Returns nil on failure, without throwing an error.

(fn SYMBOL LOCATION)" nil nil)(autoload 'persistent-soft-fetch "persistent-soft" "Return the value for SYMBOL in the LOCATION persistent data store.

This is a noop unless LOCATION is a string and pcache is loaded.

Returns nil on failure, without throwing an error.

(fn SYMBOL LOCATION)" nil nil)(autoload 'persistent-soft-flush "persistent-soft" "Flush data for the LOCATION data store to disk.

(fn LOCATION)" nil nil)(autoload 'persistent-soft-store "persistent-soft" "Under SYMBOL, store VALUE in the LOCATION persistent data store.

This is a noop unless LOCATION is a string and pcache is loaded.

Optional EXPIRATION sets an expiry time in seconds.

Returns a true value if storage was successful.  Returns nil
on failure, without throwing an error.

(fn SYMBOL VALUE LOCATION &optional EXPIRATION)" nil nil)(let ((loads (get 'list-utils 'custom-loads))) (if (member '"list-utils" loads) nil (put 'list-utils 'custom-loads (cons '"list-utils" loads))))(require 'cl)(cl-defstruct tconc head tail)(autoload 'tconc-list "list-utils" "Efficiently append LIST to TC.

TC is a data structure created by `make-tconc'.

(fn TC LIST)" nil nil)(autoload 'tconc "list-utils" "Efficiently append ARGS to TC.

TC is a data structure created by `make-tconc'

Without ARGS, return the list held by TC.

(fn TC &rest ARGS)" nil nil)(autoload 'list-utils-cons-cell-p "list-utils" "Return non-nil if CELL holds a cons cell rather than a proper list.

A proper list is defined as a series of cons cells in which the
cdr slot of each cons holds a pointer to the next element of the
list, and the cdr slot in the final cons holds nil.

A plain cons cell, for the purpose of this function, is a single
cons in which the cdr holds data rather than a pointer to the
next cons cell, eg

    '(1 . 2)

In addition, a list which is not nil-terminated is not a proper
list and will be recognized by this function as a cons cell.
Such a list is printed using dot notation for the last two
elements, eg

    '(1 2 3 4 . 5)

Such improper lists are produced by `list*'.

(fn CELL)" nil nil)(autoload 'list-utils-make-proper-copy "list-utils" "Copy a cons cell or improper LIST into a proper list.

If optional TREE is non-nil, traverse LIST, making proper
copies of any improper lists contained within.

Optional RECUR-INTERNAL is for internal use only.

Improper lists consist of proper lists consed to a final
element, and are produced by `list*'.

(fn LIST &optional TREE RECUR-INTERNAL)" nil nil)(autoload 'list-utils-make-proper-inplace "list-utils" "Make a cons cell or improper LIST into a proper list.

Improper lists consist of proper lists consed to a final
element, and are produced by `list*'.

If optional TREE is non-nil, traverse LIST, making any
improper lists contained within into proper lists.

Optional RECUR-INTERNAL is for internal use only.

Modifies LIST and returns the modified value.

(fn LIST &optional TREE RECUR-INTERNAL)" nil nil)(autoload 'list-utils-make-improper-copy "list-utils" "Copy a proper LIST into an improper list.

Improper lists consist of proper lists consed to a final
element, and are produced by `list*'.

If optional TREE is non-nil, traverse LIST, making proper
copies of any improper lists contained within.

Optional RECUR-INTERNAL is for internal use only.

(fn LIST &optional TREE RECUR-INTERNAL)" nil nil)(autoload 'list-utils-make-improper-inplace "list-utils" "Make proper LIST into an improper list.

Improper lists consist of proper lists consed to a final
element, and are produced by `list*'.

If optional TREE is non-nil, traverse LIST, making any
proper lists contained within into improper lists.

Optional RECUR-INTERNAL is for internal use only.

Modifies LIST and returns the modified value.

(fn LIST &optional TREE RECUR-INTERNAL)" nil nil)(autoload 'list-utils-linear-subseq "list-utils" "Return the linear elements from a partially cyclic LIST.

If there is no cycle in LIST, return LIST.  If all elements of
LIST are included in a cycle, return nil.

As an optimization, CYCLE-LENGTH may be specified if the length
of the cyclic portion is already known.  Otherwise it will be
calculated from LIST.

(fn LIST &optional CYCLE-LENGTH)" nil nil)(autoload 'list-utils-cyclic-subseq "list-utils" "Return any cyclic elements from LIST as a circular list.

The first element of the cyclic structure is not guaranteed to be
first element of the return value unless FROM-START is non-nil.

To linearize the return value, use `list-utils-make-linear-inplace'.

If there is no cycle in LIST, return nil.

(fn LIST &optional FROM-START)" nil nil)(autoload 'list-utils-cyclic-length "list-utils" "Return the number of cyclic elements in LIST.

If some portion of LIST is linear, only the cyclic
elements will be counted.

If LIST is completely linear, return 0.

(fn LIST)" nil nil)(autoload 'list-utils-cyclic-p "list-utils" "Return non-nil if LIST contains any cyclic structures.

If optional PERFECT is set, only return non-nil if LIST is a
perfect non-branching cycle in which the last element points
to the first.

(fn LIST &optional PERFECT)" nil nil)(autoload 'list-utils-linear-p "list-utils" "Return non-nil if LIST is linear (no cyclic structure).

(fn LIST)" nil nil)(defalias 'list-utils-improper-p 'list-utils-cons-cell-p)(autoload 'list-utils-safe-length "list-utils" "Return the number of elements in LIST.

LIST may be linear or cyclic.

If LIST is not really a list, returns 0.

If LIST is an improper list, return the number of proper list
elements, like `safe-length'.

(fn LIST)" nil nil)(autoload 'list-utils-flat-length "list-utils" "Count simple elements from the beginning of LIST.

Stop counting when a cons is reached.  nil is not a cons,
and is considered to be a \"simple\" element.

If the car of LIST is a cons, return 0.

(fn LIST)" nil nil)(autoload 'list-utils-make-linear-copy "list-utils" "Return a linearized copy of LIST, which may be cyclic.

If optional TREE is non-nil, traverse LIST, substituting
linearized copies of any cyclic lists contained within.

(fn LIST &optional TREE)" nil nil)(autoload 'list-utils-make-linear-inplace "list-utils" "Linearize LIST, which may be cyclic.

Modifies LIST and returns the modified value.

If optional TREE is non-nil, traverse LIST, linearizing any
cyclic lists contained within.

(fn LIST &optional TREE)" nil nil)(autoload 'list-utils-safe-equal "list-utils" "Compare LIST-1 and LIST-2, which may be cyclic lists.

LIST-1 and LIST-2 may also contain cyclic lists, which are
each traversed and compared.  This function will not infloop
when cyclic lists are encountered.

Non-nil is returned only if the leaves of LIST-1 and LIST-2 are
`equal' and the structure is identical.

Optional TEST specifies a test, defaulting to `equal'.

If LIST-1 and LIST-2 are not actually lists, they are still
compared according to TEST.

(fn LIST-1 LIST-2 &optional TEST)" nil nil)(autoload 'list-utils-depth "list-utils" "Find the depth of LIST, which may contain other lists.

If LIST is not a list or is an empty list, returns a depth
of 0.

If LIST is a cons cell or a list which does not contain other
lists, returns a depth of 1.

(fn LIST)" nil nil)(autoload 'list-utils-flatten "list-utils" "Return a flattened copy of LIST, which may contain other lists.

This function flattens cons cells as lists, and
flattens circular list structures.

(fn LIST)" nil nil)(autoload 'list-utils-insert-before "list-utils" "Look in LIST for ELEMENT and insert NEW-ELEMENT before it.

Optional TEST sets the test used for a matching element, and
defaults to `equal'.

LIST is modified and the new value is returned.

(fn LIST ELEMENT NEW-ELEMENT &optional TEST)" nil nil)(autoload 'list-utils-insert-after "list-utils" "Look in LIST for ELEMENT and insert NEW-ELEMENT after it.

Optional TEST sets the test used for a matching element, and
defaults to `equal'.

LIST is modified and the new value is returned.

(fn LIST ELEMENT NEW-ELEMENT &optional TEST)" nil nil)(autoload 'list-utils-insert-before-pos "list-utils" "Look in LIST for position POS, and insert NEW-ELEMENT before.

POS is zero-indexed.

LIST is modified and the new value is returned.

(fn LIST POS NEW-ELEMENT)" nil nil)(autoload 'list-utils-insert-after-pos "list-utils" "Look in LIST for position POS, and insert NEW-ELEMENT after.

LIST is modified and the new value is returned.

(fn LIST POS NEW-ELEMENT)" nil nil)(autoload 'list-utils-and "list-utils" "Return the elements of LIST1 which are present in LIST2.

This is similar to `cl-intersection' (or `intersection') from
the cl library, except that `list-utils-and' preserves order,
does not uniquify the results, and exhibits more predictable
performance for large lists.

Order will follow LIST1.  Duplicates may be present in the result
as in LIST1.

TEST is an optional comparison function in the form of a
hash-table-test.  The default is `equal'.  Other valid values
include `eq' (built-in), `eql' (built-in), `list-utils-htt-='
(numeric), `list-utils-htt-case-fold-equal' (case-insensitive).
See `define-hash-table-test' to define your own tests.

HINT is an optional micro-optimization, predicting the size of
the list to be hashed (LIST2 unless FLIP is set).

When optional FLIP is set, the sense of the comparison is
reversed.  When FLIP is set, LIST2 will be the guide for the
order of the result, and will determine whether duplicates may
be returned.  Since this function preserves duplicates, setting
FLIP can change the number of elements in the result.

Performance: `list-utils-and' and friends use a general-purpose
hashing approach.  `intersection' and friends use pure iteration.
Iteration can be much faster in a few special cases, especially
when the number of elements is small.  In other scenarios,
iteration can be much slower.  Hashing has no worst-case
performance scenario, although it uses much more memory.  For
heavy-duty list operations, performance may be improved by
`let'ing `gc-cons-threshold' to a high value around sections that
make frequent use of this function.

(fn LIST1 LIST2 &optional TEST HINT FLIP)" nil nil)(autoload 'list-utils-not "list-utils" "Return the elements of LIST1 which are not present in LIST2.

This is similar to `cl-set-difference' (or `set-difference') from
the cl library, except that `list-utils-not' preserves order and
exhibits more predictable performance for large lists.  Order will
follow LIST1.  Duplicates may be present as in LIST1.

TEST is an optional comparison function in the form of a
hash-table-test.  The default is `equal'.  Other valid values
include `eq' (built-in), `eql' (built-in), `list-utils-htt-='
(numeric), `list-utils-htt-case-fold-equal' (case-insensitive).
See `define-hash-table-test' to define your own tests.

HINT is an optional micro-optimization, predicting the size of
the list to be hashed (LIST2 unless FLIP is set).

When optional FLIP is set, the sense of the comparison is
reversed, returning elements of LIST2 which are not present in
LIST1.  When FLIP is set, LIST2 will be the guide for the order
of the result, and will determine whether duplicates may be
returned.

Performance: see notes under `list-utils-and'.

(fn LIST1 LIST2 &optional TEST HINT FLIP)" nil nil)(autoload 'list-utils-xor "list-utils" "Return elements which are only present in either LIST1 or LIST2.

This is similar to `cl-set-exclusive-or' (or `set-exclusive-or')
from the cl library, except that `list-utils-xor' preserves order,
and exhibits more predictable performance for large lists.  Order
will follow LIST1, then LIST2.  Duplicates may be present as in
LIST1 or LIST2.

TEST is an optional comparison function in the form of a
hash-table-test.  The default is `equal'.  Other valid values
include `eq' (built-in), `eql' (built-in), `list-utils-htt-='
(numeric), `list-utils-htt-case-fold-equal' (case-insensitive).
See `define-hash-table-test' to define your own tests.

HINT is an optional micro-optimization, predicting the size of
the list to be hashed (LIST2 unless FLIP is set).

When optional FLIP is set, the sense of the comparison is
reversed, causing order and duplicates to follow LIST2, then
LIST1.

Performance: see notes under `list-utils-and'.

(fn LIST1 LIST2 &optional TEST HINT FLIP)" nil nil)(autoload 'list-utils-uniq "list-utils" "Return a uniquified copy of LIST, preserving order.

This is similar to `cl-remove-duplicates' (or `remove-duplicates')
from the cl library, except that `list-utils-uniq' preserves order,
and exhibits more predictable performance for large lists.  Order
will follow LIST.

TEST is an optional comparison function in the form of a
hash-table-test.  The default is `equal'.  Other valid values
include `eq' (built-in), `eql' (built-in), `list-utils-htt-='
(numeric), `list-utils-htt-case-fold-equal' (case-insensitive).
See `define-hash-table-test' to define your own tests.

HINT is an optional micro-optimization, predicting the size of
LIST.

Performance: see notes under `list-utils-and'.

(fn LIST &optional TEST HINT)" nil nil)(autoload 'list-utils-dupes "list-utils" "Return only duplicated elements from LIST, preserving order.

Duplicated elements may still exist in the result: this function
removes singlets.

TEST is an optional comparison function in the form of a
hash-table-test.  The default is `equal'.  Other valid values
include `eq' (built-in), `eql' (built-in), `list-utils-htt-='
(numeric), `list-utils-htt-case-fold-equal' (case-insensitive).
See `define-hash-table-test' to define your own tests.

HINT is an optional micro-optimization, predicting the size of
LIST.

Performance: see notes under `list-utils-and'.

(fn LIST &optional TEST HINT)" nil nil)(autoload 'list-utils-singlets "list-utils" "Return only singlet elements from LIST, preserving order.

Duplicated elements may not exist in the result.

TEST is an optional comparison function in the form of a
hash-table-test.  The default is `equal'.  Other valid values
include `eq' (built-in), `eql' (built-in), `list-utils-htt-='
(numeric), `list-utils-htt-case-fold-equal' (case-insensitive).
See `define-hash-table-test' to define your own tests.

HINT is an optional micro-optimization, predicting the size of
LIST.

Performance: see notes under `list-utils-and'.

(fn LIST &optional TEST HINT)" nil nil)(autoload 'list-utils-partition-dupes "list-utils" "Partition LIST into duplicates and singlets, preserving order.

The return value is an alist with two keys: 'dupes and 'singlets.
The two values of the alist are lists which, if combined, comprise
a complete copy of the elements of LIST.

Duplicated elements may still exist in the 'dupes partition.

TEST is an optional comparison function in the form of a
hash-table-test.  The default is `equal'.  Other valid values
include `eq' (built-in), `eql' (built-in), `list-utils-htt-='
(numeric), `list-utils-htt-case-fold-equal' (case-insensitive).
See `define-hash-table-test' to define your own tests.

HINT is an optional micro-optimization, predicting the size of
LIST.

Performance: see notes under `list-utils-and'.

(fn LIST &optional TEST HINT)" nil nil)(autoload 'list-utils-alist-or-flat-length "list-utils" "Count simple or cons-cell elements from the beginning of LIST.

Stop counting when a proper list of non-zero length is reached.

If the car of LIST is a list, return 0.

(fn LIST)" nil nil)(autoload 'list-utils-alist-flatten "list-utils" "Flatten LIST, which may contain other lists.  Do not flatten cons cells.

It is not guaranteed that the result contains *only* cons cells.
The result could contain other data types present in LIST.

This function simply avoids flattening single conses or improper
lists where the last two elements would be expressed as a dotted
pair.

(fn LIST)" nil nil)(autoload 'list-utils-plist-reverse "list-utils" "Return reversed copy of property-list PLIST, maintaining pair associations.

(fn PLIST)" nil nil)(autoload 'list-utils-plist-del "list-utils" "Delete from PLIST the property PROP and its associated value.

When PROP is not present in PLIST, there is no effect.

The new plist is returned; use `(setq x (list-utils-plist-del x prop))'
to be sure to use the new value.

This functionality overlaps with the undocumented `cl-do-remf'.

(fn PLIST PROP)" nil nil)(let ((loads (get 'ucs-utils 'custom-loads))) (if (member '"ucs-utils" loads) nil (put 'ucs-utils 'custom-loads (cons '"ucs-utils" loads))))(autoload 'ucs-utils-pretty-name "ucs-utils" "Return a prettified UCS name for CHAR.

Based on `get-char-code-property'.  The result has been
title-cased for readability, and will not match into the
`ucs-utils-names' alist until it has been upcased.
`ucs-utils-char' can be used on the title-cased name.

Returns a hexified string if no name is found.  If NO-HEX is
non-nil, then a nil value will be returned when no name is
found.

(fn CHAR &optional NO-HEX)" nil nil)(autoload 'ucs-utils-all-prettified-names "ucs-utils" "All prettified UCS names, cached in list `ucs-utils-all-prettified-names'.

When optional PROGRESS is given, show progress when generating
cache.

When optional REGENERATE is given, re-generate cache.

(fn &optional PROGRESS REGENERATE)" nil nil)(autoload 'ucs-utils-char "ucs-utils" "Return the character corresponding to NAME, a UCS name.

NAME is matched leniently by `ucs-utils--lookup'.

Returns FALLBACK if NAME does not exist or is not displayable
according to TEST.  FALLBACK may be either a UCS name or
character, or one of the special symbols described in the next
paragraph.

If FALLBACK is nil or 'drop, returns nil on failure.  If FALLBACK
is 'error, throws an error on failure.

TEST is an optional predicate which characters must pass.  A
useful value is 'char-displayable-p, which is available as
the abbreviation 'cdp, unless you have otherwise defined that
symbol.

When NAME is a character, it passes through unchanged, unless
TEST is set, in which case it must pass TEST.

(fn NAME &optional FALLBACK TEST)" nil nil)(autoload 'ucs-utils-first-existing-char "ucs-utils" "Return the first existing character from SEQUENCE of character names.

TEST is an optional predicate which characters must pass.  A
useful value is 'char-displayable-p, which is available as
the abbreviation 'cdp, unless you have otherwise defined that
symbol.

(fn SEQUENCE &optional TEST)" nil nil)(autoload 'ucs-utils-vector "ucs-utils" "Return a vector corresponding to SEQUENCE of UCS names or characters.

If SEQUENCE is a single string or character, it will be coerced
to a list of length 1.  Each name in SEQUENCE is matched
leniently by `ucs-utils--lookup'.

FALLBACK should be a sequence of equal length to SEQUENCE, (or
one of the special symbols described in the next paragraph).  For
any element of SEQUENCE which does not exist or is not
displayable according to TEST, that element degrades to the
corresponding element of FALLBACK.

When FALLBACK is nil, characters which do not exist or are
undisplayable will be given as nils in the return value.  When
FALLBACK is 'drop, such characters will be silently dropped from
the return value.  When FALLBACK is 'error, such characters cause
an error to be thrown.

To allow fallbacks of arbitrary length, give FALLBACK as a vector-
of-vectors, with outer length equal to the length of sequence.  The
inner vectors may contain a sequence of characters, a literal
string, or nil.  Eg

   (ucs-utils-vector '(\"Middle Dot\" \"Ampersand\" \"Horizontal Ellipsis\")
                     '[?.           [?a ?n ?d]  [\"...\"]              ])

or

   (ucs-utils-vector \"Horizontal Ellipsis\" '[[\"...\"]])

TEST is an optional predicate which characters must pass.  A
useful value is 'char-displayable-p, which is available as
the abbreviation 'cdp, unless you have otherwise defined that
symbol.

If NO-FLATTEN is non-nil, then a vector-of-vectors may be returned
if multi-character fallbacks were used as in the example above.

(fn SEQUENCE &optional FALLBACK TEST NO-FLATTEN)" nil nil)(autoload 'ucs-utils-string "ucs-utils" "Return a string corresponding to SEQUENCE of UCS names or characters.

If SEQUENCE is a single string, it will be coerced to a list of
length 1.  Each name in SEQUENCE is matched leniently by
`ucs-utils--lookup'.

FALLBACK should be a sequence of equal length to SEQUENCE, (or
one of the special symbols described in the next paragraph).  For
any element of SEQUENCE which does not exist or is not
displayable according to TEST, that element degrades to the
corresponding element of FALLBACK.

When FALLBACK is nil or 'drop, characters which do not exist or
are undisplayable will be silently dropped from the return value.
When FALLBACK is 'error, such characters cause an error to be
thrown.

TEST is an optional predicate which characters must pass.  A
useful value is 'char-displayable-p, which is available as
the abbreviation 'cdp, unless you have otherwise defined that
symbol.

(fn SEQUENCE &optional FALLBACK TEST)" nil nil)(autoload 'ucs-utils-intact-string "ucs-utils" "Return a string corresponding to SEQUENCE of UCS names or characters.

This function differs from `ucs-utils-string' in that FALLBACK is
a non-optional single string, to be used unless every member of
SEQUENCE exists and passes TEST.  FALLBACK may not be nil, 'error,
or 'drop as in `ucs-utils-string'.

If SEQUENCE is a single string, it will be coerced to a list of
length 1.  Each name in SEQUENCE is matched leniently by
`ucs-utils--lookup'.

TEST is an optional predicate which characters must pass.  A
useful value is 'char-displayable-p, which is available as
the abbreviation 'cdp, unless you have otherwise defined that
symbol.

(fn SEQUENCE FALLBACK &optional TEST)" nil nil)(autoload 'ucs-utils-subst-char-in-region "ucs-utils" "From START to END, replace FROM-CHAR with TO-CHAR each time it occurs.

If optional arg NO-UNDO is non-nil, don't record this change for
undo and don't mark the buffer as really changed.

Characters may be of differing byte-lengths.

The character at the position END is not included, matching the
behavior of `subst-char-in-region'.

This function is slower than `subst-char-in-region'.

(fn START END FROM-CHAR TO-CHAR &optional NO-UNDO)" nil nil)(autoload 'ucs-utils-read-char-by-name "ucs-utils" "Read a character by its Unicode name or hex number string.

A wrapper for `read-char-by-name', with the option to use
`ido-completing-read'.

PROMPT is displayed, and a string that represents a character by
its name is read.

When IDO is set, several seconds are required on the first
run as all completion candidates are pre-generated.

(fn PROMPT &optional IDO)" nil nil)(autoload 'ucs-utils-eval "ucs-utils" "Display a string UCS name for the character at POS.

POS defaults to the current point.

If `transient-mark-mode' is enabled and there is an active
region, return a list of strings UCS names, one for each
character in the region.  If called from Lisp with an
explicit POS, ignores the region.

If called with universal prefix ARG, display the result
in a separate buffer.  If called with two universal
prefix ARGs, replace the current character or region with
its UCS name translation.

(fn &optional POS ARG)" t nil)(autoload 'ucs-utils-ucs-insert "ucs-utils" "Insert CHARACTER in COUNT copies, where CHARACTER is a Unicode code point.

Works like `ucs-insert', with the following differences

    * Uses `ido-completing-read' at the interactive prompt

    * If `transient-mark-mode' is enabled, and the region contains
      a valid UCS character name, that value is used as the
      character name and the region is replaced.

    * A UCS character name string may be passed for CHARACTER.

INHERIT is as documented at `ucs-insert'.

(fn CHARACTER &optional COUNT INHERIT)" t nil)(autoload 'ucs-utils-install-aliases "ucs-utils" "Install aliases outside the \"ucs-utils-\" namespace.

The following aliases will be installed:

    `ucs-char'                  for   `ucs-utils-char'
    `ucs-first-existing-char'   for   `ucs-utils-first-existing-char'
    `ucs-string'                for   `ucs-utils-string'
    `ucs-intact-string'         for   `ucs-utils-intact-string'
    `ucs-vector'                for   `ucs-utils-vector'
    `ucs-pretty-name'           for   `ucs-utils-pretty-name'
    `ucs-eval'                  for   `ucs-utils-eval'" t nil)(autoload 'ace-select-window "ace-window" "Ace select window." t nil)(autoload 'ace-delete-window "ace-window" "Ace delete window." t nil)(autoload 'ace-swap-window "ace-window" "Ace swap window." t nil)(autoload 'ace-delete-other-windows "ace-window" "Ace delete other windows." t nil)(autoload 'ace-display-buffer "ace-window" "Make `display-buffer' and `pop-to-buffer' select using `ace-window'.
See sample config for `display-buffer-base-action' and `display-buffer-alist':
https://github.com/abo-abo/ace-window/wiki/display-buffer.

(fn BUFFER ALIST)" nil nil)(autoload 'ace-window "ace-window" "Select a window.
Perform an action based on ARG described below.

By default, behaves like extended `other-window'.
See `aw-scope' which extends it to work with frames.

Prefixed with one \\[universal-argument], does a swap between the
selected window and the current window, so that the selected
buffer moves to current window (and current buffer moves to
selected window).

Prefixed with two \\[universal-argument]'s, deletes the selected
window.

(fn ARG)" t nil)(defvar ace-window-display-mode nil "Non-nil if Ace-Window-Display mode is enabled.
See the `ace-window-display-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ace-window-display-mode'.")(autoload 'ace-window-display-mode "ace-window" "Minor mode for showing the ace window key in the mode line.

If called interactively, enable Ace-Window-Display mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'writeroom-mode "writeroom-mode" "Minor mode for distraction-free writing.

If called interactively, enable Writeroom mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-writeroom-mode 'globalized-minor-mode t)(defvar global-writeroom-mode nil "Non-nil if Global Writeroom mode is enabled.
See the `global-writeroom-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-writeroom-mode'.")(autoload 'global-writeroom-mode "writeroom-mode" "Toggle Writeroom mode in all buffers.
With prefix ARG, enable Global Writeroom mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Writeroom mode is enabled in all buffers where
`turn-on-writeroom-mode' would do it.
See `writeroom-mode' for more information on Writeroom mode.

(fn &optional ARG)" t nil)(autoload 'visual-fill-column-mode "visual-fill-column" "Wrap lines according to `fill-column' in `visual-line-mode'.

If called interactively, enable Visual-Fill-Column mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(put 'global-visual-fill-column-mode 'globalized-minor-mode t)(defvar global-visual-fill-column-mode nil "Non-nil if Global Visual-Fill-Column mode is enabled.
See the `global-visual-fill-column-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-visual-fill-column-mode'.")(autoload 'global-visual-fill-column-mode "visual-fill-column" "Toggle Visual-Fill-Column mode in all buffers.
With prefix ARG, enable Global Visual-Fill-Column mode if ARG is positive;
otherwise, disable it.  If called from Lisp, enable the mode if
ARG is omitted or nil.

Visual-Fill-Column mode is enabled in all buffers where
`turn-on-visual-fill-column-mode' would do it.
See `visual-fill-column-mode' for more information on Visual-Fill-Column mode.

(fn &optional ARG)" t nil)(autoload 'visual-fill-column-split-window-sensibly "visual-fill-column" "Split WINDOW sensibly, unsetting its margins first.
This function unsets the window margins and calls
`split-window-sensibly'.

By default, `split-window-sensibly' does not split a window
vertically if it has wide margins, even if there is enough space
for a vertical split.  This function can be used as the value of
`split-window-preferred-function' to enable vertically splitting
windows with wide margins.

(fn &optional WINDOW)" nil nil)(autoload 'mixed-pitch-mode "mixed-pitch" "Change the default face of the current buffer to a variable pitch, while keeping some faces fixed pitch.

If called interactively, enable Mixed-Pitch mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

See the variable `mixed-pitch-fixed-pitch-faces' for a list of
which faces remain fixed pitch. The height and pitch of faces is
inherited from `variable-pitch' and `default'.

(fn &optional ARG)" t nil)(autoload 'eshell-z "eshell-z" "Switch to eshell and change directory to DIR.

(fn DIR)" t nil)(autoload 'setup-esh-help-eldoc "esh-help" "Setup eldoc function for Eshell." t nil)(autoload 'esh-help-run-help "esh-help" "Show help for the pointed command or functions CMD.
It comes from Zsh.

(fn CMD)" t nil)(autoload 'eshell-did-you-mean-setup "eshell-did-you-mean" "`eshell-did-you' setup." nil nil)(autoload 'fish-completion-mode "fish-completion" "Turn on/off fish shell completion in all future shells or Eshells.

If called interactively, enable Fish-Completion mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

In `shell', completion is replaced by fish completion.
In `eshell', fish completion is only used when `pcomplete' fails.

(fn &optional ARG)" t nil)(autoload 'bash-completion-setup "bash-completion" "Register bash completion for the shell buffer and shell command line.

This function adds `bash-completion-dynamic-complete' to the completion
function list of shell mode, `shell-dynamic-complete-functions'.

This function is convenient, but it might not be the best way of enabling
bash completion in your .emacs file because it forces you to load the module
before it is needed. For an autoload version, add:

  (autoload 'bash-completion-dynamic-complete \"bash-completion\"
    \"BASH completion hook\")
  (add-hook 'shell-dynamic-complete-functions
          'bash-completion-dynamic-complete)
" nil nil)(autoload 'bash-completion-dynamic-complete "bash-completion" "Return the completion table for bash command at point.

This function is meant to be added into
`shell-dynamic-complete-functions'.  It uses `comint' to figure
out what the current command is and returns a completion table or
nil if no completions available.

When doing completion outside of a comint buffer, call
`bash-completion-dynamic-complete-nocomint' instead." nil nil)(autoload 'bash-completion-dynamic-complete-nocomint "bash-completion" "Return completion information for bash command at an arbitrary position.

The bash command to be completed begins at COMP-START in the
current buffer. This must specify where the current command
starts, usually right after the prompt. 

COMP-POS is the point where completion should happen, usually
just (point). Note that a bash command can span across multiple
line, so COMP-START is not necessarily on the same line as
COMP-POS.

This function does not assume that the current buffer is a shell
or even comint buffer. It can safely be called from any buffer
where a bash command appears, including `completion-at-point'.

If DYNAMIC-TABLE is passed a non-nil value, the resulting
collection will be a function that fetches the result lazily,
when it's called.

When calling from `completion-at-point', make sure to pass a
non-nil value to DYNAMIC-TABLE. This isn't just an optimization:
returning a function instead of a list tells Emacs it should
avoids post-filtering the results and possibly discarding useful
completion from bash.

When calling from another completion engine, make sure to treat
the returned completion as reliable and not post-process them
further.

Returns (list stub-start stub-end completions) with
 - stub-start, the position at which the completed region starts
 - stub-end, the position at which the completed region ends
 - completions, a possibly empty list of completion candidates
   or a function, if DYNAMIC-TABLE is non-nil, a lambda such as the one
   returned by `completion-table-dynamic'

(fn COMP-START &optional COMP-POS DYNAMIC-TABLE)" nil nil)(autoload 'bash-completion-refresh "bash-completion" "Force a refresh the completion table.

This can be called after changing the completion table on BASH,
or after starting a new BASH job.

This is only useful when `bash-completion-use-separate-processes'
is t." t nil)(autoload 'bash-completion-reset "bash-completion" "Force the next completion command to start with a fresh BASH process.

This function kills any existing BASH completion process. This
way, the next time BASH completion is requested, a new process
will be created with the latest configuration. The BASH
completion process that will be killed depends on the
default-directory of the buffer where the command is executed.

Call this method if you have updated your .bashrc or any bash init scripts
and would like bash completion in Emacs to take these changes into account." t nil)(autoload 'vterm-module-compile "vterm" "Compile vterm-module." t nil)(autoload 'vterm-next-error-function "vterm" "Advance to the next error message and visit the file where the error was.
This is the value of `next-error-function' in Compilation
buffers.  Prefix arg N says how many error messages to move
forwards (or backwards, if negative).

Optional argument RESET clears all the errors.

(fn N &optional RESET)" t nil)(autoload 'vterm "vterm" "Create a new vterm.

If called with an argument BUFFER-NAME, the name of the new buffer will
be set to BUFFER-NAME, otherwise it will be `vterm'

(fn &optional BUFFER-NAME)" t nil)(autoload 'vterm-other-window "vterm" "Create a new vterm in another window.

If called with an argument BUFFER-NAME, the name of the new buffer will
be set to BUFFER-NAME, otherwise it will be `vterm'

(fn &optional BUFFER-NAME)" t nil)(autoload 'pass "pass" "Open the password-store buffer." t nil)(autoload 'password-store-edit "password-store" "Edit password for ENTRY.

(fn ENTRY)" t nil)(autoload 'password-store-get "password-store" "Return password for ENTRY.

Returns the first line of the password data.
When CALLBACK is non-`NIL', call CALLBACK with the first line instead.

(fn ENTRY &optional CALLBACK)" nil nil)(autoload 'password-store-get-field "password-store" "Return FIELD for ENTRY.
FIELD is a string, for instance \"url\". 
When CALLBACK is non-`NIL', call it with the line associated to FIELD instead.
If FIELD equals to symbol secret, then this function reduces to `password-store-get'.

(fn ENTRY FIELD &optional CALLBACK)" nil nil)(autoload 'password-store-clear "password-store" "Clear secret in the kill ring.

Optional argument FIELD, a symbol or a string, describes
the stored secret to clear; if nil, then set it to 'secret.
Note, FIELD does not affect the function logic; it is only used
to display the message:

(message \"Field %s cleared.\" field).

(fn &optional FIELD)" t nil)(autoload 'password-store-copy "password-store" "Add password for ENTRY into the kill ring.

Clear previous password from the kill ring.  Pointer to the kill ring
is stored in `password-store-kill-ring-pointer'.  Password is cleared
after `password-store-time-before-clipboard-restore' seconds.

(fn ENTRY)" t nil)(autoload 'password-store-copy-field "password-store" "Add FIELD for ENTRY into the kill ring.

Clear previous secret from the kill ring.  Pointer to the kill ring is
stored in `password-store-kill-ring-pointer'.  Secret field is cleared
after `password-store-timeout' seconds.
If FIELD equals to symbol secret, then this function reduces to `password-store-copy'.

(fn ENTRY FIELD)" t nil)(autoload 'password-store-init "password-store" "Initialize new password store and use GPG-ID for encryption.

Separate multiple IDs with spaces.

(fn GPG-ID)" t nil)(autoload 'password-store-insert "password-store" "Insert a new ENTRY containing PASSWORD.

(fn ENTRY PASSWORD)" t nil)(autoload 'password-store-generate "password-store" "Generate a new password for ENTRY with PASSWORD-LENGTH.

Default PASSWORD-LENGTH is `password-store-password-length'.

(fn ENTRY &optional PASSWORD-LENGTH)" t nil)(autoload 'password-store-remove "password-store" "Remove existing password for ENTRY.

(fn ENTRY)" t nil)(autoload 'password-store-rename "password-store" "Rename ENTRY to NEW-ENTRY.

(fn ENTRY NEW-ENTRY)" t nil)(autoload 'password-store-version "password-store" "Show version of pass executable." t nil)(autoload 'password-store-url "password-store" "Browse URL stored in ENTRY.

(fn ENTRY)" t nil)(autoload 'auth-source-pass-enable "auth-source-pass" "Enable auth-source-password-store." nil nil)(autoload 'auth-source-pass-get "auth-source-pass" "Return the value associated to KEY in the password-store entry ENTRY.

ENTRY is the name of a password-store entry.
The key used to retrieve the password is the symbol `secret'.

The convention used as the format for a password-store file is
the following (see http://www.passwordstore.org/#organization):

secret
key1: value1
key2: value2

(fn KEY ENTRY)" nil nil)(autoload 'password-store-otp-token-copy "password-store-otp" "Copy an OTP token from ENTRY to clipboard.

(fn ENTRY)" t nil)(autoload 'password-store-otp-uri-copy "password-store-otp" "Copy an OTP URI from ENTRY to clipboard.

(fn ENTRY)" t nil)(autoload 'password-store-otp-insert "password-store-otp" "Insert a new ENTRY containing OTP-URI.

(fn ENTRY OTP-URI)" t nil)(autoload 'password-store-otp-append "password-store-otp" "Append to an ENTRY the given OTP-URI.

(fn ENTRY OTP-URI)" t nil)(autoload 'password-store-otp-append-from-image "password-store-otp" "Check clipboard for an image and scan it to get an OTP URI, append it to ENTRY.

(fn ENTRY)" t nil)(autoload 'ivy-pass "ivy-pass" "Select an entry and copy its password to the kill ring." t nil)(autoload 'pdf-annot-minor-mode "pdf-annot" "Support for PDF Annotations.

If called interactively, enable Pdf-Annot minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

\\{pdf-annot-minor-mode-map}

(fn &optional ARG)" t nil)(autoload 'pdf-history-minor-mode "pdf-history" "Keep a history of previously visited pages.

If called interactively, enable Pdf-History minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

This is a simple stack-based history.  Turning the page or
following a link pushes the left-behind page on the stack, which
may be navigated with the following keys.

\\{pdf-history-minor-mode-map}

(fn &optional ARG)" t nil)(autoload 'pdf-isearch-minor-mode "pdf-isearch" "Isearch mode for PDF buffer.

If called interactively, enable Pdf-Isearch minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

When this mode is enabled \\[isearch-forward], among other keys,
starts an incremental search in this PDF document.  Since this mode
uses external programs to highlight found matches via
image-processing, proceeding to the next match may be slow.

Therefore two isearch behaviours have been defined: Normal isearch and
batch mode.  The later one is a minor mode
(`pdf-isearch-batch-mode'), which when activated inhibits isearch
from stopping at and highlighting every single match, but rather
display them batch-wise.  Here a batch means a number of matches
currently visible in the selected window.

The kind of highlighting is determined by three faces
`pdf-isearch-match' (for the current match), `pdf-isearch-lazy'
(for all other matches) and `pdf-isearch-batch' (when in batch
mode), which see.

Colors may also be influenced by the minor-mode
`pdf-view-dark-minor-mode'.  If this is minor mode enabled, each face's
dark colors, are used (see e.g. `frame-background-mode'), instead
of the light ones.

\\{pdf-isearch-minor-mode-map}
While in `isearch-mode' the following keys are available. Note
that not every isearch command work as expected.

\\{pdf-isearch-active-mode-map}

(fn &optional ARG)" t nil)(autoload 'pdf-links-minor-mode "pdf-links" "Handle links in PDF documents.\\<pdf-links-minor-mode-map>

If called interactively, enable Pdf-Links minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

If this mode is enabled, most links in the document may be
activated by clicking on them or by pressing \\[pdf-links-action-perform] and selecting
one of the displayed keys, or by using isearch limited to
links via \\[pdf-links-isearch-link].

\\{pdf-links-minor-mode-map}

(fn &optional ARG)" t nil)(autoload 'pdf-links-action-perform "pdf-links" "Follow LINK, depending on its type.

This may turn to another page, switch to another PDF buffer or
invoke `pdf-links-browse-uri-function'.

Interactively, link is read via `pdf-links-read-link-action'.
This function displays characters around the links in the current
page and starts reading characters (ignoring case).  After a
sufficient number of characters have been read, the corresponding
link's link is invoked.  Additionally, SPC may be used to
scroll the current page.

(fn LINK)" t nil)(autoload 'pdf-loader-install "pdf-loader" "Prepare Emacs for using PDF Tools.

This function acts as a replacement for `pdf-tools-install' and
makes Emacs load and use PDF Tools as soon as a PDF file is
opened, but not sooner.

The arguments are passed verbatim to `pdf-tools-install', which
see.

(fn &optional NO-QUERY-P SKIP-DEPENDENCIES-P NO-ERROR-P FORCE-DEPENDENCIES-P)" nil nil)(autoload 'pdf-misc-minor-mode "pdf-misc" "FIXME:  Not documented.

If called interactively, enable Pdf-Misc minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'pdf-misc-size-indication-minor-mode "pdf-misc" "Provide a working size indication in the mode-line.

If called interactively, enable Pdf-Misc-Size-Indication minor
mode if ARG is positive, and disable it if ARG is zero or
negative.  If called from Lisp, also enable the mode if ARG is
omitted or nil, and toggle it if ARG is `toggle'; disable the
mode otherwise.

(fn &optional ARG)" t nil)(autoload 'pdf-misc-menu-bar-minor-mode "pdf-misc" "Display a PDF Tools menu in the menu-bar.

If called interactively, enable Pdf-Misc-Menu-Bar minor mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'pdf-misc-context-menu-minor-mode "pdf-misc" "Provide a right-click context menu in PDF buffers.

If called interactively, enable Pdf-Misc-Context-Menu minor mode
if ARG is positive, and disable it if ARG is zero or negative.
If called from Lisp, also enable the mode if ARG is omitted or
nil, and toggle it if ARG is `toggle'; disable the mode
otherwise.

\\{pdf-misc-context-menu-minor-mode-map}

(fn &optional ARG)" t nil)(autoload 'pdf-occur "pdf-occur" "List lines matching STRING or PCRE.

Interactively search for a regexp. Unless a prefix arg was given,
in which case this functions performs a string search.

If `pdf-occur-prefer-string-search' is non-nil, the meaning of
the prefix-arg is inverted.

(fn STRING &optional REGEXP-P)" t nil)(autoload 'pdf-occur-multi-command "pdf-occur" "Perform `pdf-occur' on multiple buffer.

For a programmatic search of multiple documents see
`pdf-occur-search'." t nil)(defvar pdf-occur-global-minor-mode nil "Non-nil if Pdf-Occur-Global minor mode is enabled.
See the `pdf-occur-global-minor-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pdf-occur-global-minor-mode'.")(autoload 'pdf-occur-global-minor-mode "pdf-occur" "Enable integration of Pdf Occur with other modes.

If called interactively, enable Pdf-Occur-Global minor mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

This global minor mode enables (or disables)
`pdf-occur-ibuffer-minor-mode' and `pdf-occur-dired-minor-mode'
in all current and future ibuffer/dired buffer.

(fn &optional ARG)" t nil)(autoload 'pdf-occur-ibuffer-minor-mode "pdf-occur" "Hack into ibuffer's do-occur binding.

If called interactively, enable Pdf-Occur-Ibuffer minor mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

This mode remaps `ibuffer-do-occur' to
`pdf-occur-ibuffer-do-occur', which will start the PDF Tools
version of `occur', if all marked buffer's are in `pdf-view-mode'
and otherwise fallback to `ibuffer-do-occur'.

(fn &optional ARG)" t nil)(autoload 'pdf-occur-dired-minor-mode "pdf-occur" "Hack into dired's `dired-do-search' binding.

If called interactively, enable Pdf-Occur-Dired minor mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

This mode remaps `dired-do-search' to
`pdf-occur-dired-do-search', which will start the PDF Tools
version of `occur', if all marked buffer's are in `pdf-view-mode'
and otherwise fallback to `dired-do-search'.

(fn &optional ARG)" t nil)(autoload 'pdf-outline-minor-mode "pdf-outline" "Display an outline of a PDF document.

If called interactively, enable Pdf-Outline minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

This provides a PDF's outline on the menu bar via imenu.
Additionally the same outline may be viewed in a designated
buffer.

\\{pdf-outline-minor-mode-map}

(fn &optional ARG)" t nil)(autoload 'pdf-outline "pdf-outline" "Display an PDF outline of BUFFER.

BUFFER defaults to the current buffer.  Select the outline
buffer, unless NO-SELECT-WINDOW-P is non-nil.

(fn &optional BUFFER NO-SELECT-WINDOW-P)" t nil)(autoload 'pdf-outline-imenu-enable "pdf-outline" "Enable imenu in the current PDF buffer." t nil)(autoload 'pdf-sync-minor-mode "pdf-sync" "Correlate a PDF position with the TeX file.
\\<pdf-sync-minor-mode-map>
This works via SyncTeX, which means the TeX sources need to have
been compiled with `--synctex=1'.  In AUCTeX this can be done by
setting `TeX-source-correlate-method' to 'synctex (before AUCTeX
is loaded) and enabling `TeX-source-correlate-mode'.

If called interactively, enable Pdf-Sync minor mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

Then \\[pdf-sync-backward-search-mouse] in the PDF buffer will open the
corresponding TeX location.

If AUCTeX is your preferred tex-mode, this library arranges to
bind `pdf-sync-forward-display-pdf-key' (the default is `C-c C-g')
to `pdf-sync-forward-search' in `TeX-source-correlate-map'.  This
function displays the PDF page corresponding to the current
position in the TeX buffer.  This function only works together
with AUCTeX.

(fn &optional ARG)" t nil)(defvar pdf-tools-handle-upgrades t "Whether PDF Tools should handle upgrading itself.")(autoload 'pdf-tools-install "pdf-tools" "Install PDF-Tools in all current and future PDF buffers.

If the `pdf-info-epdfinfo-program' is not running or does not
appear to be working, attempt to rebuild it.  If this build
succeeded, continue with the activation of the package.
Otherwise fail silently, i.e. no error is signaled.

Build the program (if necessary) without asking first, if
NO-QUERY-P is non-nil.

Don't attempt to install system packages, if SKIP-DEPENDENCIES-P
is non-nil.

Do not signal an error in case the build failed, if NO-ERROR-P is
non-nil.

Attempt to install system packages (even if it is deemed
unnecessary), if FORCE-DEPENDENCIES-P is non-nil.

Note that SKIP-DEPENDENCIES-P and FORCE-DEPENDENCIES-P are
mutually exclusive.

Note further, that you can influence the installation directory
by setting `pdf-info-epdfinfo-program' to an appropriate
value (e.g. ~/bin/epdfinfo) before calling this function.

See `pdf-view-mode' and `pdf-tools-enabled-modes'.

(fn &optional NO-QUERY-P SKIP-DEPENDENCIES-P NO-ERROR-P FORCE-DEPENDENCIES-P)" t nil)(autoload 'pdf-tools-enable-minor-modes "pdf-tools" "Enable MODES in the current buffer.

MODES defaults to `pdf-tools-enabled-modes'.

(fn &optional MODES)" t nil)(autoload 'pdf-tools-help "pdf-tools" nil t nil)(autoload 'pdf-view-bookmark-jump-handler "pdf-view" "The bookmark handler-function interface for bookmark BMK.

See also `pdf-view-bookmark-make-record'.

(fn BMK)" nil nil)(autoload 'pdf-virtual-edit-mode "pdf-virtual" "Major mode when editing a virtual PDF buffer.

(fn)" t nil)(autoload 'pdf-virtual-view-mode "pdf-virtual" "Major mode in virtual PDF buffers.

(fn)" t nil)(defvar pdf-virtual-global-minor-mode nil "Non-nil if Pdf-Virtual-Global minor mode is enabled.
See the `pdf-virtual-global-minor-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pdf-virtual-global-minor-mode'.")(autoload 'pdf-virtual-global-minor-mode "pdf-virtual" "Enable recognition and handling of VPDF files.

If called interactively, enable Pdf-Virtual-Global minor mode if
ARG is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'pdf-virtual-buffer-create "pdf-virtual" "

(fn &optional FILENAMES BUFFER-NAME DISPLAY-P)" t nil)(defvar ivy-taskrunner-minor-mode nil "Non-nil if Ivy-Taskrunner minor mode is enabled.
See the `ivy-taskrunner-minor-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ivy-taskrunner-minor-mode'.")(autoload 'ivy-taskrunner-minor-mode "ivy-taskrunner" "Minor mode for asynchronously collecting project tasks when a project is switched to.

If called interactively, enable Ivy-Taskrunner minor mode if ARG
is positive, and disable it if ARG is zero or negative.  If
called from Lisp, also enable the mode if ARG is omitted or nil,
and toggle it if ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'ivy-taskrunner "ivy-taskrunner" "Launch `ivy' to select a task to run in the current project.
This command runs asynchronously so the ivy prompt might not show
for several seconds." t nil)(autoload 'ivy-taskrunner-delete-custom-command "ivy-taskrunner" "Delete a custom command and remove it from the tasks output." t nil)(autoload 'ivy-taskrunner-delete-all-custom-commands "ivy-taskrunner" "Delete all custom commands for the currently visited project.

(fn &optional _)" t nil)(autoload 'ivy-taskrunner-update-cache "ivy-taskrunner" "Refresh the task cache for the current project and show all tasks." t nil)(autoload 'ivy-taskrunner-rerun-last-command "ivy-taskrunner" "Rerun the last task ran in the currently visited project." t nil)(autoload 'ivy-taskrunner-task-buffers "ivy-taskrunner" "Show all `ivy-taskrunner' buffers." t nil)(autoload 'ivy-taskrunner-kill-all-buffers "ivy-taskrunner" "Kill all `ivy-taskrunner' compilation buffers." nil nil)(autoload 'ivy-taskrunner-config-files "ivy-taskrunner" "Open the configuration files(if any are present) at project root." t nil)(autoload 'ivy-taskrunner-command-history "ivy-taskrunner" "Show the command history for the currently visited project." t nil)(defvar xclip-mode nil "Non-nil if Xclip mode is enabled.
See the `xclip-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `xclip-mode'.")(autoload 'xclip-mode "xclip" "Minor mode to use the `xclip' program to copy&paste.

If called interactively, enable Xclip mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(autoload 'evil-terminal-cursor-changer-activate "evil-terminal-cursor-changer" "Enable evil terminal cursor changer." t nil)(defalias 'etcc-on 'evil-terminal-cursor-changer-activate)(autoload 'evil-terminal-cursor-changer-deactivate "evil-terminal-cursor-changer" "Disable evil terminal cursor changer." t nil)(defalias 'etcc-off 'evil-terminal-cursor-changer-deactivate)(autoload 'csv-mode "csv-mode" "Major mode for editing files of comma-separated value type.

CSV mode is derived from `text-mode', and runs `text-mode-hook' before
running `csv-mode-hook'.  It turns `auto-fill-mode' off by default.
CSV mode can be customized by user options in the CSV customization
group.  The separators are specified by the value of `csv-separators'.

CSV mode commands ignore blank lines and comment lines beginning with
the value of `csv-comment-start', which delimit \"paragraphs\".
\"Sexp\" is re-interpreted to mean \"field\", so that `forward-sexp'
(\\[forward-sexp]), `kill-sexp' (\\[kill-sexp]), etc. all apply to fields.
Standard comment commands apply, such as `comment-dwim' (\\[comment-dwim]).

If `font-lock-mode' is enabled then separators, quoted values and
comment lines are highlighted using respectively `csv-separator-face',
`font-lock-string-face' and `font-lock-comment-face'.

The user interface (UI) for CSV mode commands is similar to that of
the standard commands `sort-fields' and `sort-numeric-fields', except
that if there is no prefix argument then the UI prompts for the field
index or indices.  In `transient-mark-mode' only: if the region is not
set then the UI attempts to set it to include all consecutive CSV
records around point, and prompts for confirmation; if there is no
prefix argument then the UI prompts for it, offering as a default the
index of the field containing point if the region was not set
explicitly.  The region set automatically is delimited by blank lines
and comment lines, and the number of header lines at the beginning of
the region given by the value of `csv-header-lines' are skipped.

Sort order is controlled by `csv-descending'.

CSV mode provides the following specific keyboard key bindings:

\\{csv-mode-map}

(fn)" t nil)(autoload 'tsv-mode "csv-mode" "Major mode for editing files of tab-separated value type.

(fn)" t nil)(autoload 'ledger-flymake-enable "ledger-flymake" "Enable `flymake-mode' in `ledger-mode' buffers." nil nil)(autoload 'ledger-mode "ledger-mode" "A mode for editing ledger data files.

(fn)" t nil)(autoload 'evil-ledger-mode "evil-ledger" "Minor mode for more evil in `ledger-mode'.

If called interactively, enable Evil-Ledger mode if ARG is
positive, and disable it if ARG is zero or negative.  If called
from Lisp, also enable the mode if ARG is omitted or nil, and
toggle it if ARG is `toggle'; disable the mode otherwise.

The following keys are available in `evil-ledger-mode':

\\{evil-ledger-mode-map}

(fn &optional ARG)" t nil)(autoload 'org-pdftools-open "org-pdftools" "Function to open org-pdftools LINK.

(fn LINK)" nil nil)(autoload 'org-pdftools-store-link "org-pdftools" "Store a link to a pdfview/pdfoccur buffer." nil nil)(autoload 'org-pdftools-export "org-pdftools" "Export the pdfview LINK with DESCRIPTION for FORMAT from Org files.

(fn LINK DESCRIPTION FORMAT)" nil nil)(autoload 'org-pdftools-setup-link "org-pdftools" "Set up pdf: links in org-mode.

(fn &optional PREFIX)" nil nil)(autoload 'org-pdftools-complete-link "org-pdftools" "Use the existing file name completion for file.
Links to get the file name, then ask the user for the page number
and append it. ARG is passed to `org-link-complete-file'.

(fn &optional ARG)" nil nil)(autoload 'org-noter "org-noter" "Start `org-noter' session.

There are two modes of operation. You may create the session from:
- The Org notes file
- The document to be annotated (PDF, EPUB, ...)

- Creating the session from notes file -----------------------------------------
This will open a session for taking your notes, with indirect
buffers to the document and the notes side by side. Your current
window configuration won't be changed, because this opens in a
new frame.

You only need to run this command inside a heading (which will
hold the notes for this document). If no document path property is found,
this command will ask you for the target file.

With a prefix universal argument ARG, only check for the property
in the current heading, don't inherit from parents.

With 2 prefix universal arguments ARG, ask for a new document,
even if the current heading annotates one.

With a prefix number ARG:
- Greater than 0: Open the document like `find-file'
-     Equal to 0: Create session with `org-noter-always-create-frame' toggled
-    Less than 0: Open the folder containing the document

- Creating the session from the document ---------------------------------------
This will try to find a notes file in any of the parent folders.
The names it will search for are defined in `org-noter-default-notes-file-names'.
It will also try to find a notes file with the same name as the
document, giving it the maximum priority.

When it doesn't find anything, it will interactively ask you what
you want it to do. The target notes file must be in a parent
folder (direct or otherwise) of the document.

You may pass a prefix ARG in order to make it let you choose the
notes file, even if it finds one.

(fn &optional ARG)" t nil)(autoload 'org-rst-export-as-rst "ox-rst" "Export current buffer to a reStructuredText buffer.

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

A non-nil optional argument ASYNC means the process should happen
asynchronously.  The resulting buffer should be accessible
through the `org-export-stack' interface.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

Export is done in a buffer named \"*Org RST Export*\", which will
be displayed when `org-export-show-temporary-export-buffer' is
non-nil.

(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t nil)(autoload 'org-rst-convert-region-to-rst "ox-rst" "Assume the current region has Org syntax, and convert it to
reStructuredText.
This can be used in any buffer.  For example, you can write an
itemized list in Org syntax in a Markdown buffer and use this command
to convert it." t nil)(autoload 'org-rst-export-to-rst "ox-rst" "Export current buffer to a reStructuredText file.

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

A non-nil optional argument ASYNC means the process should happen
asynchronously.  The resulting file should be accessible through
the `org-export-stack' interface.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

Return output file's name.

(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t nil)(autoload 'org-rst-publish-to-rst "ox-rst" "Publish an org file to reStructuredText.

FILENAME is the filename of the Org file to be published.  PLIST
is the property list for the given project.  PUB-DIR is the
publishing directory.

Return output file name.

(fn PLIST FILENAME PUB-DIR)" nil nil)(autoload 'sphinx-mode "sphinx-mode" "Sphinx minor mode.

If called interactively, enable Sphinx mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is `toggle'; disable the mode otherwise.

(fn &optional ARG)" t nil)(let ((loads (get 'swift 'custom-loads))) (if (member '"swift-mode" loads) nil (put 'swift 'custom-loads (cons '"swift-mode" loads))))(custom-add-load 'languages 'swift-mode)(with-eval-after-load 'cus-load (custom-add-load 'languages 'swift-mode))(defsubst swift-mode:add-supported-extension-for-speedbar nil (if (fboundp 'speedbar-add-supported-extension) (speedbar-add-supported-extension ".swift") (add-hook 'speedbar-load-hook (lambda nil (speedbar-add-supported-extension ".swift")))))(autoload 'swift-mode "swift-mode" "Major mode for editing Swift code.

\\{swift-mode-map}

(fn)" t nil)(swift-mode:add-supported-extension-for-speedbar)(let ((loads (get 'swift-mode:faces 'custom-loads))) (if (member '"swift-mode-font-lock" loads) nil (put 'swift-mode:faces 'custom-loads (cons '"swift-mode-font-lock" loads))))(let ((loads (get 'swift-mode:imenu 'custom-loads))) (if (member '"swift-mode-imenu" loads) nil (put 'swift-mode:imenu 'custom-loads (cons '"swift-mode-imenu" loads))))(let ((loads (get 'swift-mode:repl 'custom-loads))) (if (member '"swift-mode-repl" loads) nil (put 'swift-mode:repl 'custom-loads (cons '"swift-mode-repl" loads))))(autoload 'swift-mode:run-repl "swift-mode-repl" "Run a Swift REPL process.

This function input and output via buffer `*CMD*' where CMD is replaced with
the CMD given.
If there is a process already running in `*CMD*', and DONT-SWITCH is nil,
switch to that buffer.
CMD is a string or a list, interpreted as a command line.  The default value is
`swift-mode:repl-executable'.  This function updates the buffer local variable
`swift-mode:repl-executable' with the given CMD if KEEP-DEFAULT is nil,
so it will be used as the default value for the next invocation in the current
buffer.
If KEEP-DEFAULT is non-nil, the `swift-mode:repl-executable' and the global
variable `swift-mode:repl-buffer' are not updated.  The buffer local variable
`swift-mode:repl-buffer' is always updated.
Runs the hook `swift-repl-mode-hook' (after the `comint-mode-hook' is run).
(Type \\[describe-mode] in the process buffer for a list of commands.)

(fn CMD &optional DONT-SWITCH KEEP-DEFAULT)" t nil)(defalias 'run-swift 'swift-mode:run-repl)(autoload 'swift-mode:send-region "swift-mode-repl" "Send the current region to the inferior swift process.

START and END define region within current buffer

(fn START END)" t nil)(autoload 'swift-mode:send-buffer "swift-mode-repl" "Send the buffer to the Swift REPL process." t nil)(autoload 'swift-mode:build-swift-module "swift-mode-repl" "Build a Swift module in the PROJECT-DIRECTORY.

If PROJECT-DIRECTORY is nil or omitted, it is searched from `default-directory'
or its ancestors.
An list ARGS are appended for builder command line arguments.

(fn &optional PROJECT-DIRECTORY ARGS)" t nil)(autoload 'swift-mode:build-ios-app "swift-mode-repl" "Build an iOS app in the PROJECT-DIRECTORY.
Build it for iOS device DEVICE-IDENTIFIER for the given SCHEME.
If PROJECT-DIRECTORY is nil or omitted, it is searched from `default-directory'
or its ancestors.
DEVICE-IDENTIFIER is the device identifier of the iOS simulator.  If it is nil
or omitted, the value of `swift-mode:ios-device-identifier' is used. If it is
equal to `swift-mode:ios-local-device-identifier', a local device is used via
`ios-deploy' instead.
SCHEME is the name of the project scheme in Xcode.  If it is nil or omitted,
the value of `swift-mode:ios-project-scheme' is used.

(fn &optional PROJECT-DIRECTORY DEVICE-IDENTIFIER SCHEME)" t nil)(autoload 'swift-mode:debug-swift-module "swift-mode-repl" "Run debugger on a Swift module in the PROJECT-DIRECTORY.

If PROJECT-DIRECTORY is nil or omitted, it is searched from `default-directory'
or its ancestors.

(fn &optional PROJECT-DIRECTORY)" t nil)(autoload 'swift-mode:debug-ios-app-on-device "swift-mode-repl" "Run debugger on an iOS app in the PROJECT-DIRECTORY.
Run it for the iOS local device DEVICE-IDENTIFIER for the given SCHEME.
CODESIGNING-FOLDER-PATH is the path of the codesigning folder in Xcode
build settings.

(fn PROJECT-DIRECTORY SCHEME CODESIGNING-FOLDER-PATH)" nil nil)(autoload 'swift-mode:debug-ios-app-on-simulator "swift-mode-repl" "Run debugger on an iOS app in the PROJECT-DIRECTORY.
Run it for the iOS simulator DEVICE-IDENTIFIER for the given SCHEME.
DEVICE-IDENTIFIER is the device identifier of the iOS simulator.
SCHEME is the name of the project scheme in Xcode.
CODESIGNING-FOLDER-PATH is the path of the codesigning folder used in Xcode
build settings.
PRODUCT-BUNDLE-IDENTIFIER is the name of the product bundle identifier used
in Xcode build settings.

(fn PROJECT-DIRECTORY DEVICE-IDENTIFIER SCHEME CODESIGNING-FOLDER-PATH PRODUCT-BUNDLE-IDENTIFIER)" nil nil)(autoload 'swift-mode:debug-ios-app "swift-mode-repl" "Run debugger on an iOS app in the PROJECT-DIRECTORY.
Run it for the iOS simulator device DEVICE-IDENTIFIER for the given SCHEME.
If PROJECT-DIRECTORY is nil or omitted, it is searched from `default-directory'
or its ancestors.
DEVICE-IDENTIFIER is the device identifier of the iOS simulator.  If it is
nil or omitted, the value of `swift-mode:ios-device-identifier' is used.  If
it is equal to `swift-mode:ios-local-device-identifier', a local build via
`ios-deploy' is generated instead.
SCHEME is the name of the project scheme in Xcode.  If it is nil or omitted,
the value of `swift-mode:ios-project-scheme' is used.

(fn &optional PROJECT-DIRECTORY DEVICE-IDENTIFIER SCHEME)" t nil)(autoload 'company-sourcekit "company-sourcekit" "Company backend for swift using sourcekitten.

(fn COMMAND &optional ARG &rest IGNORED)" t nil)(autoload 'flycheck-swift-setup "flycheck-swift" "Setup Flycheck for Swift." t nil)